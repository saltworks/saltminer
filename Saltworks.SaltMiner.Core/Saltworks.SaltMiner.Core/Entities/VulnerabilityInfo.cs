/* --[auto-generated, do not modify this block]--
 *
 * Copyright (c) 2025 Saltworks Security, LLC
 *
 * Use of this software is governed by the Business Source License included
 * in the LICENSE file.
 *
 * Change Date: 2029-06-30
 *
 * On the date above, in accordance with the Business Source License, use
 * of this software will be governed by version 2 or later of the General
 * Public License.
 *
 * ----
 */

ï»¿using Saltworks.SaltMiner.Core.Extensions;
using Saltworks.SaltMiner.Core.Util;
using System;
using System.ComponentModel.DataAnnotations;

namespace Saltworks.SaltMiner.Core.Entities
{
    public class VulnerabilityInfo
    {
        /// <summary>
        /// Gets or sets IsActive.  Indicates whether this issue is active as defined by the source system.
        /// </summary>
        public bool IsActive => !IsSuppressed && !IsRemoved && !IsFiltered && (string.IsNullOrEmpty(TestStatus) || TestStatus == EnumExtensions.GetDescription(EngagementIssueStatus.Found));

        /// <summary>
        /// Gets or sets SourceSeverity. Source severity original value, indicates the severity of the issue.
        /// </summary>
        public string SourceSeverity { get; set; }

        /// <summary>
        /// Gets or sets FoundDate. When the issue was first found in an scan. DateTime is in UTC.
        /// Agent: Leave null if not available (do not use scan date).
        /// Manager: Required, use last scan date if not already available.
        /// </summary>
        [Required]
        public DateTime? FoundDate { get; set; }

        /// <summary>
        /// Gets or sets Id. Identifier used to identify this issue from an external source (not this instance).
        /// </summary>
        public string[] Id { get; set; }

        /// <summary>
        /// Gets IsRemoved. Tells you whether or not this issue stopped appearing in scan findings.
        /// </summary>
        public bool IsRemoved => RemovedDate != null;

        /// <summary>
        /// Gets or sets IsFiltered. Tells you whether or not this issue is filtered or hidden.
        /// </summary>
        public bool IsFiltered { get; set; }

        /// <summary>
        /// Gets or sets IsSuppressed. Indicates whether this issue has been suppressed.
        /// </summary>
        public bool IsSuppressed { get; set; }

        /// <summary>
        /// Gets or sets Location. Location of issue (i.e. URL or file). EG) myfile.js
        /// </summary>
        [Required]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets LocationFull. Full location with path of issue (i.e. URL or file). EG) http://page.com/myfile.js.
        /// </summary>
        [Required]
        public string LocationFull { get; set; }

        /// <summary>
        /// Gets or sets RemovedDate. When the issue was removed (no longer found in an scan). DateTime is in UTC.
        /// Agent: do not set.
        /// Manager: Use last scan date if not already available.
        /// </summary>
        public DateTime? RemovedDate { get; set; }

        /// <summary>
        /// Gets or sets DaysToClose. Time between when the issue was removed and opened..
        /// </summary>
        public int? DaysToClose {
            get {
                if (RemovedDate.HasValue && FoundDate.HasValue)
                {
                    return Math.Abs(FoundDate.Value.Subtract(RemovedDate.Value).Days);
                }
                return null;
            }
        }

        /// <summary>
        /// Gets or sets ReportId. This is the unique identifier from the source for this scan (can repeat across sources). EG 10112. SaltMiner does NOT use this property.
        /// Agent: do not set
        /// Manager: copy from SaltMinerIssueInfo.ReportId
        /// </summary>
        [Required]
        public string ReportId { get; set; }

        /// <summary>
        /// Gets or sets TestStatus. Tells you whether or not this issue is filtered or hidden.
        /// </summary>
        public string TestStatus { get; set; }

        /// <summary>
        /// Gets or sets Audit. Contains references to Auditor, LastAudit, and Audited
        /// <seealso cref="AuditInfo"/>
        /// </summary>
        public AuditInfo Audit { get; set; } = new();

        /// <summary>
        /// Gets or sets Category. The type of system or architecture that the vulnerability affects. These may be platform-specific (for example, Debian or SUSE) or general (for example, Database or Firewall).
        /// Should always be set to "Application" (defaults to this)
        /// </summary>
        [Required]
        public string[] Category { get; set; } = new string[] { "Application" };

        /// <summary>
        /// Gets or sets Classification. This is the classification of the vulnerability scoring system. For example (https://www.first.org/cvss/).
        /// </summary>
        public string Classification { get; set; }

        /// <summary>
        /// Gets or sets Description. The description of the vulnerability that provides additional context of the vulnerability. For example (Common Vulnerabilities and Exposure CVE description).
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets Enumeration. The type of identifier used for this vulnerability. For example (https://cve.mitre.org/about/).
        /// </summary>
        public string Enumeration { get; set; }

        /// <summary>
        /// Gets or sets Proof. Engagement markdown field containing proof of found vulnerability.
        /// </summary>
        public string Proof { get; set; }

        /// <summary>
        /// Gets or sets Details. Engagement markdown field containing details of found vulnerability.
        /// </summary>
        public string Details { get; set; }

        /// <summary>
        /// Gets or sets TestingInstructions. Engagement markdown field containing testing instructions of found vulnerability.
        /// </summary>
        public string TestingInstructions { get; set; }

        /// <summary>
        /// Gets or sets Implication. Engagement markdown field containing implications of found vulnerability.
        /// </summary>
        public string Implication { get; set; }

        /// <summary>
        /// Gets or sets Recommendation. Engagement markdown field containing recommendation for resolution of found vulnerability.
        /// </summary>
        public string Recommendation { get; set; }

        /// <summary>
        /// Gets or sets References. Engagement markdown field containing references for found vulnerability.
        /// </summary>
        public string References { get; set; }

        /// <summary>
        /// Gets or sets Name. Name or short description of issue. EG) SQL Injection.
        /// </summary>
        [Required]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets Reference. A resource that provides additional information, context, and mitigations for the identified vulnerability.
        /// EG) https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6111.
        /// </summary>
        public string Reference { get; set; }

        /// <summary>
        /// Gets or sets Severity. Critical/High/Medium/Low/Info/Zero, indicates the severity of the issue.
        /// </summary>
        [Required]
        public string Severity { get; set; }

        /// <summary>
        /// Gets SeverityLevel. Critical 1/High 2/Medium 3/Low 4/Info 5/Zero 6/NoScan 7, indicates the severity level of the issue.
        /// </summary>
        public int SeverityLevel
        {
            get
            {
                Util.Severity value;

                if (Enum.TryParse(Severity, true, out value))
                {
                    return (int)value;
                }

                return (int)Util.Severity.Info;
            }
        }

        /// <summary>
        /// Scanner information (see class for details)
        /// <seealso cref="ScannerInfo"/>
        /// </summary>
        public ScannerInfo Scanner { get; set; } = new();

        /// <summary>
        /// Gets or sets Score information.
        /// <seealso cref="ScoreInfo"/>
        /// </summary>
        public ScoreInfo Score { get; set; } = new();
    }
}
